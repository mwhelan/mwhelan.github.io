<feed xmlns="http://www.w3.org/2005/Atom"><title type="text">michael whelan</title><subtitle type="text">michael whelan</subtitle><id>http://www.michael-whelan.net/</id><updated>2015-12-21T19:13:01Z</updated><author><name>Michael Whelan</name><uri>http://www.michael-whelan.net</uri><email>mjmwdev@gmail.com</email></author><generator>Sandra.Snow Atom Generator</generator><link rel="alternate" href="http://www.michael-whelan.net/feed.xml" /><link rel="self" type="text/html" title="michael whelan" href="http://www.michael-whelan.net/feed.xml" /><entry><id>http://www.michael-whelan.net/code-compiling-but-resharper-red/</id><title type="text">Code compiling but ReSharper is red</title><summary type="html">&lt;p&gt;From time-to-time, I have this weird situation with ReSharper and Visual Studios (different versions of both) where my code is compiling, but ReSharper is highlighting some things in red. I think there might be a few different solutions to this problem, and I'll add others here if I come across them. The solution that worked for me this time is just to &lt;a href="http://stackoverflow.com/questions/6040338/everything-compiles-but-resharper-marks-everything-in-red"&gt;delete the .suo files&lt;/a&gt;.&lt;/p&gt;

</summary><published>2015-06-19T09:00:00Z</published><updated>2015-06-19T09:00:00Z</updated><link rel="alternate" href="http://www.michael-whelan.net/code-compiling-but-resharper-red/" /><content type="html">&lt;p&gt;From time-to-time, I have this weird situation with ReSharper and Visual Studios (different versions of both) where my code is compiling, but ReSharper is highlighting some things in red. I think there might be a few different solutions to this problem, and I'll add others here if I come across them. The solution that worked for me this time is just to &lt;a href="http://stackoverflow.com/questions/6040338/everything-compiles-but-resharper-marks-everything-in-red"&gt;delete the .suo files&lt;/a&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Another solution that has worked in the past is to clear the ReSharper cache and restart Visual Studio. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ReSharper &amp;gt; Options &amp;gt; Environment &amp;gt; General &amp;gt; Options &amp;gt; General 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Click the Clear Caches button.&lt;/p&gt;
</content></entry><entry><id>http://www.michael-whelan.net/testing-mvc-extending-strongly-typed-navigation/</id><title type="text">Black-Box Testing ASP.Net: Extending Strongly Typed Navigation</title><summary type="html">&lt;p&gt;In a &lt;a href="http://www.michael-whelan.net/testing-mvc-reducing-use-of-magic-strings/"&gt;previous post&lt;/a&gt; in this series, on reducing the use of magic strings, I showed a helper class for creating strongly typed navigation. This lets you derive a URL from a strongly typed controller action by looking up the route in the route table and returning you the same computed URL your application recognises.&lt;/p&gt;

</summary><published>2015-02-22T00:00:00Z</published><updated>2015-02-22T00:00:00Z</updated><link rel="alternate" href="http://www.michael-whelan.net/testing-mvc-extending-strongly-typed-navigation/" /><content type="html">&lt;p&gt;In a &lt;a href="http://www.michael-whelan.net/testing-mvc-reducing-use-of-magic-strings/"&gt;previous post&lt;/a&gt; in this series, on reducing the use of magic strings, I showed a helper class for creating strongly typed navigation. This lets you derive a URL from a strongly typed controller action by looking up the route in the route table and returning you the same computed URL your application recognises.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Here is a test that illustrates the behaviour. This is a standard situation where the URL simply contains the controller and the action, as well as the ID as a route argument. &lt;code&gt;RouteConfig.RegisterRoutes()&lt;/code&gt; is the method in the application that intialises its route table.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void MvcUrlHelper_should_return_correct_route_for_controller_action()
{
    var routes = RouteConfig.RegisterRoutes(new RouteCollection());
    var sut = new MvcUrlHelper(routes);

    sut.GetRelativeUrlFor&amp;lt;StudentController&amp;gt;(x =&amp;gt; x.Details(1))
        .Should().Be("/Student/Details/1");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recently, I've had a couple of reasons to extend this class. Firstly, I've been testing applications that use Areas. Secondly, I've needed to be able to pass in additional route values.&lt;/p&gt;

&lt;p&gt;I will start off with the final class and then discuss the additional behaviour:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MvcUrlHelper
{
    private readonly RouteCollection routeCollection;

    public MvcUrlHelper(RouteCollection routeCollection)
    {
        this.routeCollection = routeCollection;
    }

    public string GetRelativeUrlFor&amp;lt;TController&amp;gt;(Expression&amp;lt;Action&amp;lt;TController&amp;gt;&amp;gt; action, IDictionary&amp;lt;string, object&amp;gt; routeValues = null)
        where TController : Controller
    {
        var requestContext = new RequestContext(FakeHttpContext.Root(), new RouteData());

        // Get controller and action values
        var actionRouteValues = Microsoft.Web.Mvc.Internal.ExpressionHelper.GetRouteValuesFromExpression(action);

        var area = GetArea(typeof(TController));
        if (!string.IsNullOrEmpty(area))
        {
            actionRouteValues.Add("Area", area);
        }

        if (routeValues != null)
        {
            foreach (var v in routeValues) actionRouteValues[v.Key] = v.Value;
        }

        var urlHelper = new UrlHelper(requestContext, this.routeCollection);
        var relativeUrl = urlHelper.RouteUrl(new RouteValueDictionary(actionRouteValues));

        return relativeUrl;
    }

    private static string GetArea(Type controllerType)
    {
        var routeAreaAttributes = controllerType.GetCustomAttributes(typeof(RouteAreaAttribute), true);
        if (routeAreaAttributes.Length &amp;gt; 0)
        {
            var routeArea = (RouteAreaAttribute)(routeAreaAttributes[0]);
            return routeArea.AreaName;
        }

        var nameSpace = controllerType.Namespace;
        if (nameSpace == null)
        {
            return string.Empty;
        }

        const string AreasStartSearchString = "Areas.";
        var areasIndexOf = nameSpace.IndexOf(AreasStartSearchString, StringComparison.Ordinal);
        if (areasIndexOf &amp;lt; 0)
        {
            return string.Empty;
        }

        var areaStart = areasIndexOf + AreasStartSearchString.Length;
        var areaString = nameSpace.Substring(areaStart);
        if (areaString.Contains("."))
        {
            areaString = areaString.Remove(areaString.IndexOf(".", StringComparison.Ordinal));
        }

        return areaString;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Areas&lt;/h2&gt;

&lt;p&gt;The MVC5 Futures &lt;code&gt;ExpressionHelper&lt;/code&gt; class does not return the area in the URL (unless you use its Area attribute). Here is the test that illustrates the behaviour I want, where University is the Area and Student the controller. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[TestMethod]
public void should_return_area_in_url()
{
    var routes = RouteConfig.RegisterRoutes(new RouteCollection());
    var sut = new MvcUrlHelper(routes);
    var result = sut.GetRelativeUrlFor&amp;lt;StudentController&amp;gt;(c =&amp;gt; c.Create());
    result.ShouldBe("/University/Student/Create");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;GetArea&lt;/code&gt; method tries to find area information by interrogating the controller type. Firstly, it looks for a &lt;code&gt;RouteAreaAttribute&lt;/code&gt; on the class. Secondly, it looks at the namespace to see if it is in the standard Areas namespace, and extracts the Area from the namespace if it is. If this method returns an area then it is added to the actionRouteValues &lt;code&gt;RouteValueDictionary&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Additional Route Values&lt;/h2&gt;

&lt;p&gt;Sometimes, you must provide additional route values that the &lt;code&gt;UrlHelper&lt;/code&gt; class requires to construct a URL. This test shows the adding of an &lt;code&gt;application&lt;/code&gt; route value, with a value of &lt;code&gt;Books&lt;/code&gt;, which is used in the URL.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[TestMethod]
public void should_return_application_in_url()
{
    var sut = new MvcUrlHelper(new RouteRegistrator().RegisterRoutes());
    var application = new Dictionary&amp;lt;string, object&amp;gt; { { "application", "Books" } };
    var result = sut.GetRelativeUrlFor&amp;lt;CollectionsController&amp;gt;(c =&amp;gt; c.Details(23), application);
    Assert.AreEqual("/Editorial/Applications/Books/Collections/Details?collectionId=23", result);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These additional values are used by UrlHelper in the creation of the full URL to make the test pass.&lt;/p&gt;
</content></entry><entry><id>http://www.michael-whelan.net/testing-mvc-using-aspnet-mvc-view-models-with-selenium-webdriver/</id><title type="text">Black-Box Testing ASP.Net: Using ASP.Net MVC View Models with Selenium WebDriver</title><summary type="html">&lt;p&gt;This post continues the theme of the &lt;a href="http://www.michael-whelan.net/testing-mvc-reducing-use-of-magic-strings/"&gt;previous post&lt;/a&gt;, in looking at how a little knowledge of the inner workings of the MVC application can go a long way to writing less brittle, more maintainable, UI tests with Selenium WebDriver. In this post I am going to look at how we can use the same view model in the test that the application view uses to automate the reading and writing of data from the web page. (It could also be a domain model class, I just prefer to use view models for my views and keep my domain models separate).&lt;/p&gt;

</summary><published>2015-01-04T00:00:00Z</published><updated>2015-01-04T00:00:00Z</updated><link rel="alternate" href="http://www.michael-whelan.net/testing-mvc-using-aspnet-mvc-view-models-with-selenium-webdriver/" /><content type="html">&lt;p&gt;This post continues the theme of the &lt;a href="http://www.michael-whelan.net/testing-mvc-reducing-use-of-magic-strings/"&gt;previous post&lt;/a&gt;, in looking at how a little knowledge of the inner workings of the MVC application can go a long way to writing less brittle, more maintainable, UI tests with Selenium WebDriver. In this post I am going to look at how we can use the same view model in the test that the application view uses to automate the reading and writing of data from the web page. (It could also be a domain model class, I just prefer to use view models for my views and keep my domain models separate).&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some of the sample code is taken straight from &lt;a href="https://github.com/TestStack/TestStack.Seleno"&gt;Seleno&lt;/a&gt;, the Selenium WebDriver browser automation framework from &lt;a href="http://teststack.net/"&gt;TestStack&lt;/a&gt;, and gives you a look under the hood at the sorts of things a UI automation framework does for you. If some of these samples are relevant to the problems you are trying to solve, I encourage you to check out Seleno. It takes care of a lot of the complex infrastructure setup of a Selenium WebDriver project for you, allowing you to get on with the important business of writing specifications for your application. I've produced a working sample on &lt;a href="https://github.com/mwhelan/MvcTestingSamples"&gt;GitHub&lt;/a&gt;, so you should be able to take it, run it, and use some of the code in your own applications if you want to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Input View Model Property into Web Page&lt;/h2&gt;

&lt;p&gt;When you use strongly typed views (with models) and generate HTML for the model properties with expression-based HTML helpers, such as &lt;code&gt;Html.EditorFor()&lt;/code&gt;, MVC will produce controls with predictable names for the properties of the model. This view code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@model ContosoUniversity.ViewModels.CreateStudentForm
...
@Html.EditorFor(model =&amp;gt; model.LastName)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will produce this HTML:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input name="LastName" class="text-box single-line" id="LastName" type="text" value="" &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can leverage this MVC infrastructure in our UI tests to input a model property into a form field. System.Web.Mvc provides the &lt;code&gt;ExpressionHelper.GetExpressionText&lt;/code&gt; method to provide the same control name from the model property that the expression-based HTML helpers provide in the views.&lt;/p&gt;

&lt;p&gt;We can derive a strongly typed base page object from the base page object used in the previous post, where &lt;code&gt;TModel&lt;/code&gt; is the view model class used by that view. The &lt;code&gt;TextBoxFor&lt;/code&gt; method uses ExpressionHelper to derive the name of the control from the model property expression, then uses WebDriver to find the element and populate it with the specified value.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Page&amp;lt;TModel&amp;gt; : Page
{
    public Page&amp;lt;TModel&amp;gt; TextBoxFor&amp;lt;TField&amp;gt;(Expression&amp;lt;Func&amp;lt;TModel, TField&amp;gt;&amp;gt; field, TField value)
    {
        var name = ExpressionHelper.GetExpressionText(field);

        var element = Host.Browser.FindElement(By.Name(name));
        element.Clear();
        element.SendKeys(value.ToString());

        return this;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can modify the &lt;code&gt;NewStudentPage&lt;/code&gt; page object to use the strongly typed page object and specify the &lt;code&gt;CreateStudentForm&lt;/code&gt; view model, which is the one that the view uses. The various Input methods are able to enter data into the web page using the appropriate property expression in a strongly typed way. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class NewStudentPage : Page&amp;lt;CreateStudentForm&amp;gt;
{
    public string HeaderTitle
    {
        get
        {
            var header = Host.Browser.FindElement(By.Id("title"));
            return header.Text;
        }
    }

    public NewStudentPage InputLastName(string lastName)
    {
        TextBoxFor(x =&amp;gt; x.LastName, lastName);
        return this;
    }

    public NewStudentPage InputFirstName(string firstName)
    {
        TextBoxFor(x =&amp;gt; x.FirstMidName, firstName);
        return this;
    }

    public NewStudentPage InputEnrollmentDate(DateTime enrollmentDate)
    {
        TextBoxFor(x =&amp;gt; x.EnrollmentDate, enrollmentDate);
        return this;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In keeping with the page object design pattern each method returns the page so that test code can set multiple properties in the fluent style, as you can see from this test.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void CanPopulateAFormFieldFromModelProperty()
{
    var student = Builder&amp;lt;CreateStudentForm&amp;gt;
        .CreateNew()
        .Build();
    var newStudentPage = Host.NavigateTo&amp;lt;StudentController, NewStudentPage&amp;gt;(x =&amp;gt; x.Create());

    newStudentPage
        .InputFirstName(student.FirstMidName)
        .InputLastName(student.LastName)
        .InputEnrollmentDate(student.EnrollmentDate);

    Host.Browser.FindElement(By.Id("FirstMidName")).GetAttribute("value").Should().Be(student.FirstMidName);
    Host.Browser.FindElement(By.Id("LastName")).GetAttribute("value").Should().Be(student.LastName);
    Host.Browser.FindElement(By.Id("EnrollmentDate")).GetAttribute("value").Should().Be(student.EnrollmentDate.ToString());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Input Whole View Model into Web Page&lt;/h2&gt;

&lt;p&gt;To be honest, I strongly dislike this approach of the page object exposing every property of the view model individually. It lends itself to script-style code, with lots of repetitive calls to set each property, obfuscating the meaning of the test. I prefer more of a specification style of test, where each method on the page object is representative of a behaviour of the application (more than likely representative of a single request/response  - a single controller action). This improves the API of the Page Object layer, and makes for a better Domain Specific Language (DSL) for your tests. &lt;/p&gt;

&lt;p&gt;Ignoring the assertions in this test - which are for demo purposes only - I prefer this test. One or two lines to setup the context and one call to the page object for the action I'm testing. This reads much more like a specification, which I think makes it a lot easier for the Test Reader to quickly see what is going on, and makes the tests a lot easier to maintain over time.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void CanPopulateFormFromModel()
{
    var student = Builder&amp;lt;CreateStudentForm&amp;gt;
        .CreateNew()
        .Build();
    var newStudentPage = Host.NavigateTo&amp;lt;StudentController, NewStudentPage&amp;gt;(x =&amp;gt; x.Create());

    newStudentPage.AddValidStudent(student);

    Host.Browser.FindElement(By.Id("FirstMidName")).GetAttribute("value").Should().Be(student.FirstMidName);
    Host.Browser.FindElement(By.Id("LastName")).GetAttribute("value").Should().Be(student.LastName);
    Host.Browser.FindElement(By.Id("EnrollmentDate")).GetAttribute("value").Should().Be(student.EnrollmentDate.ToString());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have a &lt;a href="https://github.com/TestStack/TestStack.Seleno/blob/master/src/TestStack.Seleno/PageObjects/Actions/PageWriter.cs"&gt;PageWriter&lt;/a&gt; class in Seleno that inputs a whole model like this and handles the different data types and other complexities. Here is a cut down version that works for the 3 text boxes in this example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Page&amp;lt;TModel&amp;gt; : Page
{
    ...
    public Page&amp;lt;TModel&amp;gt; InputModel(TModel model)
    {
        var type = model.GetType();
        foreach (var property in type.GetProperties())
        {
            var element = Host.Browser.FindElement(By.Name(property.Name));
            element.Clear();
            element.SendKeys(property.GetValue(model).ToString());
        }
        return this;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the additional method on the page object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class NewStudentPage : Page&amp;lt;CreateStudentForm&amp;gt;
{
    ...
    public StudentDetailsPage AddValidStudent(CreateStudentForm student)
    {
        InputModel(student);
        return new StudentDetailsPage();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Display Templates do not generate IDs for controls&lt;/h2&gt;

&lt;p&gt;By default MVC only adds ID and name properties to form controls (via the &lt;strong&gt;Editor Templates&lt;/strong&gt;) with the expression-based HTML helpers. It does not do the same with the display expressions (such as &lt;code&gt;Html.DisplayFor()&lt;/code&gt;) that use the &lt;strong&gt;Display Templates&lt;/strong&gt;). &lt;/p&gt;

&lt;p&gt;For example, this code from the Student Details view (Views\Student\Details.cshtml):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dt&amp;gt;
    @Html.DisplayNameFor(model =&amp;gt; model.LastName)
&amp;lt;/dt&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;produces the following HTML with the standard Display Templates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dd&amp;gt;
    Alexander
&amp;lt;/dd&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fortunately, you can override both the Editor and Display templates if you add them to your web project. You can read all about ASP.Net MVC's templating system in &lt;a href="http://bradwilson.typepad.com/blog/2009/10/aspnet-mvc-2-templates-part-1-introduction.html"&gt;this series of posts&lt;/a&gt; from Brad Wilson. Suffice to say, for the purposes of this discussion, you can override the display templates by adding a DisplayTemplates folder to your &lt;code&gt;Views\Shared&lt;/code&gt; folder in your web project. You can copy the DisplayTemplates folder from your Visual Studio installation, or you can install the MvcDisplayTemplates package, provided by &lt;a href="https://twitter.com/matthoneycutt"&gt;Matt Honeycutt&lt;/a&gt; on NuGet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Install-Package MvcDisplayTemplates
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This overrides the &lt;code&gt;_Layout.cshtml&lt;/code&gt; file in the &lt;code&gt;Views\Shared\DisplayTemplates&lt;/code&gt; folder to wrap each model property in the view with a span that uses the &lt;code&gt;Html.IdForModel&lt;/code&gt; Html Helper from System.Web.Mvc to generate an ID for the property control. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@model dynamic
@if (HttpContext.Current.IsDebuggingEnabled)
{ 
    &amp;lt;span id="@Html.IdForModel()"&amp;gt;@RenderBody()&amp;lt;/span&amp;gt;
}
else
{
    @RenderBody()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the &lt;code&gt;Html.DisplayNameFor&lt;/code&gt; expression above generates this HTML, with the value wrapped in a span with an ID. Now that all of our view model properties are named with a well-known, predictable, naming convention, we can set about automating the reading of these properties into a view model in our tests in an automated fashion.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dd&amp;gt;
    &amp;lt;span id="LastName"&amp;gt;Alexander&amp;lt;/span&amp;gt;
&amp;lt;/dd&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Read View Model Property from Web Page&lt;/h2&gt;

&lt;p&gt;We can extend the strongly typed base page with a method to read the value from a view page, again utilising the &lt;code&gt;ExpressionHelper&lt;/code&gt; class from System.Web.Mvc. The &lt;a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.tagbuilder.createsanitizedid%28v=vs.111%29.aspx"&gt;TagBuilder.CreateSanitizedId&lt;/a&gt; method is another System.Web.Mvc helper that ensures only valid HTML characters are used .&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public string DisplayFor&amp;lt;TField&amp;gt;(Expression&amp;lt;Func&amp;lt;TModel, TField&amp;gt;&amp;gt; field)
{
    string name = ExpressionHelper.GetExpressionText(field);
    string id = TagBuilder.CreateSanitizedId(name);

    var span = Host.Browser.FindElement(By.Id(id));

    return span.Text;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which can be used in tests in the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void CanReadFormFieldFromModelProperty()
{
    var studentDetailsPage = Host.NavigateTo&amp;lt;StudentController, StudentDetailsPage&amp;gt;(x =&amp;gt; x.Details(1));

    studentDetailsPage
        .DisplayFor(x =&amp;gt; x.LastName)
        .Should().Be("Alexander");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Read Whole View Model From Web Page&lt;/h2&gt;

&lt;p&gt;As with writing view model data to the page, we can extend this concept to read the whole view model from the page. Again, Seleno has a more fully featured &lt;a href="https://github.com/TestStack/TestStack.Seleno/blob/master/src/TestStack.Seleno/PageObjects/Actions/PageReader.cs"&gt;PageReader&lt;/a&gt; class, but here is a cut down version to illustrate the principle:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public TModel ReadModel()
{
    var type = typeof(TModel);
    var instance = new TModel();

    foreach (var property in type.GetProperties())
    {
        string name = ExpressionHelper.GetExpressionText(property.Name);
        string id = TagBuilder.CreateSanitizedId(name);

        var span = Host.Browser.FindElement(By.Id(id));
        property.SetValue(instance, span.Text, null);
    }

    return instance;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which you could use in tests similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void CanReadModelFromPage()
{
    var studentDetailsPage = Host.NavigateTo&amp;lt;StudentController, StudentDetailsPage&amp;gt;(x =&amp;gt; x.Details(1));

    StudentDetailsViewModel model = studentDetailsPage.ReadModel();

    model.FirstMidName.Should().Be("Carson");
    model.LastName.Should().Be("Alexander");
}
&lt;/code&gt;&lt;/pre&gt;
</content></entry><entry><id>http://www.michael-whelan.net/testing-mvc-reducing-use-of-magic-strings/</id><title type="text">Black-Box Testing ASP.Net: Reducing the Use of Magic Strings</title><summary type="html">&lt;p&gt;Although UI tests for an ASP.Net MVC application are &lt;a href="http://en.wikipedia.org/wiki/Black-box_testing"&gt;black-box tests&lt;/a&gt;, a little bit of knowledge of the inner workings of the application can go a long way to writing less brittle, more maintainable tests. For example, we have a lot of developer techniques for avoiding the use of "magic strings" in our application code. We can take advantage of these same techniques in our tests. &lt;/p&gt;

</summary><published>2015-01-03T00:00:00Z</published><updated>2015-01-03T00:00:00Z</updated><link rel="alternate" href="http://www.michael-whelan.net/testing-mvc-reducing-use-of-magic-strings/" /><content type="html">&lt;p&gt;Although UI tests for an ASP.Net MVC application are &lt;a href="http://en.wikipedia.org/wiki/Black-box_testing"&gt;black-box tests&lt;/a&gt;, a little bit of knowledge of the inner workings of the application can go a long way to writing less brittle, more maintainable tests. For example, we have a lot of developer techniques for avoiding the use of "magic strings" in our application code. We can take advantage of these same techniques in our tests. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some of the sample code is taken straight from &lt;a href="https://github.com/TestStack/TestStack.Seleno"&gt;Seleno&lt;/a&gt;, the Selenium WebDriver browser automation framework from &lt;a href="http://teststack.net/"&gt;TestStack&lt;/a&gt;, and gives you a look under the hood at the sorts of things a UI automation framework does for you. If some of these samples are relevant to the problems you are trying to solve, I encourage you to check out Seleno. It takes care of a lot of the complex infrastructure setup of a Selenium WebDriver project for you, allowing you to get on with the important business of writing specifications for your application. I've produced a working sample on &lt;a href="https://github.com/mwhelan/MvcTestingSamples"&gt;GitHub&lt;/a&gt;, so you should be able to take it, run it, and use some of the code in your own applications if you want to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Magic strings is one of those things we developers often talk about wanting to avoid, but I found it quite difficult to articulate exactly what they are. Rob Conery has a good discussion of them &lt;a href="http://rob.conery.io/2011/03/10/are-friends-immutable/"&gt;here&lt;/a&gt;. As I understand it, the problem is that you can change a string value in your code that will break your application but the code will still compile - you don't discover the issue until runtime. It is preferable to discover the break at compile time (or failing that when you run your unit tests) rather than at runtime. This can be achieved by replacing the string with something strongly typed, like a class or an enum or a resource file. You have to be careful though. Some of the reflection-based techniques are quite nice from a compilation point of view, but can have &lt;a href="http://haacked.com/archive/2009/06/02/alternative-to-expressions.aspx/"&gt;performance implications&lt;/a&gt;. Whilst this might lead you to steer clear of certain solutions in your application code - I'm thinking of strongly typed controller actions here - I think they are well worth it in UI tests, where the need for reducing brittleness is so important and the need to eek out every drop of performance is not as great as it is for your web application.&lt;/p&gt;

&lt;h2&gt;Strongly Typed Navigation&lt;/h2&gt;

&lt;p&gt;One example of magic strings when UI testing MVC applications is page navigation. Selenium WebDriver uses a string URL to navigate. If the URL changes you have no way of knowing until you run the test and it fails. An MVC application uses routes to direct a request for a URL to the matching controller action. Your UI tests can do the same, but in reverse. Take a strongly typed controller action and lookup the route in the route table and return you the same computed URL your application recognises. This completely removes the brittleness of URLs from your tests as the URLs your tests use will always be completely in sync with those that the application is using.&lt;/p&gt;

&lt;p&gt;Here is a test that shows the desired behaviour. &lt;code&gt;RouteConfig.RegisterRoutes()&lt;/code&gt; is the method in the application that intialises its route table.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void MvcUrlHelper_should_return_correct_route_for_controller_action()
{
    var routes = RouteConfig.RegisterRoutes(new RouteCollection());
    var sut = new MvcUrlHelper(routes);

    sut.GetRelativeUrlFor&amp;lt;StudentController&amp;gt;(x =&amp;gt; x.Details(1))
        .Should().Be("/Student/Details/1");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We call the application code to get the same route collection that is configured for the application at startup and pass it into our MvcUrlHelper class. Then we can call the GetRelativeUrlFor generic method, passing the controller as the generic type and an expression for the controller action. It then returns the relative URL that the application uses for that controller action.  &lt;/p&gt;

&lt;p&gt;The code to achieve this is quite simple, as you would expect. Unfortunately, it does require a bit more setup than I would like. It would be nicer if this functionality was simply exposed in System.Web.Mvc (I'm using the latest v5.2.2 as at the time of writing this post).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MvcUrlHelper
{
    private readonly RouteCollection _routeCollection;

    public MvcUrlHelper(RouteCollection routeCollection)
    {
        _routeCollection = routeCollection;
    }

    public string GetRelativeUrlFor&amp;lt;TController&amp;gt;(Expression&amp;lt;Action&amp;lt;TController&amp;gt;&amp;gt; action)
        where TController : Controller
    {
        var requestContext = new RequestContext(FakeHttpContext.Root(), new RouteData());

        var actionRouteValues = Microsoft.Web.Mvc.Internal.ExpressionHelper.GetRouteValuesFromExpression(action);
        var urlHelper = new System.Web.Mvc.UrlHelper(requestContext, _routeCollection);
        var relativeUrl = urlHelper.RouteUrl(new RouteValueDictionary(actionRouteValues));

        return relativeUrl;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Firstly, the ExpressionHelper class, with the single GetRouteValuesFromExpression method requires the MVC5 Futures package (there is a version of this package for each version of MVC).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Install-Package Microsoft.AspNet.Mvc.Futures -Pre
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Secondly, you need to provide fake versions of a number of ASP.Net intrinsic classes. Way back in 2008, &lt;a href="http://stephenwalther.com/archive/2008/07/01/asp-net-mvc-tip-12-faking-the-controller-context"&gt;Stephen Walther wrote&lt;/a&gt; about how you can easily test ASP.NET intrinsics by creating a standard set of fakes for the ASP.NET intrinsics. These classes have been used in a number of libraries, notably MvcContrib.TestHelper and TestStack.Seleno. You can see that I have used the &lt;code&gt;FakeHttpContext&lt;/code&gt; class here, but this in turn depends on the &lt;code&gt;FakeHttpRequest&lt;/code&gt;, &lt;code&gt;FakeHttpResponse&lt;/code&gt;, and &lt;code&gt;FakeHttpSessionState&lt;/code&gt; classes (included in the sample).&lt;/p&gt;

&lt;h3&gt;Strongly Typed Navigation in Action&lt;/h3&gt;

&lt;p&gt;In TestStack.Seleno we don't have an MvcUrlHelper class as such. We instead utilise this behaviour in the PageNavigator class, allowing you to navigate to another page in a strongly typed fashion. Here I've added a NavigateTo method to the Host class, which provides a simplified example of the functionality. The method takes the controller action expression, navigates to the computed URL, and returns the specified page object for the new page location. Note that the MvcUrlHelper is initialised with the application routes once before all the tests run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[SetUpFixture]
public class Host
{
    ...
    private static MvcUrlHelper _mvcUrlHelper ;

    [SetUp]
    public void SetUp()
    {
        ...
        _mvcUrlHelper = new MvcUrlHelper(RouteConfig.RegisterRoutes(new RouteCollection()));
    }

    public static TPage NavigateTo&amp;lt;TController, TPage&amp;gt;(Expression&amp;lt;Action&amp;lt;TController&amp;gt;&amp;gt; action)
        where TController : Controller
        where TPage : new()
    {
        string relativeUrl = _mvcUrlHelper.GetRelativeUrlFor(action);
        string url = string.Format("{0}{1}", WebServer.BaseUrl, relativeUrl);
        Browser.Navigate().GoToUrl(url);
        return new TPage();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is a test that uses strongly typed navigation&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void CanNavigateToPageViaControllerAction()
{
    var newStudentPage = Host.NavigateTo&amp;lt;StudentController, NewStudentPage&amp;gt;(x =&amp;gt; x.Create());
    newStudentPage.Url.Should().Be(Host.WebServer.BaseUrl + "/Student/Create");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because the test now obtains the URL from an expression that is tied to the application, rather than from a string, it is less brittle and always in sync with the code. If the action name changes, or is removed, then this test won't compile, giving instant feedback that the change in the application has broken the test.&lt;/p&gt;

&lt;h2&gt;Resource Files&lt;/h2&gt;

&lt;p&gt;Resource files represent an elegant way to centralise the use of strings in an application and have the added benefit of making them strongly typed constants, as well as the potential benefit of internationalization. There are a few caveats about how you must set them up in the application in order to be able to access them from your test assemblies. K. Scott Allen has a great overview of the problem and solution &lt;a href="http://odetocode.com/blogs/scott/archive/2009/07/16/resource-files-and-asp-net-mvc-projects.aspx"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In summary, to make resource files accessible from other assemblies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't place resource files in one of the special resource directories (&lt;code&gt;App_LocalResources&lt;/code&gt; or &lt;code&gt;App_GlobalResources&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;In the Properties window for the resource file, make sure the &lt;code&gt;Build Action&lt;/code&gt; is set to &lt;code&gt;Embedded Resource&lt;/code&gt;, which embeds the resource in the web application's .dll. &lt;/li&gt;
&lt;li&gt;Also in the Properties window for the resource file, make sure the &lt;code&gt;Custom Tool&lt;/code&gt; is set to &lt;code&gt;PublicResXFileCodeGenerator&lt;/code&gt; instead of &lt;code&gt;ResXCodeFileGenerator&lt;/code&gt;. (Alternatively, you can open the resource file and select &lt;code&gt;Public&lt;/code&gt; from the &lt;code&gt;Access Modifier&lt;/code&gt; dropdown). This makes the class modifier public, and thus accessible outside the assembly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, now I can use a resource value in the view:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h2&amp;gt;&amp;lt;span id="title"&amp;gt;@Resources.Student_CreateForm_Title&amp;lt;/span&amp;gt;&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and in the tests:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void CanAccessResourceFilesFromTests()
{
    var newStudentPage = Host.NavigateTo&amp;lt;StudentController, NewStudentPage&amp;gt;(x =&amp;gt; x.Create());
    newStudentPage.HeaderTitle.Should().Be(Resources.Student_CreateForm_Title);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because the test now just references the constant value it is less brittle. Any changes to the resource file are immediately reflected in the test and don't cause it to break.&lt;/p&gt;

&lt;h2&gt;Static Constant Classes&lt;/h2&gt;

&lt;p&gt;Sometimes it can be useful to embed information in the application page that is just for the purpose of making testing easier. The MVC in Action series of books provide the example of a well-known hidden input on each page that provides a unique page identifier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input type="hidden" name="pageId" value="@LocalSiteMap.Pages.Student.Create" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then create a static class that exposes the site structure as a hierarchical model of constants.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class LocalSiteMap
{
    public static class Pages
    {
        public static class Student
        {
            public static readonly string Create = "studentCreate";
            public static readonly string Delete = "studentDelete";
            public static readonly string Details = "studentDetails";
            public static readonly string Edit = "studentEdit";
            public static readonly string Index = "studentIndex";
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because this identifier is agreed to be on every page, you can add a property to your base page object to read it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public string PageId
{
    get
    {
        return Host.Browser.FindElement(By.Id("pageId")).Text;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then use that property to assert which page you are on in tests in a strongly typed manner. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void CanIdentifyPageWithHiddenIdentifier()
{
    var newStudentPage = Host.NavigateTo&amp;lt;StudentController, NewStudentPage&amp;gt;(x =&amp;gt; x.Create());
    newStudentPage.PageId.Should().Be(LocalSiteMap.Pages.Student.Create);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, any changes to the constant value in the static class are reflected in both the application and the tests without breaking the tests.&lt;/p&gt;
</content></entry><entry><id>http://www.michael-whelan.net/sql-server-localdb-2014-connection-string/</id><title type="text">SQL Server LocalDB 2014 Connection String</title><summary type="html">&lt;p&gt;I spent way too much time today trying to figure out why I could not connect to my newly installed SQL Server LocalDB 2014 instance. I assumed that I could just update my connection string from &lt;code&gt;v11.0&lt;/code&gt; to &lt;code&gt;v12.0&lt;/code&gt; but it seems that Microsoft have changed the naming scheme for this version. Now the automatic instance is named &lt;code&gt;MSSQLLocalDB&lt;/code&gt;.&lt;/p&gt;

</summary><published>2014-11-23T00:00:00Z</published><updated>2014-11-23T00:00:00Z</updated><link rel="alternate" href="http://www.michael-whelan.net/sql-server-localdb-2014-connection-string/" /><content type="html">&lt;p&gt;I spent way too much time today trying to figure out why I could not connect to my newly installed SQL Server LocalDB 2014 instance. I assumed that I could just update my connection string from &lt;code&gt;v11.0&lt;/code&gt; to &lt;code&gt;v12.0&lt;/code&gt; but it seems that Microsoft have changed the naming scheme for this version. Now the automatic instance is named &lt;code&gt;MSSQLLocalDB&lt;/code&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;So, for SQL Server 2012 LocalDB, I had this connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;connectionStrings&amp;gt;
    &amp;lt;add name="SchoolContext" 
        connectionString="Data Source=(LocalDB)\v11.0;AttachDbFilename=|DataDirectory|\ContosoUniversityDB.mdf;Integrated Security=True;" 
        providerName="System.Data.SqlClient" /&amp;gt;
&amp;lt;/connectionStrings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For SQL Server 2014 LocalDB the connection string should be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;connectionStrings&amp;gt;
    &amp;lt;add name="SchoolContext" 
        connectionString="Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\ContosoUniversityDB.mdf;Integrated Security=True;" 
        providerName="System.Data.SqlClient" /&amp;gt;
&amp;lt;/connectionStrings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;According to &lt;a href="https://connect.microsoft.com/SQLServer/feedback/details/845278/sql-server-2014-express-localdb-does-not-create-automatic-instance-v12-0"&gt;Microsoft&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In SQL14, we moved away from the numbering/versioning for the automatic instance and named it "MSSQLLocalDB" instead of "v12.0".&lt;/p&gt;
&lt;/blockquote&gt;
</content></entry><entry><id>http://www.michael-whelan.net/bddfy-chilled/</id><title type="text">BDDfy Chilled</title><summary type="html">&lt;p&gt;I like to use BDDfy for unit testing as well as for black-box testing. Unit tests do not have the concept of user stories, but otherwise I like to use the same &lt;code&gt;Given When Then&lt;/code&gt; style of testing for all of my tests, and I think that I should have the same quality of reporting for my unit tests as for my acceptance tests. I have my own framework of code that I've built on top of BDDFy that I take from project to project. It gets a little tweaked each time, from NUnit to xUnit, or Moq to NSubstitute, or Castle Windsor to Autofac, depending on the tools each project uses. BDDfy is wonderfully customisable so you are free to make your test framework just they way you want it.&lt;/p&gt;

&lt;p&gt;I decided it would make sense to make the mocking/Ioc containers pluggable and publish the library to NuGet. I'm a big fan of Autofac and NSubstitute, and had noticed that Autofac provides automocking container implementations for most of the major mocking frameworks. Then I stumbled on &lt;a href="https://github.com/erwinvandervalk/chill"&gt;Chill&lt;/a&gt;, and found out that &lt;a href="https://twitter.com/ErwinVanDerValk"&gt;Erwin van der Valk&lt;/a&gt; was already doing something pretty similar and had done a great job with pluggable mocking containers, with future plans for IoC containers too. Chill is a BDD style testing framework.   &lt;/p&gt;

</summary><published>2014-10-31T00:00:00Z</published><updated>2014-10-31T00:00:00Z</updated><link rel="alternate" href="http://www.michael-whelan.net/bddfy-chilled/" /><content type="html">&lt;p&gt;I like to use BDDfy for unit testing as well as for black-box testing. Unit tests do not have the concept of user stories, but otherwise I like to use the same &lt;code&gt;Given When Then&lt;/code&gt; style of testing for all of my tests, and I think that I should have the same quality of reporting for my unit tests as for my acceptance tests. I have my own framework of code that I've built on top of BDDFy that I take from project to project. It gets a little tweaked each time, from NUnit to xUnit, or Moq to NSubstitute, or Castle Windsor to Autofac, depending on the tools each project uses. BDDfy is wonderfully customisable so you are free to make your test framework just they way you want it.&lt;/p&gt;

&lt;p&gt;I decided it would make sense to make the mocking/Ioc containers pluggable and publish the library to NuGet. I'm a big fan of Autofac and NSubstitute, and had noticed that Autofac provides automocking container implementations for most of the major mocking frameworks. Then I stumbled on &lt;a href="https://github.com/erwinvandervalk/chill"&gt;Chill&lt;/a&gt;, and found out that &lt;a href="https://twitter.com/ErwinVanDerValk"&gt;Erwin van der Valk&lt;/a&gt; was already doing something pretty similar and had done a great job with pluggable mocking containers, with future plans for IoC containers too. Chill is a BDD style testing framework.   &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you stick it in a container, Chill will keep it cool.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, I messed around with combining BDDfy with Chill and thought the initial findings were worth sharing. I think this investigation will more than likely be superceded by Chill, as Erwin mentioned he is interested in the possibility of combining BDDfy with Chill. As usual, you can get the code on &lt;a href="https://github.com/mwhelan/BDDfyChilled"&gt;GitHub&lt;/a&gt;.  &lt;/p&gt;

&lt;h2&gt;Specification For&lt;/h2&gt;

&lt;p&gt;Chill uses the same &lt;a href="http://xunitpatterns.com/Testcase%20Class%20per%20Fixture.html"&gt;testcase class per fixture&lt;/a&gt; , inheritance-based, style that I favour, so the first step was just to inherit from the &lt;code&gt;Subject&lt;/code&gt; base classes. I need to add a method with the test framework attribute, [Test] for NUnit and [Fact] for xUnit, and call out to BDDFy to run the test. Thankfully, this is the only time I need to do that and all of my test implementation classes do not need any attributes. I would put each of these namespaces in its own library per test framework - I've not managed to find a way around that yet - but I've just combined them here for illustrative purposes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace BDDfyChilled.xUnit
{
    public abstract class SpecificationFor&amp;lt;TSubject&amp;gt; : GivenSubject&amp;lt;TSubject&amp;gt; where TSubject : class
    {
        [Fact]
        public void Run()
        {
            this.BDDfy();
        }
    }

    public abstract class SpecificationFor&amp;lt;TSubject, TResult&amp;gt; : GivenSubject&amp;lt;TSubject, TResult&amp;gt; where TSubject : class
    {
        [Fact]
        public void Run()
        {
            this.BDDfy();
        }
    }
}
namespace BDDfyChilled.NUnit
{
    public abstract class SpecificationFor&amp;lt;TSubject&amp;gt; : GivenSubject&amp;lt;TSubject&amp;gt; where TSubject : class
    {
        [Test]
        public void Run()
        {
            this.BDDfy();
        }
    }
    public abstract class SpecificationFor&amp;lt;TSubject, TResult&amp;gt; : GivenSubject&amp;lt;TSubject, TResult&amp;gt; where TSubject : class
    {
        [Test]
        public void Run()
        {
            this.BDDfy();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can create my test implementation class, combining the best of both worlds of BDDfy and Chill. BDDfy uses reflection to discover and run all of the test methods, and Chill provides all sorts of infrastructure to manage the Subject (or System Under Test), its dependencies, and other test data. Chill is handling the setup (the Givens), the execution (When). &lt;a href="http://www.fluentassertions.com/"&gt;Fluent Assertions&lt;/a&gt; rounds out the combination by handling the assertions (Thens) for a nice, terse specification. Awesome stuff!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ChillTestInitializer(typeof(DefaultChillTestInitializer&amp;lt;AutofacNSubstituteChillContainer&amp;gt;))]
public class RetrievingExistingCustomerAsynchronously : SpecificationFor&amp;lt;CustomerController, View&amp;gt;
{
    const int customerId = 12;

    public void Given_an_existing_customer()
    {
        Given(() =&amp;gt;
        {
            The&amp;lt;Customer&amp;gt;()
                .With(x =&amp;gt; x.Id = customerId);

            The&amp;lt;ICustomerStore&amp;gt;()
                .GetCustomerAsync(customerId)
                .Returns(The&amp;lt;Customer&amp;gt;().Asynchronously());
        });
    }

    public void When_retrieving_the_customer_asynchronously()
    {

        When(() =&amp;gt; Subject.GetAsync(customerId));
    }

    public void Then_view_is_returned()
    {
        Result.Should().NotBeNull();
    }

    public void AndThen_model_is_the_existing_custmoer()
    {
        Result.Model.Should().Be(The&amp;lt;Customer&amp;gt;());
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Custom BDDfy Method Name Step Scanner&lt;/h2&gt;

&lt;p&gt;Understandably, because Chill and BDDfy are both BDD frameworks, they both use the Given When Then syntax. When I run the test right now I get this error. BDDfy is calling the &lt;code&gt;Given&lt;/code&gt;, &lt;code&gt;When&lt;/code&gt;, and &lt;code&gt;TheNamed&lt;/code&gt; methods on the Chill base class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Specifications For: CustomerController

Scenario: Retrieving existing customer asynchronously
    Given an existing customer                        [Passed] 
    Given                                             [Failed] [Parameter count mismatch.] [Details at 1 below]
    When retrieving the customer asynchronously       [Not executed] 
    When                                              [Not executed] 
    When                                              [Not executed] 
    Then view is returned                             [Not executed] 
    The named                                         [Not executed] 
      And model is the existing custmoer              [Not executed] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We don't want BDDfy to run the Chill methods that conform to its Given When Then pattern. Fortunately, BDDfy allows you to replace the reflection method name step scanner. Here are the key changes - telling BDDfy to ignore the Chill methods named &lt;code&gt;Given&lt;/code&gt;, &lt;code&gt;When&lt;/code&gt; and &lt;code&gt;TheNamed&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AddMatcher(new MethodNameMatcher(s =&amp;gt; s.StartsWith("Given", StringComparison.OrdinalIgnoreCase) 
    &amp;amp;&amp;amp; s != "Given", ExecutionOrder.SetupState));
AddMatcher(new MethodNameMatcher(s =&amp;gt; s.StartsWith("When", StringComparison.OrdinalIgnoreCase) 
    &amp;amp;&amp;amp; s != "When", ExecutionOrder.Transition));
AddMatcher(new MethodNameMatcher(s =&amp;gt; s.StartsWith("Then", StringComparison.OrdinalIgnoreCase) 
    &amp;amp;&amp;amp; s != "TheNamed", ExecutionOrder.Assertion) { Asserts = true });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then tell BDDfy to use the new scanner:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configurator.Scanners.DefaultMethodNameStepScanner.Disable();
Configurator.Scanners.Add(() =&amp;gt; new ChillMethodNameStepScanner());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite simple really, and now BDDfy and Chill play nicely together.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-chilled-report.png" alt="BDDfy report" /&gt;&lt;/p&gt;

&lt;h2&gt;Custom Report&lt;/h2&gt;

&lt;p&gt;Because these are just unit tests, and don't have user stories, I've created a custom metadata scanner to display &lt;code&gt;Specifications For: [Subject]&lt;/code&gt; (in this case the Subject is the CustomerController), which just uses reflection to grab the name of the Subject type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ChillStoryMetadataScanner : IStoryMetadataScanner
{
    public virtual StoryMetadata Scan(object testObject, Type explicityStoryType = null)
    {
        string specificationTitle = GetSubject(testObject);
        var story = new StoryAttribute() { Title = specificationTitle, TitlePrefix = "Specifications For: " };
        return new StoryMetadata(testObject.GetType(), story);
    }

    private string GetSubject(object testObject)
    {
        return testObject
            .GetType()
            .GetProperty("Subject", BindingFlags.Instance | BindingFlags.NonPublic)
            .PropertyType
            .Name;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I've also created a report configuration to change the header:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ChillBDDfyReportConfig : DefaultHtmlReportConfiguration
{
    public override string ReportHeader { get { return "BDDfy Chilled!"; }}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And plugged them both in using the BDDfy Configurator before any of the tests run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[SetUpFixture]
public class Host
{
    [SetUp]
    public void SetUp()
    {
        Configurator.Scanners.DefaultMethodNameStepScanner.Disable();
        Configurator.Scanners.Add(() =&amp;gt; new ChillMethodNameStepScanner());

        Configurator.Scanners.StoryMetadataScanner = () =&amp;gt; new ChillStoryMetadataScanner();

        Configurator.BatchProcessors.HtmlReport.Disable();
        Configurator.BatchProcessors.Add(new HtmlReporter(new ChillBDDfyReportConfig()));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I think BDDfy and Chill are a great combination and I'm looking forward to keeping an eye on the new features that Eriwn is adding to Chill to see more ways that I might be able to use them together. &lt;/p&gt;

&lt;p&gt;You can read more about Chill on Erwin's &lt;a href="http://www.erwinvandervalk.net/2014/10/introducing-chill-bdd-style-testing.html"&gt;blog&lt;/a&gt;. And, of course, you can learn more about &lt;a href="http://teststack.net/"&gt;TestStack&lt;/a&gt; and our &lt;a href="https://github.com/TestStack/TestStack.BDDfy"&gt;BDDfy&lt;/a&gt; framework. Finally, you can learn all about Fluent Assertions &lt;a href="http://www.fluentassertions.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><id>http://www.michael-whelan.net/testing-mvc-configuring-application-under-test/</id><title type="text">Black-Box Testing ASP.Net: Configuring Application Under Test</title><summary type="html">&lt;p&gt;As I mentioned in the &lt;a href="http://www.michael-whelan.net/testing-mvc-application-with-iis-express-webdriver/"&gt;previous post&lt;/a&gt;, UI tests for an ASP.Net MVC application are &lt;a href="http://en.wikipedia.org/wiki/Black-box_testing"&gt;black-box tests&lt;/a&gt; and run in a separate process from the web application, making it more difficult to control its behaviour and configuration. In this post I will continue the example from the previous post and provide some code examples of configuring an ASP.Net application at runtime to run with behaviour specified by the test code. You can see all the code from these posts on &lt;a href="https://github.com/mwhelan/MvcTestingSamples"&gt;GitHub&lt;/a&gt;. &lt;/p&gt;

</summary><published>2014-10-30T00:00:00Z</published><updated>2014-10-30T00:00:00Z</updated><link rel="alternate" href="http://www.michael-whelan.net/testing-mvc-configuring-application-under-test/" /><content type="html">&lt;p&gt;As I mentioned in the &lt;a href="http://www.michael-whelan.net/testing-mvc-application-with-iis-express-webdriver/"&gt;previous post&lt;/a&gt;, UI tests for an ASP.Net MVC application are &lt;a href="http://en.wikipedia.org/wiki/Black-box_testing"&gt;black-box tests&lt;/a&gt; and run in a separate process from the web application, making it more difficult to control its behaviour and configuration. In this post I will continue the example from the previous post and provide some code examples of configuring an ASP.Net application at runtime to run with behaviour specified by the test code. You can see all the code from these posts on &lt;a href="https://github.com/mwhelan/MvcTestingSamples"&gt;GitHub&lt;/a&gt;. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some of the sample code is taken straight from &lt;a href="https://github.com/TestStack/TestStack.Seleno"&gt;Seleno&lt;/a&gt;, the Selenium WebDriver browser automation framework from &lt;a href="http://teststack.net/"&gt;TestStack&lt;/a&gt;, and gives you a look under the hood at the sorts of things a UI automation framework does for you. If some of these samples are relevant to the problems you are trying to solve, I encourage you to check out Seleno. It takes care of a lot of the complex infrastructure setup of a Selenium WebDriver project for you, allowing you to get on with the important business of writing specifications for your application. I've produced a working sample on &lt;a href="https://github.com/mwhelan/MvcTestingSamples"&gt;GitHub&lt;/a&gt;, so you should be able to take it, run it, and use some of the code in your own applications if you want to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For more of the conceptual information on this topic, Mehdi Khalili has a great post on &lt;a href="http://www.mehdi-khalili.com/changing-runtime-behavior-of-application-under-test"&gt;changing the runtime behaviour of the application under test&lt;/a&gt; on his blog.&lt;/p&gt;

&lt;h2&gt;Environment Variables&lt;/h2&gt;

&lt;p&gt;When you create a process to host your ASP.Net web application, you are able to pass in environment variables as key/value pairs. Your application code can then check for these variables and choose different configuration behaviour depending on the value of the variable. Mehdi sums up the benefits of this approach quite nicely:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The beauty of this approach is that the injected environment variables are scoped and isolated to the process you run which means they won't impact other applications running on the same machine and they are forgotten as soon as the process exits. Also you can dynamically set them at runtime for each test run.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the previous post, I did not show the code for the &lt;code&gt;WebApplication&lt;/code&gt; class. This class just captures the configuration information that is passed to the &lt;code&gt;IisExpressWebServer&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class WebApplication
{
    public Dictionary&amp;lt;string, string&amp;gt; EnvironmentVariables { get; set; }

    public void AddEnvironmentVariable(string key, string value = null)
    {
        EnvironmentVariables.Add(key, value ?? string.Empty);
    }

    // other code removed for brevity
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, we can modify our setup code to add an environment variable with the key of &lt;code&gt;FunctionalTests&lt;/code&gt;. Note, it is not necessary to provide a &lt;code&gt;value&lt;/code&gt; for the key/value pair.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[SetUp]
public void SetUp()
{
    var app = new WebApplication(ProjectLocation.FromFolder("ContosoUniversity"), 12365);
    app.AddEnvironmentVariable("FunctionalTests");
    WebServer = new IisExpressWebServer(app);
    WebServer.Start();
    Browser = Browsers.Phantom;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Configuring the database connection string at runtime&lt;/h3&gt;

&lt;p&gt;In the Contoso University sample that I'm using for these posts, the &lt;code&gt;SchoolContext&lt;/code&gt; gets its connection string in a standard way from the web.config, using a &lt;code&gt;ConnectionStrings&lt;/code&gt; key with the same name - "SchoolContext." With a minimal tweak, it can check the &lt;code&gt;FunctionalTests&lt;/code&gt; environment variable, and switch to a "SchoolContext-FunctionalTests" connection string when it finds it present - which will only be when we pass it in from the functional tests code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class SchoolContext : DbContext
{
    public SchoolContext():base(GetConnectionString())
    {
    }

    private static string GetConnectionString()
    {
        var environmentVariable = Environment.GetEnvironmentVariable("FunctionalTests");
        return environmentVariable == null 
            ? ConfigurationManager.ConnectionStrings["SchoolContext"].ConnectionString 
            : ConfigurationManager.ConnectionStrings["SchoolContext-FunctionalTests"].ConnectionString;
    }

    // code omitted for brevity
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Verifying that the behaviour has been changed&lt;/h3&gt;

&lt;p&gt;You want to be really sure that the application is using the modified configuration in your tests. The first thing that you can do is just set a breakpoint in the GetConnectionString method, attach to the application process (as I illustrated in the &lt;a href="http://www.michael-whelan.net/testing-mvc-application-with-iis-express-webdriver/"&gt;previous post&lt;/a&gt;) and step through the code to see which connection string is being used.&lt;/p&gt;

&lt;p&gt;Here is another approach. Obviously, this is test code and not something you would want to keep in production code. Just add a controller action to the web application, somewhere out of the way...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public ActionResult TestingEnvVariable()
{
    var envVar = Environment.GetEnvironmentVariable("FunctionalTests");
    if (envVar == null)
        throw new Exception("Environment Variable was not injected!!");
    return RedirectToAction("Index");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then write a test that navigates to the page. If you are redirected to the home page without the exception being thrown then the environment variable has been set.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void CanInjectEnvironmentVariables()
{
    string url = string.Format("{0}/Home/TestingEnvVariable", Host.WebServer.BaseUrl);
    Host.Browser.Navigate().GoToUrl(url);
    Host.Browser.Title.Should().Be("Home Page - Contoso University");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Configuration Transforms&lt;/h2&gt;

&lt;p&gt;The standard way to change configuration per environment in .Net is to use config transformation files. There are plenty of articles that show how to set this up in the web application, but configuring the test project to take advantage of this is not so well documented. Up until now, we have just pointed IIS Express at the web application folder. To apply web.config transforms we need to deploy the web application to a new folder with the specified transform applied, and point IIS Express to this folder instead. &lt;/p&gt;

&lt;p&gt;You can do this by calling msbuild, which will deploy to the specified local folder with the specified transform applied. That is the approach I will demonstrate here. In my experience, this approach can sometimes be a bit brittle , with msbuild sometimes acting differently on different machines or with different versions. An alternative to consider might be to perform the config transform yourself and use xcopy deploy to a separate folder . Microsoft have released the &lt;a href="https://www.nuget.org/packages/Microsoft.Web.Xdt/"&gt;XDT library on NuGet&lt;/a&gt; for this purpose, though I've not had a chance to try this approach out myself yet.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MsBuildDeployer
{
    private readonly IProjectLocation _projectLocation;

    public MsBuildDeployer(IProjectLocation projectLocation)
    {
        _projectLocation = projectLocation;
    }

    public void Deploy(string configTransformName, string deployPath)
    {
        var loggers = new ILogger[] { new ConsoleLogger(LoggerVerbosity.Normal) };
        var parameters = new BuildParameters { Loggers = loggers };

        var globalProperties = new Dictionary&amp;lt;string, string&amp;gt;
        {
            { "Configuration", configTransformName },
            { "_PackageTempDir", deployPath }
        };

        var requestData = new BuildRequestData(_projectLocation.ProjectName, globalProperties, null, 
            new[] { "Clean", "Package" }, null);

        var result = BuildManager.DefaultBuildManager.Build(parameters, requestData);

        if (result.OverallResult != BuildResultCode.Success || !Directory.Exists(deployPath))
        {
            throw new Exception("Build failed.");
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The deploy method takes in the config transform name, such as &lt;code&gt;Debug&lt;/code&gt;, &lt;code&gt;Release&lt;/code&gt;, or &lt;code&gt;Test&lt;/code&gt;, and the path to the local folder to deploy the transformed application to. This is the path that IIS Express will use to host the application.&lt;/p&gt;

&lt;p&gt;I've tried to make minimal changes to the IisExpressWebServer code so as to demonstrate both approaches. If a config transform value is passed in then the code is transformed and deployed to the specified deployment folder. If not, then it runs as before with the web application folder. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Start(string configTransform = null)
{
    ProcessStartInfo webHostStartInfo;
    if (configTransform == null)
    {
        webHostStartInfo = InitializeIisExpress(_application);
    }
    else
    {
        var siteDeployer = new MsBuildDeployer(_application.Location);
        var deployPath = Path.Combine(Environment.CurrentDirectory, "TestSite");
        siteDeployer.Deploy(configTransform, deployPath);
        webHostStartInfo = InitializeIisExpress(_application, deployPath);
    }
    _webHostProcess = Process.Start(webHostStartInfo);
    _webHostProcess.TieLifecycleToParentProcess();
}
&lt;/code&gt;&lt;/pre&gt;
</content></entry><entry><id>http://www.michael-whelan.net/testing-mvc-application-with-iis-express-webdriver/</id><title type="text">Black-Box Testing ASP.Net: IIS Express and Selenium WebDriver</title><summary type="html">&lt;p&gt;In the next couple of posts I am going to look at some of the practical aspects of performing black-box testing of ASP.Net web applications with Selenium WebDriver. Most types of Visual Studio tests conveniently run in the same process as the code they are testing - the System Under Test (SUT). These are &lt;a href="http://en.wikipedia.org/wiki/White-box_testing"&gt;white-box tests&lt;/a&gt;, making it straightforward to change the behaviour and configuration of the SUT. &lt;a href="http://en.wikipedia.org/wiki/Black-box_testing"&gt;Black-box tests&lt;/a&gt;, such as UI tests, run in a separate process from the SUT, creating additional complexities for controlling its behaviour and configuration. In these posts, I'm going to focus less on concepts and more on the code.  &lt;/p&gt;

</summary><published>2014-10-27T00:00:00Z</published><updated>2014-10-27T00:00:00Z</updated><link rel="alternate" href="http://www.michael-whelan.net/testing-mvc-application-with-iis-express-webdriver/" /><content type="html">&lt;p&gt;In the next couple of posts I am going to look at some of the practical aspects of performing black-box testing of ASP.Net web applications with Selenium WebDriver. Most types of Visual Studio tests conveniently run in the same process as the code they are testing - the System Under Test (SUT). These are &lt;a href="http://en.wikipedia.org/wiki/White-box_testing"&gt;white-box tests&lt;/a&gt;, making it straightforward to change the behaviour and configuration of the SUT. &lt;a href="http://en.wikipedia.org/wiki/Black-box_testing"&gt;Black-box tests&lt;/a&gt;, such as UI tests, run in a separate process from the SUT, creating additional complexities for controlling its behaviour and configuration. In these posts, I'm going to focus less on concepts and more on the code.  &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some of the sample code is taken straight from &lt;a href="https://github.com/TestStack/TestStack.Seleno"&gt;Seleno&lt;/a&gt;, the Selenium WebDriver browser automation framework from &lt;a href="http://teststack.net/"&gt;TestStack&lt;/a&gt;, and gives you a look under the hood at the sorts of things a UI automation framework does for you. If some of these samples are relevant to the problems you are trying to solve, I encourage you to check out Seleno. It takes care of a lot of the complex infrastructure setup of a Selenium WebDriver project for you, allowing you to get on with the important business of writing specifications for your application. I've produced a working sample on &lt;a href="https://github.com/mwhelan/MvcTestingSamples"&gt;GitHub&lt;/a&gt;, so you should be able to take it, run it, and use some of the code in your own applications if you want to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Managing the AppDomain&lt;/h2&gt;

&lt;p&gt;One thing I try to avoid with UI tests is creating a new WebDriver instance for every test or test fixture. This is a time consuming operation and I find it is best to perform slow, expensive operations once before any tests run, then clean up after all of the tests have run. NUnit, which I'm using in these examples, provides the SetUpFixture for this purpose. (You can achieve the same effect in xUnit, and other frameworks that don't provide this feature, by using a static constructor in a base class, and subscribing to the AppDomain DomainUnload event).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[SetUpFixture]
public class Host
{
    public static IisExpressWebServer WebServer;
    public static IWebDriver Browser;

    [SetUp]
    public void SetUp()
    {
        var app = new WebApplication(ProjectLocation.FromFolder("ContosoUniversity"), 12365);
        WebServer = new IisExpressWebServer(app);
        WebServer.Start();

        Browser = new FirefoxDriver();
    }

    [TearDown]
    public void TearDown()
    {
        Browser.Quit();
        WebServer.Stop();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Hosting your application in IIS Express&lt;/h2&gt;

&lt;p&gt;To host an MVC application in IIS Express, you need to create a new Process for IIS Express, passing in the path to the folder that stores the web application project file (&lt;code&gt;.csproj&lt;/code&gt; or &lt;code&gt;.vbproj&lt;/code&gt; file) and the port number as arguments. This class wraps the creation of the IIS Express process and provides methods to start and stop the process.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class IisExpressWebServer 
{
    private static WebApplication _application;
    private static Process _webHostProcess;

    public IisExpressWebServer(WebApplication application)
    {
        if (application == null)
            throw new ArgumentNullException("The web application must be set.");
        _application = application;
    }

    public void Start()
    {
        var webHostStartInfo = InitializeIisExpress(_application);
        _webHostProcess = Process.Start(webHostStartInfo);
        _webHostProcess.TieLifecycleToParentProcess();
    }

    public void Stop()
    {
        if (_webHostProcess == null)
            return;
        if (!_webHostProcess.HasExited)
            _webHostProcess.Kill();
        _webHostProcess.Dispose();
    }

    public string BaseUrl
    {
        get { return string.Format("http://localhost:{0}", _application.PortNumber); }
    }

    private static ProcessStartInfo InitializeIisExpress(WebApplication application)
    {
        // todo: grab stdout and/or stderr for logging purposes?
        var key = Environment.Is64BitOperatingSystem ? "programfiles(x86)" : "programfiles";
        var programfiles = Environment.GetEnvironmentVariable(key);

        var startInfo = new ProcessStartInfo
        {
            WindowStyle = ProcessWindowStyle.Normal,
            ErrorDialog = true,
            LoadUserProfile = true,
            CreateNoWindow = false,
            UseShellExecute = false,
            Arguments = String.Format("/path:\"{0}\" /port:{1}", application.Location.FullPath, application.PortNumber),
            FileName = string.Format("{0}\\IIS Express\\iisexpress.exe", programfiles)
        };

        foreach (var variable in application.EnvironmentVariables)
            startInfo.EnvironmentVariables.Add(variable.Key, variable.Value);

        return startInfo;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the Start() method is called, a command window pops up showing the application running in IIS Express at the specified port number:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/testing-mvc-iis-express-window.png" alt="IIS Express window" /&gt;&lt;/p&gt;

&lt;h2&gt;Debugging the IIS Process&lt;/h2&gt;

&lt;p&gt;If you set a breakpoint in your web application, and try to step into it from your test code, then you are going to be disappointed! Thankfully, it is quite simple to attach the debugger to the IIS Express process. Place a breakpoint in your test code after IIS Express has been spun up, then from the Visual Studio menu select&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Debug &amp;gt; Attach to Process
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/testing-mvc-attach-debugger.png" alt="Attach to debugger" /&gt;&lt;/p&gt;

&lt;p&gt;Scroll through the list of processes until you see &lt;code&gt;iisexpress.exe&lt;/code&gt;. Note that the title is &lt;code&gt;IISExpress -&lt;/code&gt;. This is the same as the title in the command window shown above. Select this process, and click &lt;code&gt;Attach&lt;/code&gt;. Now  you can step through all of the code in your web application from your tests.&lt;/p&gt;

&lt;p&gt;This is a slightly painful manual process. If you find this suitably irritating, it seems it is possible to &lt;a href="http://stackoverflow.com/questions/19658269/visual-studio-attach-to-managed-process-programatically"&gt;automate it&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Closing Orphan Processes&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/testing-mvc-stop-debugging.png" alt="stopping debugger" /&gt;&lt;/p&gt;

&lt;p&gt;One thing that is very annoying about WebDriver testing is that when you stop debugging manually, or your test run crashes on the build server, the nice graceful shut down that you programmed in the AppDomain unload event does not fire. This leaves all of the child processes created during the test run - the browser, the various browser driver server windows, and the IIS process window -  open, and you have to manually close each one yourself. Not only that, but if you don't notice to shut them down and start another test run, then you get unpredictable results and have to stop that one too. &lt;/p&gt;

&lt;p&gt;Fortunately, there is an easy solution. My friend and colleague, Jonathan Holford, found some wonderful code on stackoverflow that magically closes all of these orphan processes for you. Thankfully, he has packaged it up into a NuGet package, called &lt;a href="https://www.nuget.org/packages/AllForOne"&gt;AllForOne&lt;/a&gt;. According to the GitHub project page:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;AllForOne uses Job Object voodoo to ensure a set of processes are managed as a unit. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To use AllForOne, just call the &lt;code&gt;TieLifecycleToParentProcess&lt;/code&gt; extension method on the child process. You can see this demonstrated in the &lt;code&gt;Start&lt;/code&gt; method of the &lt;code&gt;IisExpressWebServer&lt;/code&gt; above.&lt;/p&gt;

&lt;p&gt;Most of the WebDriver browser drivers have a server implementation. Whilst you don't have direct control over the processes they start, you can still grab the process by its name and use the &lt;code&gt;TieLifecycleToParentProcess&lt;/code&gt; method in the same way, and have the process closed down however the tests are stopped. Don't quote me on this, but I've found that the process name is the name of the executable without the extension.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class Browsers
{
    private static RemoteWebDriver _phantom;
    public static RemoteWebDriver Phantom
    {
        get
        {
            if (_phantom == null)
            {
                _phantom = new PhantomJSDriver();
                var process = Process.GetProcessesByName("phantomjs").FirstOrDefault();
                process.TieLifecycleToParentProcess();
            }
            return _phantom;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Finding the Project file&lt;/h2&gt;

&lt;p&gt;This helper class encapsulates finding the path to the web project folder. It searches up from the current directory to find the .sln file, then searches all the directories below that to find the specified web project folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ProjectLocation : IProjectLocation
{
    public string FullPath { get; private set; }

    private ProjectLocation(string fullPath)
    {
        var folder = new DirectoryInfo(fullPath);
        if (!folder.Exists)
        {
            throw new DirectoryNotFoundException();
        }
        FullPath = fullPath;
    }

    public static ProjectLocation FromPath(string webProjectFullPath)
    {
        return new ProjectLocation(webProjectFullPath);
    }

    public static ProjectLocation FromFolder(string webProjectFolderName)
    {
        string solutionFolder = GetSolutionFolderPath();
        string projectPath = FindSubFolderPath(solutionFolder, webProjectFolderName);
        return new ProjectLocation(projectPath);
    }

    private static string GetSolutionFolderPath()
    {
        var directory = new DirectoryInfo(Environment.CurrentDirectory);

        while (directory.GetFiles("*.sln").Length == 0)
        {
            directory = directory.Parent;
        }
        return directory.FullName;
    }

    private static string FindSubFolderPath(string rootFolderPath, string folderName)
    {
        var directory = new DirectoryInfo(rootFolderPath);

        directory = (directory.GetDirectories("*", SearchOption.AllDirectories)
            .Where(folder =&amp;gt; folder.Name.ToLower() == folderName.ToLower()))
            .FirstOrDefault();

        if (directory == null)
        {
            throw new DirectoryNotFoundException();
        }

        return directory.FullName;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</content></entry><entry><id>http://www.michael-whelan.net/testing-date-time/</id><title type="text">Testing DateTime</title><summary type="html">&lt;p&gt;Static methods and properties tend to be difficult to test. You cannot easily mock them, unless you use something like Microsoft Moles. DateTime.Now is a notorious example of a difficult to test static. &lt;/p&gt;

</summary><published>2014-10-19T23:00:00Z</published><updated>2014-10-19T23:00:00Z</updated><link rel="alternate" href="http://www.michael-whelan.net/testing-date-time/" /><content type="html">&lt;p&gt;Static methods and properties tend to be difficult to test. You cannot easily mock them, unless you use something like Microsoft Moles. DateTime.Now is a notorious example of a difficult to test static. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;The offending piece of code that inspired me to write this post was a method I was adding to Seleno today. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void TakeScreenshotAndThrow(string imageName, string errorMessage)
{
    Camera.TakeScreenshot(string.Format(imageName + DateTime.Now().ToString("yyyy-MM-dd_HH-mm-ss") + ".png"));
    throw new SelenoException(errorMessage);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;DateTime Abstraction&lt;/h2&gt;

&lt;p&gt;Often  this problem can be solved by abstracting the static away behind an interface and then using dependency injection to inject the implementation of the interface. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface ISystemTime
{
    DateTime Now { get; }
}

public class TheSystemTime : ISystemTime
{
    public DateTime Now { get { return DateTime.Now; } }
}

public class SelenoApplication
{
    private ISystemTime _systemTime;
    public SelenoApplication(ISystemTime systemTime)
    {
        _systemTime = systemTime;
    }

    public void TakeScreenshotAndThrow(string imageName, string errorMessage)
    {
        Camera.TakeScreenshot(string.Format(imageName + _systemTime.Now.ToString("yyyy-MM-dd_HH-mm-ss") + ".png"));
        throw new SelenoException(errorMessage);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can easily mock the interface in your tests. I'm using NSubstitute here.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var dateTime = new DateTime(2014, 05, 11, 10, 29, 33);
var systemTime = Substitute.For&amp;lt;ISystemTime&amp;gt;();
systemTime.Now.Returns(dateTime);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the solution that I would normally use to test a static, but DateTime is a bit different. Firstly, the use of DateTime can be quite extensive and you can quickly find you have too many of these interfaces polluting your constructors. Secondly, if you are doing DDD then you don't want to use dependency injection with your domain entities, yet they often need DateTime functions as well. &lt;/p&gt;

&lt;h2&gt;SystemTime static class with function&lt;/h2&gt;

&lt;p&gt;The solution I like to use is one Ayende &lt;a href="http://ayende.com/blog/3408/dealing-with-time-in-tests"&gt;blogged about in 2008&lt;/a&gt; where you use a static class with a func as a replacement for the DateTime.Now call.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class SystemTime
{
    public static Func&amp;lt;DateTime&amp;gt; Now = () =&amp;gt; DateTime.Now;

    public static void Reset()
    {
        Now = () =&amp;gt; DateTime.Now;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, now you call &lt;code&gt;SystemTime.Now()&lt;/code&gt; instead of &lt;code&gt;DateTime.Now&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void TakeScreenshotAndThrow(string imageName, string errorMessage)
{
    Camera.TakeScreenshot(string.Format(imageName + SystemTime.Now().ToString("yyyy-MM-dd_HH-mm-ss") + ".png"));
    throw new SelenoException(errorMessage);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And set the value of Now in your test, not forgetting to reset it at the end of the test.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SystemTime.Now = () =&amp;gt; new DateTime(2014, 05, 11, 10, 29, 33);
Action result = () =&amp;gt; _host.Application.TakeScreenshotAndThrow(imageName, errorMessage);
result.ShouldThrow&amp;lt;SelenoException&amp;gt;()
    .WithMessage(errorMessage);
SystemTime.Reset();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;TestableSystemTime&lt;/h2&gt;

&lt;p&gt;One objection to this approach is that the developer might forget to reset the time at the end of the test. Which leads me to the point of this post. Utilising the dispose pattern is a nice way to get around this objection.&lt;/p&gt;

&lt;p&gt;I'm not sure where I saw this solution applied to testing DateTime, so apologies if I am not giving credit where it's due. I do remember where I learned about using the dispose pattern in this way - from my good friend Mehdi Khalili in the BDDfy codebase. He used it to &lt;a href="https://github.com/TestStack/TestStack.BDDfy/blob/master/TestStack.BDDfy/Reporters/Html/HtmlReportTag.cs"&gt;close HTML tags&lt;/a&gt; in the BDDfy HTML Report.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class TestableSystemTime : IDisposable
{
    public TestableSystemTime(DateTime dateTime)
    {
        SystemTime.Now = () =&amp;gt; dateTime;
    }

    public TestableSystemTime(Func&amp;lt;DateTime&amp;gt; dateTimeFactory)
    {
        SystemTime.Now = dateTimeFactory;
    }

    public void Dispose()
    {
        SystemTime.Reset();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can use it in a using statement in tests and be sure that the &lt;code&gt;Reset&lt;/code&gt; method gets called at the end of the using statement when &lt;code&gt;Dispose&lt;/code&gt; is called.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (new TestableSystemTime(dateTime))
{
    Action result = () =&amp;gt; _host.Application.TakeScreenshotAndThrow(imageName, errorMessage);
    result.ShouldThrow&amp;lt;SelenoException&amp;gt;()
        .WithMessage(errorMessage);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively you can create the date on the fly with the func constructor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (new TestableSystemTime(() =&amp;gt; new DateTime(2014, 05, 11, 10, 29, 33)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;What about BDD-style tests?&lt;/h2&gt;

&lt;p&gt;It's not always desirable to use a using statement. For example, if you are using a BDD-style, which I tend to do, then your statements are broken over multiple methods, and a using statement is not an option. In that case, you can just call the Dispose method at the end of the test yourself, as you can see in the TearDown method in this example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class When_taking_screenshot : SelenoApplicationSpecification
{
    private string _imageName = "screenshot";
    private string _errorMessage = "there was an error";
    private string _fileName;
    private Exception _result;
    private TestableSystemTime _systemTime

    public override void EstablishContext()
    {
        var dateTime = new DateTime(2014, 05, 11, 10, 29, 33);
        _fileName = string.Format(@"{0}{1}.png", _imageName, dateTime.ToString("yyyy-MM-dd_HH-mm-ss"));
        _systemTime = new TestableSystemTime(dateTime);
    }

    public void Given_initialised_application()
    {
        SUT.Initialize();
    }

    public void When_taking_screenshot_and_throwing()
    {
        _result = Catch.Exception(() =&amp;gt; SUT.TakeScreenshotAndThrow(_imageName, _errorMessage));
    }

    public void Then_should_take_screenshot()
    {
        SubstituteFor&amp;lt;ICamera&amp;gt;().Received().TakeScreenshot(_fileName);
    }

    public void AndThen_should_throw_SelenoException()
    {
        _result.Should().BeOfType&amp;lt;SelenoException&amp;gt;()
            .Which.Message.Should().Be(_errorMessage);
    }

    public override void TearDown()
    {
        _systemTime.Dispose();
    }
}
&lt;/code&gt;&lt;/pre&gt;
</content></entry><entry><id>http://www.michael-whelan.net/selenium-webdriver-and-ie11/</id><title type="text">Selenium WebDriver and IE11</title><summary type="html">&lt;p&gt;I was updating the browser WebDrivers for &lt;a href="https://github.com/TestStack/TestStack.Seleno"&gt;Seleno&lt;/a&gt; when I hit an issue with the InternetExplorerDriver. I was running Selenium WebDriver 2.43.1 on Windows 8.1 and using Internet Explorer 11. The test was just opening the google web page. Internet Explorer opened correctly and displayed the google page but then the test failed with the error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OpenQA.Selenium.NoSuchWindowException : Unable to get browser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It turns out this is an &lt;a href="https://code.google.com/p/selenium/issues/detail?id=6511"&gt;issue with Internet Explorer 11 rather than the InternetExplorerDriver&lt;/a&gt;. This causes the InternetExplorerDriver to lose the connection to the instance of Internet Explorer it created.&lt;/p&gt;

</summary><published>2014-10-17T23:00:00Z</published><updated>2014-10-17T23:00:00Z</updated><link rel="alternate" href="http://www.michael-whelan.net/selenium-webdriver-and-ie11/" /><content type="html">&lt;p&gt;I was updating the browser WebDrivers for &lt;a href="https://github.com/TestStack/TestStack.Seleno"&gt;Seleno&lt;/a&gt; when I hit an issue with the InternetExplorerDriver. I was running Selenium WebDriver 2.43.1 on Windows 8.1 and using Internet Explorer 11. The test was just opening the google web page. Internet Explorer opened correctly and displayed the google page but then the test failed with the error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OpenQA.Selenium.NoSuchWindowException : Unable to get browser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It turns out this is an &lt;a href="https://code.google.com/p/selenium/issues/detail?id=6511"&gt;issue with Internet Explorer 11 rather than the InternetExplorerDriver&lt;/a&gt;. This causes the InternetExplorerDriver to lose the connection to the instance of Internet Explorer it created.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;All security zones should be set to the same Protected Mode setting&lt;/h2&gt;

&lt;p&gt;I found that setting the Local Intranet zone's &lt;code&gt;Enable Protected Mode&lt;/code&gt; setting to true solved my problem for me.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Press the &lt;code&gt;Alt&lt;/code&gt; key to bring up the IE11 menu bar.  &lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Tools &amp;gt; Internet Options&lt;/code&gt; and go to the &lt;code&gt;Security&lt;/code&gt; tab.&lt;/li&gt;
&lt;li&gt;Select each zone (Internet, Local intranet, Trusted sites, Restricted sites) and check the &lt;code&gt;Enable Protected Mode&lt;/code&gt; check box.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Other Options&lt;/h2&gt;

&lt;p&gt;A number of people reported that adding the domain they were testing to the list of "Trusted Sites" solved this problem for them. You can also do this on the Security tab of Internet Options. &lt;/p&gt;

&lt;p&gt;The &lt;a href="https://code.google.com/p/selenium/wiki/InternetExplorerDriver"&gt;wiki page&lt;/a&gt; for the InternetExplorer also details a registry setting that you can apply to deal with this problem.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For IE 11 only, you will need to set a registry entry on the target computer so that the driver can maintain a connection to the instance of Internet Explorer it creates. For 32-bit Windows installations, the key you must examine in the registry editor is HKEY&lt;em&gt;LOCAL&lt;/em&gt;MACHINE\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE&lt;em&gt;BFCACHE. For 64-bit Windows installations, the key is HKEY&lt;/em&gt;LOCAL&lt;em&gt;MACHINE\SOFTWARE\Wow6432Node\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE&lt;/em&gt;BFCACHE. Please note that the FEATURE_BFCACHE subkey may or may not be present, and should be created if it is not present. Important: Inside this key, create a DWORD value named iexplore.exe with the value of 0.&lt;/p&gt;
&lt;/blockquote&gt;
</content></entry></feed>