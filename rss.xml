<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0"><channel><title>michael whelan</title><link>http://www.michael-whelan.net/rss.xml</link><description>michael whelan</description><item><guid isPermaLink="true">http://www.michael-whelan.net/creating-test-data-with-mockaroo/</guid><link>http://www.michael-whelan.net/creating-test-data-with-mockaroo/</link><author>mjmwdev@gmail.com</author><category>Automated Testing</category><category>Test Data</category><title>Creating Test Data with Mockaroo</title><description>&lt;p&gt;I'm currently working on a project that requires realistic test data. In the past, I've used tools such as RedGate's &lt;a href="http://www.red-gate.com/products/sql-development/sql-data-generator/"&gt;SQL Data Generator&lt;/a&gt; for this purpose, which is fantastic if you are looking for a commercial product. Recently, I came across &lt;a href="http://www.mockaroo.com/"&gt;Mockaroo&lt;/a&gt;, an online test data generator. It is currently free and lets you generate up to 100,000 rows of realistic test data in CSV, JSON, SQL, and Excel formats. If that's not enough data for you, there is also a &lt;a href="http://www.mockaroo.com/bde"&gt;Big Data Edition&lt;/a&gt; which lets you generate unlimited JSON and CSV data, leveraging multi-core cloud computing.&lt;/p&gt;

</description><pubDate>Wed, 24 Sep 2014 23:00:00 Z</pubDate><a10:updated>2014-09-24T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I'm currently working on a project that requires realistic test data. In the past, I've used tools such as RedGate's &lt;a href="http://www.red-gate.com/products/sql-development/sql-data-generator/"&gt;SQL Data Generator&lt;/a&gt; for this purpose, which is fantastic if you are looking for a commercial product. Recently, I came across &lt;a href="http://www.mockaroo.com/"&gt;Mockaroo&lt;/a&gt;, an online test data generator. It is currently free and lets you generate up to 100,000 rows of realistic test data in CSV, JSON, SQL, and Excel formats. If that's not enough data for you, there is also a &lt;a href="http://www.mockaroo.com/bde"&gt;Big Data Edition&lt;/a&gt; which lets you generate unlimited JSON and CSV data, leveraging multi-core cloud computing.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/mockaroo-logo.png" alt="Mockaroo.com" /&gt;&lt;/p&gt;

&lt;h2&gt;Mockaroo.com&lt;/h2&gt;

&lt;p&gt;The Mockaroo website provides an intuitive interface that makes it extremely easy to generate test data.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/mockaroo-new-schema.png" alt="Mockaroo new schema" /&gt;&lt;/p&gt;

&lt;p&gt;You simply enter a field name and select a data type. You can move fields up using the handle bars on the left, or delete fields using the cross on the right. Most field types are simple like this but some, like the URL shown above, allow you to specificy additional customisations. &lt;/p&gt;

&lt;p&gt;Here is a sample of the data that Mockaroo generates for this schema. Note that data is related across fields in the same row, so &lt;em&gt;Judy Barnes&lt;/em&gt; has an email address of &lt;em&gt;jbarnes@nymag.com&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
    {
        "Id": 1,
        "FullName": "Judy Barnes",
        "EmailAddress": "jbarnes0@nymag.com",
        "Password": "jGgItZC3",
        "City": "Calipatria",
        "CompanyName": "Twinder",
        "URL": "http://examiner.com/vulputate/vitae/nisl/aenean.jpg"
    },
    {
        "Id": 5,
        "FullName": "Peter Kelly",
        "EmailAddress": "pkelly4@mit.edu",
        "Password": "pZUymDXKIB",
        "City": "National City",
        "CompanyName": "Meembee",
        "URL": "https://biglobe.ne.jp/feugiat.html"
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The data types are the real power of Mockaroo. It supports 74 different types which provide a range of sample data which is used to populate the field. You can see the list of 74 types on the &lt;a href="http://www.mockaroo.com/api/docs"&gt;API docs page&lt;/a&gt;. When you select the data type in the schema editor you are presented with a great dialog which makes it easy to filter and choose the appropriate data type.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/mockaroo-choose-a-type.png" alt="Choose a type" /&gt;&lt;/p&gt;

&lt;p&gt;In keeping with the overall theme of simplicity, Mockaroo makes creating an account about as simple as I've seen it. Just click on the &lt;code&gt;Sign in with&lt;/code&gt; Google or Facebook links. I chose Google, then clicked one of my Google accounts, and that was it, I had an account setup. Once you have an account you can save and clone schema.&lt;/p&gt;

&lt;h2&gt;REST API&lt;/h2&gt;

&lt;p&gt;Mockaroo provides a REST API, which lets you download randomly generated data into your projects in real-time with unlimited calls. You can download based on a saved schema or fields you define at runtime. Anything you can generate via the website can also be generated via the REST API. The API is currently free for all to use while it is in open beta, but you need to create an account and get an API key to use it.&lt;/p&gt;

&lt;p&gt;The API contains a single GET method, &lt;code&gt;generate&lt;/code&gt;, which will return CSV or JSON formats depending on the file type part of the URL. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.mockaroo.com/api/generate.json
http://www.mockaroo.com/api/generate.csv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The docs page provides JavaScript and Java examples, so I thought I would provide one here using .Net and &lt;code&gt;HttpClient&lt;/code&gt;. I will define the fields at runtime rather than using a saved schema.&lt;/p&gt;

&lt;p&gt;The fields must be defined as a JSON array and can be passed in the request body or in the query string as a &lt;code&gt;fields&lt;/code&gt; element. Here, I've created a simple &lt;code&gt;MockerooParameter&lt;/code&gt; class for each field specification and then serialized the collection to a JSON array using ServiceStack's &lt;code&gt;JsonSerializer&lt;/code&gt;. You don't need to create a parameter class like this, but I found the serialization produced cleaner JSON this way. Note the call to &lt;code&gt;EmitCamelClassNames&lt;/code&gt; which tells the &lt;code&gt;JsonSerializer&lt;/code&gt; to emit the proper case property names to camel case in the JSON.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static string CreateSchema()
{
    var fields = new List&amp;lt;MockarooParameter&amp;gt;
    {
        new MockarooParameter{ Name = "Id", Type = "Row Number" },
        new MockarooParameter{ Name = "FullName", Type = "Full Name" },
        new MockarooParameter{ Name = "EmailAddress", Type = "Email Address" },
        new MockarooParameter{ Name = "Password", Type = "Password" },
        new MockarooParameter{ Name = "City", Type = "City" },
        new MockarooParameter{ Name = "CompanyName", Type = "Company Name" },
        new MockarooParameter{ Name = "Url", Type = "URL", IncludeQueryString = false }
    };
    JsConfig.EmitCamelCaseNames = true;
    return JsonSerializer.SerializeToString(fields);
}

public class MockarooParameter
{
    public string Name { get; set; }
    public string Type { get; set; }
    public bool IncludeQueryString { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I construct the request I pass my API key, the count of how many records I want returned, and the JSON field specification in the query string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static HttpRequestMessage CreateRequest()
{
    var json = CreateSchema();
    string url = string.Format(@"http://www.mockaroo.com/api/generate.json?key={0}&amp;amp;count=10&amp;amp;fields={1}", API_KEY, json);
    var request = new HttpRequestMessage
    {
        Method = HttpMethod.Get,
        RequestUri = new Uri(url)
    };
    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
    return request;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally call the API and serialize the JSON response into a strongly-typed class that represents the fields specified:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public MockarooInfo[] GetData()
{
    var request = CreateRequest();

    MockarooInfo[] data;
    using (var client = new HttpClient())
    {
        var response = client.SendAsync(request).Result;
        var json = response.Content.ReadAsStringAsync().Result;
        data = JsonSerializer.DeserializeFromString&amp;lt;MockarooInfo[]&amp;gt;(json);
    }
    return data;
}

public class MockarooInfo
{
    public int Id { get; set; }
    public string FullName { get; set; }
    public string EmailAddress { get; set; }
    public string Password { get; set; }
    public string City { get; set; }
    public string CompanyName { get; set; }
    public string Url { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Creating Data Sources from Mockaroo Data&lt;/h2&gt;

&lt;p&gt;I mentioned that I was working on a test data project. I needed to create dictionary files of unique words representing the sorts of data in the Mockaroo field types. Mockaroo does not currently provide access to the data sources it uses for those data types (some are generated with regular expressions, but some are using word dictionaries) but it is quite straightforward to grab the data.&lt;/p&gt;

&lt;p&gt;First, I created a &lt;a href="http://www.mockaroo.com/f3624170"&gt;schema&lt;/a&gt; that contained a field for each of the 74 data types, then I used the web interface to generate a JSON file with the maximum 100,000 records. Visual Studio has a really great feature that lets you take a row of JSON and paste it as a class (I wrote about it &lt;a href="http://www.michael-whelan.net/paste-json-as-classes/"&gt;last year&lt;/a&gt;). That produces this strongly-typed class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MockarooFull
{
    public int Id { get; set; }
    public string BitcoinAddress { get; set; }
    public string City { get; set; }
    public string Colour { get; set; }
    public string CompanyName { get; set; }
    public string Country { get; set; }
    public string CountryCode { get; set; }
    public string CreditCardNumber { get; set; }
    public string CreditCardType { get; set; }
    public string Currency { get; set; }
    public string CurrencyCode { get; set; }
    public string DomainName { get; set; }
    public string Gender { get; set; }
    public string GenderAbbrev { get; set; }
    public string FirstName { get; set; }
    public string FullName { get; set; }
    public string FirstNameMale { get; set; }
    public string FirstNameFemale { get; set; }
    public string LastName { get; set; }
    public string EmailAddress { get; set; }
    public string Frequency { get; set; }
    public string HexColour { get; set; }
    public string IBAN { get; set; }
    public string IPAddressV4 { get; set; }
    public string IPAddressV6 { get; set; }
    public string ISBN { get; set; }
    public string Language { get; set; }
    public string Latitude { get; set; }
    public string Longitude { get; set; }
    public string MacAddress { get; set; }
    public string Password { get; set; }
    public string Race { get; set; }
    public string SSN { get; set; }
    public string US_Phone { get; set; }
    public string US_State { get; set; }
    public string US_StateAbbrev { get; set; }
    public string US_StreetAddress { get; set; }
    public string US_City { get; set; }
    public string Title { get; set; }
    public string URL { get; set; }
    public string Username { get; set; }
    public string US_ZipCode { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, it's just a case of taking a distinct list of data from the specified field and saving them to a text file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void CreateFile(Func&amp;lt;MockarooRow, string&amp;gt; selector, string dictionaryName, bool sort = true)
{
    var fileName = string.Format("{0}.txt", dictionaryName);
    var query = _data.Select(selector).Distinct().Take(1000);
    if (sort)
    {
        query = query.OrderBy(x =&amp;gt; x);
    }
    IList&amp;lt;string&amp;gt; words = query.ToList();
    File.WriteAllLines(fileName, words);

    Console.WriteLine("{0}. Record Count: {1}", dictionaryName, words.Count);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is called like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CreateFile(x =&amp;gt; x.City, "City");
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Check it out&lt;/h2&gt;

&lt;p&gt;Mockaroo is a really great product. It's creator, Mark Brocato, was incredibly responsive and helpful to my questions by email when I was putting my test data together, so a big thanks to him for that. Features are frequently being added to Mockaroo and you can see those reported on &lt;a href="https://twitter.com/mockaroodev"&gt;twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All the code from this post is on &lt;a href="https://github.com/mwhelan/MockarooSandbox"&gt;github&lt;/a&gt;.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/restoring-nuget-packages-in-teamcity/</guid><link>http://www.michael-whelan.net/restoring-nuget-packages-in-teamcity/</link><author>mjmwdev@gmail.com</author><category>Configuration</category><title>Restoring NuGet Packages in TeamCity</title><description>&lt;p&gt;NuGet package restore used to be MSBuild-based and you would enable it by selecting &lt;code&gt;Enable NuGet Package Restore&lt;/code&gt; in Visual Studio. Nowadays, it is &lt;a href="http://www.xavierdecoster.com/migrate-away-from-msbuild-based-nuget-package-restore"&gt;recommended&lt;/a&gt; that you don't use this approach, but instead just set the option in Visual Studio to &lt;code&gt;Allow NuGet to download missing packages&lt;/code&gt;. This works really well in Visual Studio, but when you select the Visual Studio build runner in TeamCity it does not go ahead and restore all the NuGet packages for you in the same way, so you get a compilation error. Instead, you  have to explicitly create a separate step to run before the Visual Studio build step.&lt;/p&gt;

</description><pubDate>Sun, 07 Sep 2014 09:00:00 Z</pubDate><a10:updated>2014-09-07T09:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;NuGet package restore used to be MSBuild-based and you would enable it by selecting &lt;code&gt;Enable NuGet Package Restore&lt;/code&gt; in Visual Studio. Nowadays, it is &lt;a href="http://www.xavierdecoster.com/migrate-away-from-msbuild-based-nuget-package-restore"&gt;recommended&lt;/a&gt; that you don't use this approach, but instead just set the option in Visual Studio to &lt;code&gt;Allow NuGet to download missing packages&lt;/code&gt;. This works really well in Visual Studio, but when you select the Visual Studio build runner in TeamCity it does not go ahead and restore all the NuGet packages for you in the same way, so you get a compilation error. Instead, you  have to explicitly create a separate step to run before the Visual Studio build step.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;To enable NuGet Package Restore with TeamCity you need to add a build step before the Visual Studio solution build with a runner type of &lt;code&gt;NuGet Installer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/teamcity-nuget-installer.png" alt="TeamCity NuGet Installer" /&gt;&lt;/p&gt;

&lt;p&gt;The first time you create this installer, there might not be a NuGet.exe to choose. Just select the NuGet Settings option and you are presented with the option to download the latest version. Select Fetch NuGet and you are able to select a NuGet.exe version to be downloaded for use by TeamCity.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/teamcity-nuget-add.png" alt="TeamCity NuGet Installer" /&gt;&lt;/p&gt;

&lt;p&gt;Once you have selected the NuGet.exe you just have to provide the path to your Visual Studio solution file, which you can do with the useful file tree (pictured):&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/teamcity-nuget-installer-final.png" alt="TeamCity NuGet Installer" /&gt;&lt;/p&gt;

&lt;h2&gt;Find out more&lt;/h2&gt;

&lt;p&gt;I can recommend some great resources on using TeamCity for continuous integration/delivery from my fellow TestStackers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mehdi Khalili has a &lt;a href="http://www.mehdi-khalili.com/continuous-integration-delivery-github-teamcity"&gt;definitive post&lt;/a&gt; on doing continuous integration and delivery for GitHub with TeamCity.&lt;/li&gt;
&lt;li&gt;Rob Moore and Matt Davies have a great &lt;a href="http://robdmoore.id.au/blog/2012/08/12/maintainable-large-scale-continuous-delivery-with-teamcity/"&gt;series of posts&lt;/a&gt; on creating a deployment pipeline with TeamCity.&lt;/li&gt;
&lt;li&gt;Jake Ginnivan has a ton of great posts on &lt;a href="http://jake.ginnivan.net/blog/categories/teamcity"&gt;TeamCity&lt;/a&gt; and &lt;a href="http://jake.ginnivan.net/blog/categories/teamcity"&gt;continuous delivery&lt;/a&gt;. I particularly like this &lt;a href="http://jake.ginnivan.net/teamcity-ui-test-agent/"&gt;one&lt;/a&gt;, on setting up a UI test build agent with TeamCity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In additiona, JetBrains also has a &lt;a href="http://blog.jetbrains.com/teamcity/2013/08/nuget-package-restore-with-teamcity/"&gt;blog post&lt;/a&gt; that goes into more detail about the NuGet Installer build runner.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/code-katas-for-practicing-tdd/</guid><link>http://www.michael-whelan.net/code-katas-for-practicing-tdd/</link><author>mjmwdev@gmail.com</author><category>Programming</category><title>TDD Katas</title><description>&lt;p&gt;A kata is a form of deliberate practice, with its roots in the martial arts world. It describes a choreographed pattern of movements used to train yourself to the level of muscle memory. In the world of programming, katas are small coding exercises that a programmer completes on a daily basis. They can be a great exercise for practicing TDD in particular. &lt;/p&gt;

&lt;p&gt;Rather than attempt a new kata each day, it's recommended that you work on the same one repeatedly until completing it is almost like muscle memory. Katas can be a great way to try out a new programning language, or a new programming technique, or a new framework. For example, if you wanted to move from Moq to NSubstitute (which I recommend) you could replace Moq with NSubstitute when doing a familiar kata.   &lt;/p&gt;

</description><pubDate>Sat, 02 Aug 2014 23:00:00 Z</pubDate><a10:updated>2014-08-02T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;A kata is a form of deliberate practice, with its roots in the martial arts world. It describes a choreographed pattern of movements used to train yourself to the level of muscle memory. In the world of programming, katas are small coding exercises that a programmer completes on a daily basis. They can be a great exercise for practicing TDD in particular. &lt;/p&gt;

&lt;p&gt;Rather than attempt a new kata each day, it's recommended that you work on the same one repeatedly until completing it is almost like muscle memory. Katas can be a great way to try out a new programning language, or a new programming technique, or a new framework. For example, if you wanted to move from Moq to NSubstitute (which I recommend) you could replace Moq with NSubstitute when doing a familiar kata.   &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;When doing the kata, focus on the TDD process:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write a failing test&lt;/li&gt;
&lt;li&gt;Write the simplest code to pass the test&lt;/li&gt;
&lt;li&gt;Refactor to remove duplication &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Good habits for effective TDD&lt;/h2&gt;

&lt;p&gt;I first came across the idea of TDD katas when I attended the Codemanship &lt;a href="http://codemanship.co.uk/tdd.html"&gt;TDD Master Class&lt;/a&gt;, a two-day weekend course put on by Jason Gorman, in 2010. The course really opened my eyes to a new way of programming with TDD, and also the idea of software craftsmanship. I became "test infected" as they say. I would highly recommend the Codemanship courses to anyone living in London, as they still run regularly! &lt;/p&gt;

&lt;p&gt;I was just looking back at my notes from that course today, and I think that the good habits for effective TDD that Jason recommended are worth repeating here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When writing a test, write the assertion first and work backwards.&lt;/li&gt;
&lt;li&gt;Always run the test to see it fail in the way that you expect it to fail before writing the application code to make the test pass.&lt;/li&gt;
&lt;li&gt;Write meaningful tests that are self-explanatory. That is, the names of variables and methods should communicate your intention. I write all of my code now (test and application) thinking of the "Reader" - the person who is reading my code. Will my intention now be clearly communicated to that reader some time in the future?&lt;/li&gt;
&lt;li&gt;&lt;a href="http://codemanship.co.uk/parlezuml/blog/?postid=987"&gt;Triangulate&lt;/a&gt; through concrete examples towards general solutions. Work through a sequence of tests that lead you towards a more general solution&lt;/li&gt;
&lt;li&gt;Keep test code and model code separate&lt;/li&gt;
&lt;li&gt;Isolate tests so that they run independently&lt;/li&gt;
&lt;li&gt;Organise tests to reflect organisation of model code &lt;/li&gt;
&lt;li&gt;Maintain your tests&lt;/li&gt;
&lt;li&gt;Tests should test one thing&lt;/li&gt;
&lt;li&gt;Don’t refactor when a test is failing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although my practice has evolved a bit, I think I follow most of them still!&lt;/p&gt;

&lt;h2&gt;TDD Katas&lt;/h2&gt;

&lt;p&gt;I have collected a number of TDD Kata exercises over the past few years. I keep them in a repository on GitHub for easy reference. You can find them &lt;a href="https://github.com/mwhelan/Katas"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mwhelan/Katas/tree/master/Katas.Anagrams"&gt;Anagrams&lt;/a&gt;: Write a program to generate all potential anagrams of an input string. From a &lt;a href="http://www.codeproject.com/Articles/498404/TDD-the-Anagrams-Kata"&gt;code project article&lt;/a&gt; by Richard Dalton.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mwhelan/Katas/tree/master/Katas.BankTransfer"&gt;Bank Transfer&lt;/a&gt;: Create a simple bank account program. From &lt;a href="http://codemanship.co.uk"&gt;Codemanship&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mwhelan/Katas/tree/master/Katas.Fibonacci"&gt;Fibonacci Generator&lt;/a&gt;: Write some code to generate the Fibonacci sequence up to a specific length which is no shorter than 8 numbers and no longer than 50. &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mwhelan/Katas/tree/master/Katas.FibonacciSequence"&gt;Fibonacci Sequence&lt;/a&gt;: Write a program that writes out the number for a given position in the Fibonacci Sequence From &lt;a href="http://codemanship.co.uk"&gt;Codemanship&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mwhelan/Katas/tree/master/Katas.FizzBuzz"&gt;Fizz Buzz&lt;/a&gt;: Generate a string of integers, starting at 1 and going up to 100, substituting any integer which is divisible by 3 with "Fizz", and any integer which is divisible by 5 with "Buzz", and any integer divisible by 3 and 5 with "FizzBuzz".&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mwhelan/Katas/tree/master/Katas.FizzBuzzWhiz"&gt;Fizz Buzz Whiz&lt;/a&gt;: Same as FizzBuzz but substitute prime numbers with "Whiz."&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mwhelan/Katas/tree/master/Katas.Pager"&gt;Pager&lt;/a&gt;: Write the underlying data model for a pager control. I haven't done this one yet, but I think it will be a great kata. From &lt;a href="http://kaczanowscy.pl/tomek/2013-04/code-kata-pager"&gt;Tomek Kaczanowski&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mwhelan/Katas/tree/master/Katas.PrimeNumbers"&gt;Prime Numbers&lt;/a&gt;: A bit simpler than the famous Uncle Bob one. Create a method that, given an integer, returns true if it is a prime and false if it is not.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mwhelan/Katas/tree/master/Katas.StringCalculator"&gt;String Calculator&lt;/a&gt;: One of the better known katas. The essence is a method that, given a delimited string, returns the sum of the values. From &lt;a href="http://osherove.com/tdd-kata-1/"&gt;Roy Osherove&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mwhelan/Katas/tree/master/Katas.WordCounter"&gt;Word Counter&lt;/a&gt;: A method that, given a delimited string, returns a collection of all of the unique words in it and the count of how many times they occurred. Start off with a space between words, but later other delimiters wil be added.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Coding Dojos&lt;/h2&gt;

&lt;p&gt;A coding dojo is an extension of TDD katas. A coding dojo is a regular meeting where you and your team meet up to focus on improving practical coding skills, perhaps working on katas together and discussing lessons learned. &lt;a href="http://pluralsight.com/training/Authors/Details/emily-bache"&gt;Emily Bache&lt;/a&gt; has a great course on &lt;a href="http://pluralsight.com/training/Courses/TableOfContents/the-coding-dojo"&gt;coding dojos for TDD&lt;/a&gt; on Pluralsight.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/gitignore-files/</guid><link>http://www.michael-whelan.net/gitignore-files/</link><author>mjmwdev@gmail.com</author><category>Visual Studio</category><title>gitignore Files</title><description>&lt;p&gt;There are a number of files that you don't want to store in your git repository. These could be binary files, such as the packages folder for Visual Studio applications or the node_modules folder for node projects, or automatically generated files such as ReSharper user files or files produced by the build system. If you create a file in your repository named &lt;code&gt;.gitignore&lt;/code&gt;, Git uses the file patterns in it to determine which files and directories to ignore when you make a commit. You can also create a global .gitignore file, which is a list of rules for ignoring files in every Git repository on your computer. You can learn more about the file patterns from &lt;a href="http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository#Ignoring-Files"&gt;Pro Git&lt;/a&gt;.&lt;/p&gt;

</description><pubDate>Fri, 01 Aug 2014 23:00:00 Z</pubDate><a10:updated>2014-08-01T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;There are a number of files that you don't want to store in your git repository. These could be binary files, such as the packages folder for Visual Studio applications or the node_modules folder for node projects, or automatically generated files such as ReSharper user files or files produced by the build system. If you create a file in your repository named &lt;code&gt;.gitignore&lt;/code&gt;, Git uses the file patterns in it to determine which files and directories to ignore when you make a commit. You can also create a global .gitignore file, which is a list of rules for ignoring files in every Git repository on your computer. You can learn more about the file patterns from &lt;a href="http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository#Ignoring-Files"&gt;Pro Git&lt;/a&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Creating a .gitignore file&lt;/h2&gt;

&lt;p&gt;Creating a .gitignore file is slightly tricky on Windows. When you try to create it in Windows Explorer, it interprets the gitignore part of the file name as the file extension, and so thinks that you are trying to create a file without a name. You get the aptly named "You must type a file name." error message.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/gitignore-windows-error.png" alt="windows error" /&gt;&lt;/p&gt;

&lt;p&gt;To get around this issue, just create a normal text file, such as &lt;code&gt;gitignore.txt&lt;/code&gt;. Open the file in a text editor and add all of your rules. Finally, open a command prompt, navigate to the folder containing the file, and use the &lt;code&gt;ren&lt;/code&gt; command to rename it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ren gitignore.txt .gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;.gitignore Templates&lt;/h2&gt;

&lt;p&gt;The contents of a .gitignore file vary by operating systems, environments, and languages. There are a few useful resources for finding the right combination of rules for your particular project flavour.&lt;/p&gt;

&lt;h3&gt;gitignore.io website&lt;/h3&gt;

&lt;p&gt;The &lt;a href="http://www.gitignore.io/"&gt;gitignore.io&lt;/a&gt; website is very handy. It lets you type in any combination of rules from a pre-defined list, and then either generate the .gitignore file in the browser or download the generated .gitignore file to your computer. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/gitignore-gitignore-io.png" alt="gitignore.io" /&gt;&lt;/p&gt;

&lt;h3&gt;GitHub&lt;/h3&gt;

&lt;p&gt;When you create a new repository on GitHub you can choose to add a .gitignore file from GitHub's collection of .gitignore file templates.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/gitignore-github.png" alt="github" /&gt;&lt;/p&gt;

&lt;p&gt;GitHub maintains an &lt;a href="https://github.com/github/gitignore"&gt;official list&lt;/a&gt; of recommended .gitignore files for many popular operating systems, environments, and languages, which they use to populate the new repository .gitignore list.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/customizing-metro-report-in-bddfyv4/</guid><link>http://www.michael-whelan.net/customizing-metro-report-in-bddfyv4/</link><author>mjmwdev@gmail.com</author><category>BDDfy</category><title>Customizing the New Metro HTML Report in BDDfy v4</title><description>&lt;p&gt;BDDfy v4 is out and it provides a new metro-style HTML report - thanks to &lt;a href="https://twitter.com/robertsjason"&gt;Jason Roberts&lt;/a&gt; for this excellent contribution. It has the same functionality as the original HTML report, which is still available, so it just gives you another choice of style for your HTML report. And, of course, you can always customize the CSS and JavaScript of both reports if you want to create a new HTML report with your own look and feel. The way that you customize the metro report is slightly different from how you customize the classic HTML report so I thought I would document that here.&lt;/p&gt;

</description><pubDate>Sat, 26 Jul 2014 23:00:00 Z</pubDate><a10:updated>2014-07-26T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;BDDfy v4 is out and it provides a new metro-style HTML report - thanks to &lt;a href="https://twitter.com/robertsjason"&gt;Jason Roberts&lt;/a&gt; for this excellent contribution. It has the same functionality as the original HTML report, which is still available, so it just gives you another choice of style for your HTML report. And, of course, you can always customize the CSS and JavaScript of both reports if you want to create a new HTML report with your own look and feel. The way that you customize the metro report is slightly different from how you customize the classic HTML report so I thought I would document that here.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-metro.png" alt="BDDfy metro report" /&gt;&lt;/p&gt;

&lt;p&gt;By default, BDDfy still runs with the classic HTML report. If you want to turn on the metro report, then you need to enable it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configurator.BatchProcessors.HtmlMetroReport.Enable();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Technically, this will mean that both HTML reports are turned on. Be warned though, by default both reports generate a file in your bin directory named &lt;code&gt;BDDfy.html&lt;/code&gt;. So, one of the files will overwrite the other one and you will only see one HTML report (we might change this). &lt;/p&gt;

&lt;p&gt;If you only want to run the metro HTML report, then you can turn off the classic HTML report:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configurator.BatchProcessors.HtmlReport.Disable();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, you can customize the metro report to, amongst other things, have a new filename. In this case, instead of enabling the metro report, you would add a new &lt;code&gt;HtmlReporter&lt;/code&gt; to the Batch Processors pipeline.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configurator.BatchProcessors.Add(
    new HtmlReporter(
        new CustomMetroHtmlReportConfiguration(), new MetroReportBuilder()));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the use of the &lt;code&gt;MetroReportBuilder&lt;/code&gt; class to create a custom metro report. (To customize the classic HTML report you could swap that parameter for the &lt;code&gt;ClassicReportBuilder&lt;/code&gt; class, or use the original constructor overload to leave the ReportBuilder out altogether).&lt;/p&gt;

&lt;p&gt;You customize both HTML reports by creating an implementation of &lt;code&gt;IHtmlReportConfiguration&lt;/code&gt;. The easiest way to do this is to inherit from the &lt;code&gt;DefaultHtmlReportConfiguration&lt;/code&gt; class and override the specific properties that you want to customize. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class CustomMetroHtmlReportConfiguration : DefaultHtmlReportConfiguration
{
    public override string OutputFileName
    {
        get { return "BDDfyMetro.html"; }
    }

    public override string ReportHeader
    {
        get { return "ATM Solutions"; }
    }

    public override string ReportDescription
    {
        get { return "A reliable solution for your offline banking needs"; }
    }

    /// Embed jQuery in the report so people can see it with no internet connectivity
    public override bool ResolveJqueryFromCdn
    {
        get { return false; }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-metro-custom.png" alt="BDDfy metro report" /&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/deploying-sandra-snow-to-github-pages-with-gulp/</guid><link>http://www.michael-whelan.net/deploying-sandra-snow-to-github-pages-with-gulp/</link><author>mjmwdev@gmail.com</author><category>Snow</category><title>Deploying Sandra.Snow to GitHub Pages with Gulp</title><description>&lt;p&gt;When I was planning a git work flow for my Sandra.Snow blog, which is hosted on GitHub Pages, I expected that I would store the project files in the master branch, then publish the site to the gh-pages branch. The point I overlooked is that this is the work flow for project sites, but user and organisation sites, like my blog, work slightly differently. With user and organisation sites you publish the website content to the master branch of your GitHub repository. This was far from ideal, as it meant that my content was mixed with the generated output. Even the slightest tweak to a post would lead to the whole site being generated, meaning monster commits and hiding the changes to the content. I suspect Sandra.Snow has a few solutions to this problem, but here is the solution I came up with.&lt;/p&gt;

</description><pubDate>Thu, 17 Jul 2014 23:00:00 Z</pubDate><a10:updated>2014-07-17T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;When I was planning a git work flow for my Sandra.Snow blog, which is hosted on GitHub Pages, I expected that I would store the project files in the master branch, then publish the site to the gh-pages branch. The point I overlooked is that this is the work flow for project sites, but user and organisation sites, like my blog, work slightly differently. With user and organisation sites you publish the website content to the master branch of your GitHub repository. This was far from ideal, as it meant that my content was mixed with the generated output. Even the slightest tweak to a post would lead to the whole site being generated, meaning monster commits and hiding the changes to the content. I suspect Sandra.Snow has a few solutions to this problem, but here is the solution I came up with.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Orphan Branch&lt;/h2&gt;

&lt;p&gt;The first step was to separate out the markdown blog posts and snow templates from the generated static website files. To do this, I created an orphan branch in the repository named "posts" and moved the markdown blog posts and Sandra.Snow templates and generators into it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout --orphan posts
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Gulp&lt;/h2&gt;

&lt;p&gt;The next step was to automate the deployment to my remote master branch. To do that, I thought I would use &lt;a href="http://gulpjs.com/"&gt;Gulp&lt;/a&gt;, a useful tool I've been using recently while learning AngularJS. Gulp is a relatively new  front-end build system, which makes it easy to automate common tasks in the development of a website. It's built on Node.js and is extremely fast, as it uses node.js streams rather than writing temporary files to disk. It promotes the idea of code over configuration - the code being JavaScript.&lt;/p&gt;

&lt;p&gt;To install Gulp, you need to have &lt;a href="http://nodejs.org/"&gt;Node&lt;/a&gt; installed. Then you can install gulp globally by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You then need to install it locally into your project. From the command line, navigate to your project root, and run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This installs gulp locally in the &lt;code&gt;node_modules&lt;/code&gt; folder and saves it to the &lt;code&gt;package.json&lt;/code&gt; file that holds the node configuration. (If you don't have a package.json file you can type &lt;a href="https://www.npmjs.org/doc/cli/npm-init.html"&gt;npm init&lt;/a&gt; to generate one before this step).&lt;/p&gt;

&lt;p&gt;Like I said, I want to keep any generated files out of the repo, so I added the &lt;code&gt;dist&lt;/code&gt; folder (where I have Sandra.Snow generate the static pages to) and the &lt;code&gt;node_modules&lt;/code&gt; folder (where node stores all of the plugins) to the &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dist/
node_modules/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I clone a fresh copy of the repo, I just need to open a command prompt at the project root and type &lt;code&gt;npm update&lt;/code&gt; to reinstall all the plugins listed in the node &lt;code&gt;package.json&lt;/code&gt; file to the &lt;code&gt;node_modules&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2&gt;Gulp-gh-pages&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/rowoot/gulp-gh-pages"&gt;Gulp-gh-pages&lt;/a&gt; is a gulp plugin to publish to GitHub Pages. Its default use case is to deploy to a project site's gh-pages branch, but you can configure it to deploy to the master branch instead. To install into the project, execute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You configure gulp-plugins using JavaScript in a &lt;code&gt;gulpfile.js&lt;/code&gt; file. To configure gulp-gh-pages to deploy the dist folder (the output folder that Snow generates the website to) to the master branch of my mwhelan.github.io user site repository, I just need to define a &lt;code&gt;deploy&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var deploy = require("gulp-gh-pages");
var options = { 
    remoteUrl: "https://github.com/mwhelan/mwhelan.github.io.git",
    branch: "master"};
gulp.task('deploy', function () {
    gulp.src("dist/**/*.*")
        .pipe(deploy(options));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if I want to deploy my site, I just need to navigate to the root of the project via the command line and execute that task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The whole workflow&lt;/h2&gt;

&lt;p&gt;When I've created a new blog post, I use Snow to generate the static site and then view it in a browser to make sure everything is OK:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The build task deletes the output folder, shells out to Snow to re-generate the static site, creates a web server to host the static files, then opens the browser to display the site. (Snow already does some of these things, but I did them here to add to my learning about gulp)! &lt;/p&gt;

&lt;p&gt;To have these steps happen in that order, I use the &lt;a href="https://www.npmjs.org/package/run-sequence"&gt;run-sequence plugin&lt;/a&gt;. By default, node would run the tasks asynchronously. Once everything looks OK, I can run the &lt;code&gt;deploy&lt;/code&gt; task to publish to GitHub. &lt;/p&gt;

&lt;p&gt;In case it is useful, here is the whole gulp configuration file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gulp = require("gulp");
var runSequence = require("run-sequence");
var clean = require('gulp-rimraf');
var shell = require('gulp-shell');
var connect = require('gulp-connect');
var open = require('gulp-open');
var deploy = require("gulp-gh-pages");

gulp.task('clean', function () {
    return gulp.src('dist', {read:false})
        .pipe(clean());
});

gulp.task('snow', shell.task('.\\Snow\\_compiler\\Snow.exe config=.\\Snow\\'));

gulp.task('connect', function() {
    connect.server({
        root: 'dist/',
        port: '8123'
  });
});

gulp.task("open", function(){
  var options = {
    url: "http://localhost:8123"
  };
  gulp.src("dist/index.html")
  .pipe(open("", options));
});

// generate website to 'dist' folder and then open site in browser
gulp.task('build', function(callback) {
    runSequence('clean', 'snow', 'connect', 'open');
});

// deploy 'dist' folder to mwhelan.github.io github repo, master branch
var options = { 
    remoteUrl: "https://github.com/mwhelan/mwhelan.github.io.git",
    branch: "master"};
gulp.task('deploy', function () {
    gulp.src("dist/**/*.*")
        .pipe(deploy(options));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like I say, I am pretty new to all this front-end build stuff. I suspect I will find better ways of doing things as my experience with gulp increases. I could also add some other tasks in here, such as minifying the CSS/JavaScript, and using &lt;a href="http://addyosmani.com/blog/removing-unused-css/"&gt;uncss&lt;/a&gt; to delete all the redundant CSS. (I am using Twitter Bootstrap to style my site and I already know that I can delete 90% of my styles)! &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/deleting-nested-node-modules-folders/</guid><link>http://www.michael-whelan.net/deleting-nested-node-modules-folders/</link><author>mjmwdev@gmail.com</author><category>General</category><title>Deleting Nested node_modules Folders</title><description>&lt;p&gt;When using Node Package Manager (NPM) on Windows, it has an annoying habit of creating massively nested &lt;code&gt;node_modules&lt;/code&gt; folders that exceed the 260 character path length limit. This makes it extremely painful to try to delete and causes problems with most windows tools. In Visual Studio, for example, I cannot &lt;code&gt;Refresh Folder&lt;/code&gt; when I am in a website project (as opposed to a web application project).&lt;/p&gt;

&lt;p&gt;Fortunately, the fix is pretty simple.&lt;/p&gt;

</description><pubDate>Tue, 08 Jul 2014 23:00:00 Z</pubDate><a10:updated>2014-07-08T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;When using Node Package Manager (NPM) on Windows, it has an annoying habit of creating massively nested &lt;code&gt;node_modules&lt;/code&gt; folders that exceed the 260 character path length limit. This makes it extremely painful to try to delete and causes problems with most windows tools. In Visual Studio, for example, I cannot &lt;code&gt;Refresh Folder&lt;/code&gt; when I am in a website project (as opposed to a web application project).&lt;/p&gt;

&lt;p&gt;Fortunately, the fix is pretty simple.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;First, you need to install &lt;a href="http://technet.microsoft.com/en-us/library/cc733145.aspx"&gt;RoboCopy&lt;/a&gt;. If you are on Windows 8, I suggest you use the version from the &lt;a href="http://www.microsoft.com/en-us/download/details.aspx?id=17657"&gt;Windows Server 2003 resource kit&lt;/a&gt; as there appear to be &lt;a href="http://www.matrix44.net/blog/?p=1355"&gt;issues&lt;/a&gt; with the Windows 8 version. Next, create an empty directory and use the RoboCopy mirror flag to mirror the empty directory to the problematic &lt;code&gt;node_modules&lt;/code&gt; folder. You can then delete the empty directory in the normal way. Cunningly, deleting the mirrored directory also deletes the &lt;code&gt;node_modules&lt;/code&gt; directory. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;robocopy new_empty_directory node_modules /MIR
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Credit to &lt;a href="http://toby1kenobi.com/2014/04/how-to-delete-the-node_modules-folder-when-windows-complains-that-file-or-path-names-are-too-long/"&gt;toby1kenobi&lt;/a&gt; for this clever solution!&lt;/p&gt;

&lt;p&gt;Finally, you just have to restore the deleted node packages. From the application directory, just run &lt;a href="https://www.npmjs.org/doc/cli/npm-update.html"&gt;npm update&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will update all the packages listed in the packages.json file to the latest version. It will also install missing packages.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/new-site-design/</guid><link>http://www.michael-whelan.net/new-site-design/</link><author>mjmwdev@gmail.com</author><category>General</category><title>New Site Design</title><description>&lt;p&gt;When I moved my blog to &lt;a href="https://github.com/Sandra/Sandra.Snow/wiki"&gt;Snow&lt;/a&gt; I was lucky that it had a pretty nice theme out of the box - it is the same one that its creator &lt;a href="http://www.philliphaydon.com/"&gt;Phillip Haydon&lt;/a&gt; uses on his blog. I have been doing a lot of front-end work lately though and I have some pretty strong preferences when I read blogs, so I couldn't resist the urge to style it up just the way I like it. &lt;/p&gt;

&lt;p&gt;The theme uses Bootstrap 3 and is fully responsive. Actually, I had a bit of a problem with it displaying on my iPhone. First it would display some posts half width, then it was cutting off the sides. I discovered that the key is in the viewport setting. It seems it's not sufficient to set the viewport to &lt;code&gt;device-width&lt;/code&gt;. You also have to set the &lt;code&gt;initial-scale&lt;/code&gt; and the &lt;code&gt;maximum-scale&lt;/code&gt;.&lt;/p&gt;

</description><pubDate>Fri, 20 Jun 2014 23:00:00 Z</pubDate><a10:updated>2014-06-20T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;When I moved my blog to &lt;a href="https://github.com/Sandra/Sandra.Snow/wiki"&gt;Snow&lt;/a&gt; I was lucky that it had a pretty nice theme out of the box - it is the same one that its creator &lt;a href="http://www.philliphaydon.com/"&gt;Phillip Haydon&lt;/a&gt; uses on his blog. I have been doing a lot of front-end work lately though and I have some pretty strong preferences when I read blogs, so I couldn't resist the urge to style it up just the way I like it. &lt;/p&gt;

&lt;p&gt;The theme uses Bootstrap 3 and is fully responsive. Actually, I had a bit of a problem with it displaying on my iPhone. First it would display some posts half width, then it was cutting off the sides. I discovered that the key is in the viewport setting. It seems it's not sufficient to set the viewport to &lt;code&gt;device-width&lt;/code&gt;. You also have to set the &lt;code&gt;initial-scale&lt;/code&gt; and the &lt;code&gt;maximum-scale&lt;/code&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can read more about it on &lt;a href="http://stackoverflow.com/questions/9386429/simple-bootstrap-page-is-not-responsive-on-the-iphone"&gt;stack overflow&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag"&gt;mozilla&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am using the &lt;a href="http://jmblog.github.io/color-themes-for-google-code-prettify/"&gt;GitHub colour theme&lt;/a&gt; for Google Code Prettify to style the code. I just tweaked it to have a grey background. &lt;/p&gt;

&lt;p&gt;I still don't wear glasses, which is pretty good after nearly 20 years coding, but I do like the font-size to be pretty large when I'm reading. I tend to magnify most pages as soon as I go to them. So that explains the very large font I'm using here.&lt;/p&gt;

&lt;p&gt;I did a bit of mobile phone and different browser testing on BrowserStack, and I've tried it out out on all my devices, but my testing is far from exhaustive. Please let me know if you spot any issues on a particular device.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/learning-angularjs-data-binding/</guid><link>http://www.michael-whelan.net/learning-angularjs-data-binding/</link><author>mjmwdev@gmail.com</author><category>Learning</category><title>AngularJS Data Binding</title><description>&lt;p&gt;Although AngularJS is a JavaScript framework, there is actually quite a lot you can do without writing any JavaScript at all. In my first look at Angular, I am going to focus on simple data binding with Angular directives. Directives are a mechanism that Angular uses to extend the capabilities of HTML. HTML is designed for static documents and directives help you extend it for dynamic views, letting you invent new HTML syntax, specific to your application.&lt;/p&gt;
</description><pubDate>Fri, 20 Jun 2014 09:00:00 Z</pubDate><a10:updated>2014-06-20T09:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;strong&gt;This article is part of a series on &lt;a href="http://www.michael-whelan.net/learning-angularjs"&gt;Learning AngularJS&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Although AngularJS is a JavaScript framework, there is actually quite a lot you can do without writing any JavaScript at all. In my first look at Angular, I am going to focus on simple data binding with Angular directives. Directives are a mechanism that Angular uses to extend the capabilities of HTML. HTML is designed for static documents and directives help you extend it for dynamic views, letting you invent new HTML syntax, specific to your application.&lt;/p&gt;

&lt;h2&gt;Referencing AngularJS&lt;/h2&gt;

&lt;p&gt;It probably goes without saying that the first thing you need to do is reference AngularJS in your HTML page.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src="assets/js/angular.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you go to the &lt;a href="https://angularjs.org/"&gt;AngularJS home page&lt;/a&gt; then you can download a copy or get a reference to the CDN location. You can also install it via NuGet and Bower.&lt;/p&gt;

&lt;h2&gt;ng-app&lt;/h2&gt;

&lt;p&gt;The key built-in Angular directive is &lt;code&gt;ng-app&lt;/code&gt;, which bootstraps the Angular application. It designates the root element of the application. You can scope your Angular application to any part of the page, but it is common to put it on the &lt;code&gt;html&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt; tag, which makes your entire page Angular.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body ng-app=""&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;ng-init&lt;/h2&gt;

&lt;p&gt;Because we've loaded Angular in our script tag and set the ng-app attribute on our opening html tag, we get access to Angular in our HTML template. &lt;code&gt;ng-init&lt;/code&gt; is an Angular directive that allows us to set an initial value on the scope on page load. Here I have a "container" div for my page and I am calling ng-init as an attribute on that div and creating a &lt;code&gt;data&lt;/code&gt; object. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class="container" ng-init="data={
     femaleName: 'female name',
     jobTitle: 'job title',
     tediousTask: 'tedious task',
     dirtyTask: 'dirty task',
     celebrity: 'celebrity',
     uselessSkill: 'useless skill',
     obnoxiousCelebrity: 'obnoxious celebrity',
     hugeNumber: 'huge number',
     adjective: 'adjective'
     }"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should be noted that ng-init is not recommended for production applications. There are better ways to load data, but it is convenient for demos like this as it allows us to focus on the basics of data binding without getting into the rest of Angular.&lt;/p&gt;

&lt;h2&gt;Data Binding&lt;/h2&gt;

&lt;p&gt;OK, so it's worth taking a look at the interface at this point. In this &lt;a href=""&gt;MadLibs game&lt;/a&gt; the player types words into the form input fields and their values show up in the story below. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/learning-angularjs-ngmadlibs.png" alt="MadLibs app" /&gt;&lt;/p&gt;

&lt;h2&gt;ng-model&lt;/h2&gt;

&lt;p&gt;The data entry input fields use &lt;code&gt;ng-model&lt;/code&gt;, which is an Angular directive to handle &lt;em&gt;two way data binding.&lt;/em&gt; This means that it will write any input directly into the data object and will display the latest value for that property in the data object. For example, here is the markup for the input field that is bound to the &lt;code&gt;femaleName&lt;/code&gt; property of the &lt;code&gt;data&lt;/code&gt; object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class="libInput"&amp;gt;
    &amp;lt;input type="text" ng-model="data.femaleName" /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Binding Expressions&lt;/h2&gt;

&lt;p&gt;In Angular applications, your HTML templates are static and your data is dynamic. When a data value changes in the model (&lt;code&gt;data&lt;/code&gt; in this case) the browser renders the updates within the template. You display the contents of the model using Angular’s binding syntax, which is a pair of curly braces around an Angular expression. Angular expressions are JavaScript-like code snippets that are placed in curly braces. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ expression }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of the highlighted phrases in the story (above) are bound to the data model using binding expressions. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{data.femaleName}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Source code and demo&lt;/h2&gt;

&lt;p&gt;You can see the MadLibs game in action &lt;a href="http://www.michael-whelan.net/thinkful-angular-ngMadLibs/"&gt;here&lt;/a&gt; and you can get the source code on &lt;a href="https://github.com/mwhelan/thinkful-angular-ngMadLibs"&gt;GitHub&lt;/a&gt;. I am going to be refactoring the application as I go, so to see this iteration of the code you will want the third commit, "madlibs with basic databinding."&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/a-javascript-calculator/</guid><link>http://www.michael-whelan.net/a-javascript-calculator/</link><author>mjmwdev@gmail.com</author><category>Learning</category><title>A JavaScript Calculator</title><description>&lt;p&gt;Before getting into any AngularJS, the first project on Thinkful's Angular course is to create a JavaScript calculator to review front end basics with HTML, CSS and JavaScript. It provides some interesting challenges. You can see my working version &lt;a href="http://www.michael-whelan.net/thinkful-angular-adder-subtractor/"&gt;here&lt;/a&gt;. The source code is also on &lt;a href="https://github.com/mwhelan/thinkful-angular-adder-subtractor"&gt;GitHub&lt;/a&gt;. &lt;/p&gt;
</description><pubDate>Thu, 19 Jun 2014 17:00:00 Z</pubDate><a10:updated>2014-06-19T17:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;strong&gt;This article is part of a series on &lt;a href="http://www.michael-whelan.net/learning-angularjs"&gt;Learning AngularJS&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before getting into any AngularJS, the first project on Thinkful's Angular course is to create a JavaScript calculator to review front end basics with HTML, CSS and JavaScript. It provides some interesting challenges. You can see my working version &lt;a href="http://www.michael-whelan.net/thinkful-angular-adder-subtractor/"&gt;here&lt;/a&gt;. The source code is also on &lt;a href="https://github.com/mwhelan/thinkful-angular-adder-subtractor"&gt;GitHub&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/learning-angularjs-adder-subtractor.png" alt="JavaScript calculator" /&gt;&lt;/p&gt;

&lt;p&gt;I am tending to build all of my applications with Twitter Bootstrap at the moment. I really like how easy it is to put together reasonable looking applications quite quickly.&lt;/p&gt;

&lt;h2&gt;Field Validation&lt;/h2&gt;

&lt;p&gt;The application requires that users can only enter integers. There are a number of ways to achieve this and I've tried different approaches on different projects. You can write a JavaScript function, or use the HTML5 number input type, to pop up an alert if the user does not enter the right value. Alerts are not a very nice user experience though, and the HTML5 one is particularly ugly.&lt;/p&gt;

&lt;p&gt;For this project I thought I would try the &lt;a href="http://jqueryvalidation.org/"&gt;jQuery validation plugin&lt;/a&gt;. This performs client-side validation on the form as the user leaves each control, preventing form submit if it is invalid, which I think makes for a better user experience. Alternatively, if you write code that is not in the submit event you can check if the form is valid by calling the &lt;a href="http://jqueryvalidation.org/valid/"&gt;valid method&lt;/a&gt; on the form (see the examples below).&lt;/p&gt;

&lt;p&gt;The jQuery Validation plugin is very easy to setup. You simply call the &lt;code&gt;validate()&lt;/code&gt; method on the form during page initialisation and use the input fields' names to specify rules and messages. Alternatively, you can specify rules as attributes on the field if you prefer. &lt;/p&gt;

&lt;p&gt;In the example below, I am providing validation rules for two input fields named &lt;code&gt;inputX&lt;/code&gt; and &lt;code&gt;inputY&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function setupFormValidation() {
    $("#convertForm").validate({
        rules: {
            inputX: {
                required: true,
                digits: true
            },
            inputY: {
                required: true,
                digits: true
            }
        },
        messages: {
            inputX: "Please enter an integer for X",
            inputY: "Please enter an integer for Y"
        },
        highlight: function (element) {
            $(element).closest('.form-group').addClass('has-error');
        },
        unhighlight: function (element) {
            $(element).closest('.form-group').removeClass('has-error');
        }
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, the digits rule will ensure the user can only enter integers. The plugin provides pretty basic styling, but it is easy enough to add your own styles. I am using Twitter Bootstrap so I just need to add the highlight and unhighlight functions (as in the code above). The &lt;code&gt;highlight&lt;/code&gt; function is called when a validation error occurs, and I add the Twitter Bootstrap &lt;code&gt;has-error&lt;/code&gt; CSS class to that control's form group. The &lt;code&gt;unhighlight&lt;/code&gt; function is called when the user corrects the error, and that simply removes the CSS class.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/learning-angularjs-adder-subtractor-validation.png" alt="JavaScript calculator" /&gt;&lt;/p&gt;

&lt;h2&gt;Data Binding&lt;/h2&gt;

&lt;p&gt;One of the things I'm looking forward to with Angular is its two way data binding. With plain old JavaScript though, there are a lot of options for reading and writing form field data and it's hard to know which is the most elegant. I'm only having to read data from the fields here but I still wanted to encapsulate this logic in one place. The first approach I took was to create a "class" that encapsulates all of the calculator logic in one place and is able to read the data from the form itself. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Calculator() {
    this.x = parseInt($("#inputX").val());
    this.y = parseInt($("#inputY").val());

    this.plus = function () {
        return this.x + this.y;
    };
    this.minus = function () {
        return this.x - this.y;
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don't really like it though, to be honest. While it does hide away the reading of data, it is too tightly bound to the UI and that would seem to make it a real pain to test. So, instead I have gone for a plain old class that receives its parameters in the constructor. This would be very easy to test - just pass in the data, call the method I'm interested in, and inspect the result. The app can create the calculator with a  factory function, &lt;code&gt;createCalculator()&lt;/code&gt;, which provides sufficient encapsulation for the reading of the form data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Calculator(x, y) {
    this.x = x;
    this.y = y;
    this.plus = function () {
        return x + y;
    };
    this.minus = function () {
        return x - y;
    };
}

function createCalculator() {
    var x = parseInt($("#inputX").val());
    var y = parseInt($("#inputY").val());
    return new Calculator(x, y);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Event Handling&lt;/h2&gt;

&lt;p&gt;In my first pass, I just coded the plus and minus button clicks separately. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$("#plus").click(function (event) {
    if (("#convertForm").valid()) {
        var calculator = createCalculator();
        var result = calculator.add();
        var message = "X plus Y is " + result;
        $("#result").text(message);
    }
});

$("#minus").click(function (event) {
    if (("#convertForm").valid()) {
        var calculator = createCalculator();
        var result = calculator.subtract();
        var message = "X minus Y is " + result;
        $("#result").text(message);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is pretty obvious duplication though. My first refactoring was just to move the common code into a calculate method and pass in the operation - "plus" or "minus".&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$("#plus").click(function (event) {
    calculate("plus");
});

$("#minus").click(function (event) {
    calculate("minus");
});

function calculate( operation) {
    if (("#convertForm").valid()) {
        var calculator = createCalculator();
        var result = calculator[operation]();
        var message = calculator.x + " " + operation + " " + calculator.y + " is " + result;
        $("#result").text(message);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The cool thing about JavaScript is that you can call methods on objects using bracket notation, as you can see with the call to &lt;code&gt;calculator[operation]()&lt;/code&gt; above. So, the same value can be used as a string in message, and as a function pointer. That's not something you can do in C#!&lt;/p&gt;

&lt;p&gt;There is still one more improvement to do though - at least one that I can see, there are probably more! :-) In JavaScript, I only need one event handler for all of the buttons. I can name each button the same as the operation ("plus" and "minus") and then retrieve that name value with &lt;code&gt;event.target.name&lt;/code&gt; to pass into the function as the operation parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$("button").on("click", function (event) {
    calculate(event.target.name);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I'm pretty happy with that, but please do let me know if there are better ways of doing things!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/learning-angularjs/</guid><link>http://www.michael-whelan.net/learning-angularjs/</link><author>mjmwdev@gmail.com</author><category>Learning</category><title>Learning AngularJS</title><description>&lt;p&gt;AngularJS seems to be getting a lot of momentum at the moment and I think it is going to be a really useful thing to know. We have several “meet up” groups for it here in London and I’ve noticed a lot more jobs requiring it. I am currently learning Angular through &lt;a href="http://www.thinkful.com/"&gt;Thinkful&lt;/a&gt;. I &lt;a href="http://www.michael-whelan.net/doing-fewd-with-thinkful/"&gt;blogged recently&lt;/a&gt; about the great experience I had with their Front-End Web Development course, and I'm already impressed with the depth of coverage of this course. It doesn’t just cover Angular, but also gets into testing – something I am a huge fan of – and build tools like Gulp and Bower.&lt;/p&gt;

&lt;p&gt;I normally blog about C# and things I have a lot of experience with but I thought it might be interesting to blog about AngularJS while I am learning it. All the code I write for the course will be on GitHub so why not try to learn in the open?&lt;/p&gt;

</description><pubDate>Thu, 19 Jun 2014 14:00:00 Z</pubDate><a10:updated>2014-06-19T14:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;AngularJS seems to be getting a lot of momentum at the moment and I think it is going to be a really useful thing to know. We have several “meet up” groups for it here in London and I’ve noticed a lot more jobs requiring it. I am currently learning Angular through &lt;a href="http://www.thinkful.com/"&gt;Thinkful&lt;/a&gt;. I &lt;a href="http://www.michael-whelan.net/doing-fewd-with-thinkful/"&gt;blogged recently&lt;/a&gt; about the great experience I had with their Front-End Web Development course, and I'm already impressed with the depth of coverage of this course. It doesn’t just cover Angular, but also gets into testing – something I am a huge fan of – and build tools like Gulp and Bower.&lt;/p&gt;

&lt;p&gt;I normally blog about C# and things I have a lot of experience with but I thought it might be interesting to blog about AngularJS while I am learning it. All the code I write for the course will be on GitHub so why not try to learn in the open?&lt;/p&gt;

&lt;!--excerpt--&gt; 

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/learning-angularjs-angular-logo.png" alt="AngularJS logo" /&gt;&lt;/p&gt;

&lt;h2&gt;Posts&lt;/h2&gt;

&lt;p&gt;This post will serve as the index for the series. I will update it each time I write a new post in the series.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.michael-whelan.net/a-javascript-calculator"&gt;First exercise: A JavaScript Calculator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.michael-whelan.net/learning-angularjs-data-binding"&gt;AngularJS Data Binding&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/moving-blog-to-snow/</guid><link>http://www.michael-whelan.net/moving-blog-to-snow/</link><author>mjmwdev@gmail.com</author><category>Snow</category><title>Moving my blog to Snow and GitHub Pages</title><description>&lt;p&gt;Most of my work has involved ASP.Net MVC and SQL Server, so it seemed natural to gravitate towards blogging platforms that used those technologies. Initially, I used &lt;a href="http://nblog.codeplex.com/"&gt;NBlog&lt;/a&gt;, which was a great little blogging engine, then I moved to &lt;a href="http://www.funnelweblog.com/"&gt;FunnelWeb&lt;/a&gt;, which seemed to have a larger community around it and was used by people I knew. My work has expanded a bit to other technologies, such as RavenDB and AngularJS, and I’ve become more open to the idea of using my blog to experiment with new technologies and approaches. I have noticed more and more people moving towards static site generators, and the simplicity really appealed . I also use Git and GitHub a lot more now and the idea of a blog publishing workflow involving Git makes a lot of sense to me. Add in GitHub Pages for free hosting and what could be better?&lt;/p&gt;

</description><pubDate>Fri, 13 Jun 2014 23:00:00 Z</pubDate><a10:updated>2014-06-13T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Most of my work has involved ASP.Net MVC and SQL Server, so it seemed natural to gravitate towards blogging platforms that used those technologies. Initially, I used &lt;a href="http://nblog.codeplex.com/"&gt;NBlog&lt;/a&gt;, which was a great little blogging engine, then I moved to &lt;a href="http://www.funnelweblog.com/"&gt;FunnelWeb&lt;/a&gt;, which seemed to have a larger community around it and was used by people I knew. My work has expanded a bit to other technologies, such as RavenDB and AngularJS, and I’ve become more open to the idea of using my blog to experiment with new technologies and approaches. I have noticed more and more people moving towards static site generators, and the simplicity really appealed . I also use Git and GitHub a lot more now and the idea of a blog publishing workflow involving Git makes a lot of sense to me. Add in GitHub Pages for free hosting and what could be better?&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/moving-to-snow-logo.png" alt="Snow" /&gt;&lt;/p&gt;

&lt;p&gt;When looking around for the right static site generator, I still felt more drawn to .Net-based solutions, so when I stumbled across &lt;a href="https://github.com/Sandra/Sandra.Snow"&gt;Sandra.Snow&lt;/a&gt; it seemed ideal. My fellow Kiwi &lt;a href="http://www.philliphaydon.com/"&gt;Phillip Haydon&lt;/a&gt; leads the project and has been amazingly responsive at answering my questions, even writing code to add my feature requests! Sandra.Snow is a Jekyll inspired static site generation tool that can be run locally, as a CAAS(Compiler as a Service) or setup with Azure to build your site when your repository changes. It is built on top of NancyFX, you can easily write your own themes in Razor, and it supports Git deployment. I am hosting it on GitHub Pages, though I am quite tempted to host it on Azure (after reading &lt;a href="http://blog.filipekberg.se/2014/05/21/goodbye-wordpress-hello-snow/"&gt;Filip Ekberg’s excellent post&lt;/a&gt; on using continuous delivery with GitHub and Azure with Snow).&lt;/p&gt;

&lt;p&gt;Snow uses markdown files for blog posts. I used markdown for both my NBlog and FunnelWeb blogs, so migration was pretty simple. My friend, &lt;a href="http://jake.ginnivan.net/"&gt;Jake Ginnivan&lt;/a&gt;, had put together a clever little &lt;a href="http://jake.ginnivan.net/blog/2014/01/06/blog-migration/"&gt;LinqPad utility&lt;/a&gt; for migrating posts and images from FunnelWeb SQL Server tables to Jekyll markdown files, and these worked well with Snow.&lt;/p&gt;

&lt;p&gt;I already have my comments hosted in Disqus, so coupled with simple markdown files for my blog posts/images, I feel like I’ve got a pretty flexible and portable solution.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/refactoring-kata/</guid><link>http://www.michael-whelan.net/refactoring-kata/</link><author>mjmwdev@gmail.com</author><category>Programming</category><title>Refactoring Kata</title><description>&lt;p&gt;I recently came across a &lt;a href="http://odetocode.com/Blogs/scott/archive/2012/04/09/a-refactoring-experiment.aspx"&gt;blog post&lt;/a&gt; from a couple of years ago where &lt;a href="https://twitter.com/OdeToCode"&gt;Scott Allen&lt;/a&gt; provided some gnarly code on GitHub as a refactoring kata exercise. Here is the background he provided in that post:&lt;/p&gt;

</description><pubDate>Fri, 13 Jun 2014 23:00:00 Z</pubDate><a10:updated>2014-06-13T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I recently came across a &lt;a href="http://odetocode.com/Blogs/scott/archive/2012/04/09/a-refactoring-experiment.aspx"&gt;blog post&lt;/a&gt; from a couple of years ago where &lt;a href="https://twitter.com/OdeToCode"&gt;Scott Allen&lt;/a&gt; provided some gnarly code on GitHub as a refactoring kata exercise. Here is the background he provided in that post:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;blockquote&gt;
  &lt;p&gt;The bad news is the code is hard to read. Some might say it's intentionally obfuscated, but let's not assume malice right away.&lt;/p&gt;
  
  &lt;p&gt;The good news is there are six working unit tests for the code.&lt;/p&gt;
  
  &lt;p&gt;There are two goals to the exercise. One goal is to give developers an opportunity to practice refactoring (a Kata, if you will). The way I'd attack the code is to start with some renaming operations, then extract some methods, then perhaps break down the one big class or eliminate a switch statement using patterns. There is no perfect answer.&lt;/p&gt;
  
  &lt;p&gt;The larger goal is to convince anyone not entirely sold on the benefit of automated tests how tests can empower them to work with, experiment with, and change existing code - even code they don't completely understand. Although this code was intentionally obfuscated, it's not unlike walking into the code for a complex domain the first time and not understanding why a wurgled customer can blargsmack on Tuesdays if they hold a vorkenhosen status. All domains are nonsense at the start.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With one eye on Holland's 5-1 thrashing of Spain in the World Cup, I thought this might be quite an interesting exercise to try. I'm mindful that this could be quite a difficult post to read if I put too much code in, so I will try to limit my discussion to a few key points. The code will be on &lt;a href="https://github.com/mwhelan/OdeToCode-Katas"&gt;GitHub&lt;/a&gt; if you are interested enough to explore it further.&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;There are four classes. Here is the main one, named Finder, which gives us the first clue that this is a searching algorithm. The code provides very few clues as to what it is doing though. Variable names, in particular, do seem to almost be intentionally obfuscated. The other 3 classes, are F, FT, and Thing! There is a nested loop, with those famous loop variables i and j, and it finishes up with a switch statement. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Finder
{
    private readonly List&amp;lt;Thing&amp;gt; _p;

    public Finder(List&amp;lt;Thing&amp;gt; p)
    {
        _p = p;
    }

    public F Find(FT ft)
    {
        var tr = new List&amp;lt;F&amp;gt;();

        for(var i = 0; i &amp;lt; _p.Count - 1; i++)
        {
            for(var j = i + 1; j &amp;lt; _p.Count; j++)
            {
                var r = new F();
                if(_p[i].BirthDate &amp;lt; _p[j].BirthDate)
                {
                    r.P1 = _p[i];
                    r.P2 = _p[j];
                }
                else
                {
                    r.P1 = _p[j];
                    r.P2 = _p[i];
                }
                r.D = r.P2.BirthDate - r.P1.BirthDate;
                tr.Add(r);
            }
        }

        if(tr.Count &amp;lt; 1)
        {
            return new F();
        }

        F answer = tr[0];
        foreach(var result in tr)
        {
            switch(ft)
            {
                case FT.One:
                    if(result.D &amp;lt; answer.D)
                    {
                        answer = result;
                    }
                    break;

                case FT.Two:
                    if(result.D &amp;gt; answer.D)
                    {
                        answer = result;
                    }
                    break;
            }
        }

        return answer;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Renaming classes, methods and variables&lt;/h2&gt;

&lt;p&gt;So, the first goal of the refactoring was to play detective and try to figure out what each variable and class did and then provide it with a meaningful name that added clarity. I eventually concluded that the algorithm was trying to find the combinations of two people, from a given collection of people, that were either closest in age or furthest apart in age. I definitely could be wrong on that though! Here is the model I came up with:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/refactoring-kata-class-diagram.png" alt="refactored class diagram" /&gt;&lt;/p&gt;

&lt;p&gt;It turns out a Thing is a Person! A Combination is returned from the Find method and consists of a pair of people and their age difference. AgeDifference is an enum that is passed to the Find method and specifies whether the search should be for the pair with the closest ages or the furthest apart ages.&lt;/p&gt;

&lt;h2&gt;Newspaper Headlines&lt;/h2&gt;

&lt;p&gt;When I come across one big method like this Find method, the first refactoring I like to do is to break its logic down into steps, and then put each step into its own method. Each method should have a meaningful name that explains what it does. Then when you read it, each method call is like a newspaper headline. If you want to know more, you navigate to that method, just as you would with a newspaper story.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Finder
{
    private readonly List&amp;lt;Person&amp;gt; _people;

    public Finder(List&amp;lt;Person&amp;gt; people)
    {
        _people = people;
    }

    public Combination FindCombinationWith(IAgeStrategy ageStrategy)
    {
        var candidates = GetPossibleCombinations();
        return ChooseBestCombinationFrom(candidates, ageStrategy);
    }

    private Combination ChooseBestCombinationFrom(List&amp;lt;Combination&amp;gt; candidates, IAgeStrategy ageStrategy) {...}

    private List&amp;lt;Combination&amp;gt; GetPossibleCombinations() {...}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, hopefully, it should be very clear to anyone reading the code for the first time exactly what is happening.&lt;/p&gt;

&lt;h2&gt;Search Strategy&lt;/h2&gt;

&lt;p&gt;The switch statement checks the value of the enum passed in and uses different logic to compare two combinations. This problem is better solved with the strategy pattern. The consumer of the class can pass in a strategy class that actually performs the matching logic, which is much more extensible for adding new strategies in the future:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface IAgeStrategy
{
    bool IsMatch(Combination first, Combination second);
}

public class ClosestAgeStrategy : IAgeStrategy
{
    public bool IsMatch(Combination first, Combination second)
    {
        return first.DifferenceInAge &amp;lt; second.DifferenceInAge;
    }
}

public class FurtherAgeStrategy : IAgeStrategy
{
    public bool IsMatch(Combination first, Combination second)
    {
        return first.DifferenceInAge &amp;gt; second.DifferenceInAge;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I learned something interesting doing this exercise too. Because I was constantly running the tests after each refactor, I was trying to take small steps without jumping ahead and breaking everything. This led me to replace the enum with a factory class that had the same signature, and prevented all the tests from breaking. So, this enum:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public enum AgeDifference
{
    Closest,
    Furthest
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;became this factory class, generating each strategy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class AgeDifference
{
    public static IAgeStrategy Closest
    {
        get
        {
            return new ClosestAgeStrategy();
        }
    }

    public static IAgeStrategy Furthest
    {
        get
        {
            return new FurtherAgeStrategy();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I would normally have just let each consumer of the class pass &lt;code&gt;new FurtherAgeStrategy()&lt;/code&gt; in for the method parameter, and would not have considered writing a factory. I'm not sure that a factory is warranted here, but it was interesting to discover the design opportunity during this refactoring, protected by a solid suite of tests.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I am a big fan of tests and the confidence they give you in refactoring. I was not in the target audience who needed convincing of this fact. But this sort of kata is interesting and useful to do. Thanks to Scott Allen for providing it!&lt;/p&gt;

&lt;p&gt;I also refactored the tests a bit, to remove duplication. I won't bother to go into that here though. It's in the source code in my &lt;a href="https://github.com/mwhelan/OdeToCode-Katas"&gt;GitHub repo&lt;/a&gt; if you want to see it.&lt;/p&gt;

&lt;p&gt;I think there's still quite a bit more refactoring to do. Any suggestions are welcome!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/export-sql-to-azure/</guid><link>http://www.michael-whelan.net/export-sql-to-azure/</link><author>mjmwdev@gmail.com</author><category>Azure</category><title>Exporting a SQL Server Database to SQL Azure</title><description>&lt;p&gt;Yesterday I was having a problem with Entity Framework Code First Migrations when publishing my website/database to Azure Websites/SQL Azure. Solving the database publishing problem felt like &lt;a href="http://www.hanselman.com/blog/YakShavingDefinedIllGetThatDoneAsSoonAsIShaveThisYak.aspx"&gt;yak shaving&lt;/a&gt; so, in the interest of pragmatism and getting back to the task at hand, I decided to just migrate my local SQL Server 14 LocalDb instance to Azure using SQL Server 2014 Management Studio (SSMS). &lt;/p&gt;

</description><pubDate>Mon, 09 Jun 2014 23:00:00 Z</pubDate><a10:updated>2014-06-09T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Yesterday I was having a problem with Entity Framework Code First Migrations when publishing my website/database to Azure Websites/SQL Azure. Solving the database publishing problem felt like &lt;a href="http://www.hanselman.com/blog/YakShavingDefinedIllGetThatDoneAsSoonAsIShaveThisYak.aspx"&gt;yak shaving&lt;/a&gt; so, in the interest of pragmatism and getting back to the task at hand, I decided to just migrate my local SQL Server 14 LocalDb instance to Azure using SQL Server 2014 Management Studio (SSMS). &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;The process is pretty straight forward – generate a script for the local database schema and data and then run that script against the SQL Azure database. When I did the process the first time though, I got the following error when trying to run the script against the SQL Azure database.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Msg 40514, Level 16, State 1, Line 10&lt;/p&gt;
  
  &lt;p&gt;'Filegroup reference and partitioning scheme' is not supported in this version of SQL Server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem is that SQL Azure databases only support a subset of T-SQL. According to &lt;a href="http://msdn.microsoft.com/library/azure/ee621790.aspx"&gt;this MSDN article&lt;/a&gt; you must modify the generated script to only include supported T-SQL statements. Thankfully, the Generate and Publish Scripts wizard in SSMS takes care of this for you.&lt;/p&gt;

&lt;h2&gt;Create a Script of the Database Schema and Data&lt;/h2&gt;

&lt;p&gt;In SSMS, just right click on the local database, select &lt;strong&gt;Tasks&lt;/strong&gt;, then &lt;strong&gt;Generate Scripts&lt;/strong&gt; to bring up the &lt;strong&gt;Generate and Publish Scripts&lt;/strong&gt; wizard.&lt;/p&gt;

&lt;p&gt;Then select &lt;strong&gt;Advanced&lt;/strong&gt; on the &lt;strong&gt;Set Scripting Options&lt;/strong&gt; page to bring up the &lt;strong&gt;Advanced Scripting Options&lt;/strong&gt; dialog. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/sql-export-scripting-options.png" alt="" /&gt; &lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Windows Azure SQL Database&lt;/strong&gt; from the &lt;strong&gt;Script for the database engine type&lt;/strong&gt; dropdown. &lt;/p&gt;

&lt;p&gt;You should also select &lt;strong&gt;Schema and data&lt;/strong&gt; from the &lt;strong&gt;Types of data to script&lt;/strong&gt; dropdown.&lt;/p&gt;

&lt;p&gt;Now if you connect to your SQL Azure database through Management Studio you can run this script to copy all of the tables and data from your local database to your SQL Azure one.&lt;/p&gt;

&lt;h2&gt;Running the Script&lt;/h2&gt;

&lt;p&gt;There are several ways to run the script against the SQL Azure database. From SSMS or SQL Server Object Explorer in Visual Studio, just connect to the server using your SQL Server username and password and paste it into the query window and run it. &lt;/p&gt;

&lt;p&gt;A more interesting way is to run it in your web browser from the Azure Management Portal - SQL Database window. You can access this directly by its URL, which you can find on the Server Dashboard in the SQL Database screen of the Azure Management Portal. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/sql-export-management-portal.png" alt="" /&gt; &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/doing-fewd-with-thinkful/</guid><link>http://www.michael-whelan.net/doing-fewd-with-thinkful/</link><author>mjmwdev@gmail.com</author><category>Learning</category><title>Doing Front-End Web Development with Thinkful</title><description>&lt;p&gt;I have been a contract programmer in London for 18 years. What I love most about contracting work is the flexibility it gives me. Sometimes I will finish one contract on a Friday and start the next one on the following Monday. Other times I might take a few months off to visit New Zealand with my wife (we both grew up in New Zealand and all our family are there) or do some other travelling. On a couple of occasions I’ve taken even longer “sabbatical” breaks. They have given me a chance to get away from work altogether and focus on other things. I call them sabbatical breaks because invariably I find myself keen to do some sort of personal development, like get Microsoft Certification, or learn a new technology. &lt;/p&gt;

</description><pubDate>Wed, 04 Jun 2014 23:00:00 Z</pubDate><a10:updated>2014-06-04T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I have been a contract programmer in London for 18 years. What I love most about contracting work is the flexibility it gives me. Sometimes I will finish one contract on a Friday and start the next one on the following Monday. Other times I might take a few months off to visit New Zealand with my wife (we both grew up in New Zealand and all our family are there) or do some other travelling. On a couple of occasions I’ve taken even longer “sabbatical” breaks. They have given me a chance to get away from work altogether and focus on other things. I call them sabbatical breaks because invariably I find myself keen to do some sort of personal development, like get Microsoft Certification, or learn a new technology. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I am just drawing near the end of a sabbatical now, and the thing I am really interested in is AngularJS. Although I’ve been an ASP.Net developer since .Net came out (around the year 2000) I didn’t really appreciate how much it is a “back-end” technology, and that there is a whole other world of “front-end” web development once you start looking. I highly recommend Joe Eames’ Pluralsight course, &lt;a href="http://pluralsight.com/training/Courses/TableOfContents/front-end-web-development-get-started"&gt;Front-End Web Development: Get Started&lt;/a&gt;, to understand the difference between the two. In it, he describes the things he would have liked to have been told when he started the move from back-end to front-end. &lt;/p&gt;

&lt;h2&gt;Thinkful Front-End Web Development Course&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/doing-fewd-with-thinkfu-logo.jpg" alt="thinkful logo" /&gt;&lt;/p&gt;

&lt;p&gt;I decided that before I looked at Angular I should focus on the front-end. My goal was not to become a front-end web developer, but to gain more skills to complement my existing ones. &lt;a href="https://www.thinkful.com/"&gt;Thinkful&lt;/a&gt; provide a course focusing on HTML, CSS, JavaScript, jQuery, Ajax, JSON and Git, which seemed just the thing. Thinkful is one of a host of new online training companies that have been springing up recently. The Thinkful website says that they are &lt;em&gt;"on a mission to reinvent education"&lt;/em&gt; and they are definitely worth checking out. I got a lot more from the course than I expected and I would highly recommend Thinkful to anybody wanting to build their technical skills.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Thinkful method of online teaching&lt;/strong&gt; emphasises practical, sustainable skills. There is a heavy emphasis on project work and you complete 8 separate projects during the course, as well as several other practical programming tasks (including a Street Fighter game which is great for whetting your aspiration for what is possible with JavaScript). You have to have a GitHub account to host your source code and sites online. I use Git a lot in my open source projects and it is great to see Git included in this course. Git and GitHub are becoming essential skills these days. The last project you do is a portfolio of all your work. You can see &lt;a href="http://www.michael-whelan.net/thinkful-fewd/"&gt;my course portfolio here&lt;/a&gt;. I wasn’t too impressed with my first project – a rather rudimentary HTML resume - but looking back now I feel better about it as I think it highlights the progress I made. :-)&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Thinkful course has four units of work&lt;/strong&gt; that you can complete at your own pace and is designed so that you can do the four units in three months of part-time work outside your normal job hours. As I am not working right now, I found it quite motivating to do one unit per week and completed the course in a month. Having a course structure, projects to build, and deadlines to meet, is really useful to keep you focussed. You use Google Hangouts to &lt;strong&gt;meet up with your own mentor once a week&lt;/strong&gt;, so the weekly cadence was very effective. I really enjoyed my meet ups with my mentor Justin. He had a lot of real world front-end web development experience and was a mine full of great information, both with feedback about my own project work and other related topics. Justin was based in Florida and I think it’s great that this sort of technology breaks down geographic barriers and that I can get one-on-one mentoring from my apartment in London.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Thinkful curriculum&lt;/strong&gt; mixes the best free and paid sources available online with their own content. Again, the emphasis is on practice over theory and so is structured for you to learn just enough basic theory to start applying your knowledge in projects. The idea of paying for free resources on the net seems to be pretty crazy, right? To me though, this touches on the key benefit of what Thinkful offer, and why I am more than happy to pay the fee. &lt;strong&gt;Thinkful curate their content&lt;/strong&gt; to find the best content that will get you to your goal the fastest. I have spent my whole career constantly learning new technologies and know that the hardest thing is not finding resources – especially these days when the number of resources is vast and can be quite overwhelming – but in working out what to learn (you don’t know what you don’t know) and filtering through all of the different resources to put together your own curriculum. While you can certainly develop your own learning curation skills (John Sonmez actually has a great &lt;a href="http://10stepstolearn.com/"&gt;course on this&lt;/a&gt;) it is a valuable commodity to have provided for you which can save you a lot of time and wrong paths. &lt;/p&gt;

&lt;p&gt;As well as mentors, Thinkful also have a &lt;strong&gt;Google+ community&lt;/strong&gt; where all of the course members can meet to discuss the course and find answers to problems they are trying to solve. This community includes all the mentors and I found feedback on my projects and answers to my questions to be very responsive.&lt;/p&gt;

&lt;h2&gt;Tools&lt;/h2&gt;

&lt;p&gt;The recommended tools for the course are Sublime Text 3 and Chrome. I was keen to try &lt;strong&gt;Sublime Text&lt;/strong&gt; because I had heard good things about it and it is interesting to see alternatives to Visual Studio. I found it really good in a lot of ways. When you are creating small projects with a few files it felt quite nice and lightweight. &lt;/p&gt;

&lt;p&gt;As the course wore on I decided to try &lt;strong&gt;JetBrains WebStorm&lt;/strong&gt;, another popular Visual Studio alternative. WebStorm is a dedicated front-end development IDE, with built-in support for AngularJS and Grunt and Bower integration, and even support for Git.  There’s a lot to like about WebStorm and I could see myself using it quite happily for front-end web development if necessary. There are a lot more features I didn’t tap into and it’s a credible alternative to Visual Studio. However, as a long term Visual Studio user, and with some fantastic front-end support being added recently to Visual Studio and the &lt;a href="http://vswebessentials.com/"&gt;Web Essentials&lt;/a&gt; extension, Visual Studio is still my IDE of choice.&lt;/p&gt;

&lt;p&gt;At first, I steered clear of &lt;strong&gt;Twitter Bootstrap&lt;/strong&gt; as I felt it was an important part of the course to write all of the CSS myself. As the emphasis of the projects moved into the programming side, I decided to start incorporating Twitter Bootstrap into my projects. This is something that I am very likely to use in real world projects, and another string I wanted to add to my bow. I think this shows another benefit of the flexibility of a course like the Thinkful one. Each person comes to the course with a different background and with different objectives and it makes sense to me to make the experience as close to my real world projects as I can. Certainly, it was an ideal time to take a look at Twitter Bootstrap when I was already focussing on CSS and JavaScript.&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;p&gt;Like I said, front-end web development is a whole other world, so I needed to start plugging into some additional resources. &lt;/p&gt;

&lt;h3&gt;Podcasts&lt;/h3&gt;

&lt;p&gt;I listen to a lot of technical podcasts - at 1.5x speed for maximum productivity! :-) I’ve found a couple of great new front-end podcasts. I’m still struggling with the new vocabulary of this world, but things make more sense the more you listen:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://javascriptjabber.com/"&gt;JavaScript Jabber&lt;/a&gt;: Has guests on from different open source JavaScript projects so lots to learn. Several regular hosts too, including Joe Eames, whose &lt;a href="http://pluralsight.com/training/Authors/Details/joe-eames"&gt;Pluralsight courses&lt;/a&gt; on front-end web development I have found particularly useful:&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shoptalkshow.com/"&gt;Shop Talk Show&lt;/a&gt;: Have a few guests on, but less than JavaScript Jabber. Often have Rapid Fire episodes, where they just answer listeners’ questions. Again, really insightful into the front-end world.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shoptalkshow.com/"&gt;YapCast&lt;/a&gt;: Actually, Jesse Liberty’s YapCast is one of my old faithful podcasts that I was already listening to. Recently though, Jesse has had a lot of interest in AngularJS and other front-end topics and some great guests from the .Net community discussing these topics. John Papa has recently joined as a regular co-host and he has some excellent &lt;a href="http://pluralsight.com/training/Authors/Details/john-papa"&gt;Single Page Application courses on Pluralsight&lt;/a&gt;, including some with AngularJS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Newsletters&lt;/h3&gt;

&lt;p&gt;If weekly email newsletters is more your thing, these newsletters give links to interesting topics in the world of front-end web development:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://html5weekly.com/"&gt;HTML 5 Weekly&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://javascriptweekly.com/"&gt;JavaScript Weekly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://css-weekly.com/"&gt;CSS Weekly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nodeweekly.com/"&gt;Node Weekly&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Where to Next?&lt;/h2&gt;

&lt;p&gt;This course is a great introduction to front-end web development and from what I can see a lot of former students move on to junior level front-end roles. For me personally, I think it is great preparation to start looking at skills that are complementary to my server-side background, such as AngularJS and other Single Page Application solutions. I think it would be great to do a role with ASP.Net MVC or Web API on the back-end and AngularJS on the front-end, for instance. Either way, I plan to do the new Thinkful AngularJS course, which is designed to pick up where this course left off.&lt;/p&gt;

&lt;h2&gt;Update (14 June, 2014)&lt;/h2&gt;

&lt;p&gt;Thinkful provide an &lt;a href="http://www.thinkful.com/student/michael-whelan/certificates/front-end-web-development"&gt;online certificate&lt;/a&gt; to course graduates.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/automated-ui-testing-done-right/</guid><link>http://www.michael-whelan.net/automated-ui-testing-done-right/</link><author>mjmwdev@gmail.com</author><category>Seleno</category><category>TestStack</category><title>Automated UI Testing Done Right</title><description>&lt;p&gt;It's coming up to a year since Mehdi Khalili and I started the &lt;a href="http://teststack.net/pages/Seleno.html"&gt;Seleno&lt;/a&gt; open source project, a framework to help you write automated web UI tests in the "right way."&lt;/p&gt;

&lt;p&gt;About that time, Mehdi presented a session at DDD Sydney 2012 titled "&lt;a href="http://lanyrd.com/2012/dddsydney/strqy/"&gt;Automated UI Testing Done Right!&lt;/a&gt;" In it, he shared a lot of the ideas that have gone into Seleno. Mehdi is a great teacher and his strength is taking complex topics and explaining them in a way that is simple and easy to understand. The video of the presentation has recently been published on the SSW TV website and I highly recommend that you &lt;a href="http://tv.ssw.com/3444/ddd-sydney-2012-mehdi-khalili-automated-ui-testing-done-right"&gt;check it out&lt;/a&gt;. You can also see the slides from the talk &lt;a href="http://www.slideshare.net/MehdiKhalili/automated-ui-testing-done-right-13493067"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description><pubDate>Wed, 05 Jun 2013 23:00:00 Z</pubDate><a10:updated>2013-06-05T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;It's coming up to a year since Mehdi Khalili and I started the &lt;a href="http://teststack.net/pages/Seleno.html"&gt;Seleno&lt;/a&gt; open source project, a framework to help you write automated web UI tests in the "right way."&lt;/p&gt;

&lt;p&gt;About that time, Mehdi presented a session at DDD Sydney 2012 titled "&lt;a href="http://lanyrd.com/2012/dddsydney/strqy/"&gt;Automated UI Testing Done Right!&lt;/a&gt;" In it, he shared a lot of the ideas that have gone into Seleno. Mehdi is a great teacher and his strength is taking complex topics and explaining them in a way that is simple and easy to understand. The video of the presentation has recently been published on the SSW TV website and I highly recommend that you &lt;a href="http://tv.ssw.com/3444/ddd-sydney-2012-mehdi-khalili-automated-ui-testing-done-right"&gt;check it out&lt;/a&gt;. You can also see the slides from the talk &lt;a href="http://www.slideshare.net/MehdiKhalili/automated-ui-testing-done-right-13493067"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;It's coming up to a year since Mehdi Khalili and I started the &lt;a href="http://teststack.net/pages/Seleno.html"&gt;Seleno&lt;/a&gt; open source project, a framework to help you write automated web UI tests in the "right way."&lt;/p&gt;

&lt;p&gt;About that time, Mehdi presented a session at DDD Sydney 2012 titled "&lt;a href="http://lanyrd.com/2012/dddsydney/strqy/"&gt;Automated UI Testing Done Right!&lt;/a&gt;" In it, he shared a lot of the ideas that have gone into Seleno. Mehdi is a great teacher and his strength is taking complex topics and explaining them in a way that is simple and easy to understand. The video of the presentation has recently been published on the SSW TV website and I highly recommend that you &lt;a href="http://tv.ssw.com/3444/ddd-sydney-2012-mehdi-khalili-automated-ui-testing-done-right"&gt;check it out&lt;/a&gt;. You can also see the slides from the talk &lt;a href="http://www.slideshare.net/MehdiKhalili/automated-ui-testing-done-right-13493067"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the video, Mehdi talks about some of the patterns that you can use to improve the maintainability of your UI tests. He starts off with this horribly brittle test&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// much of the code has been removed for brevity
public void Can_buy_an_Album_when_registered()
{
    _driver.Navigate().GoToUrl(Application.HomePage.Url);
    _driver.FindElement(By.LinkText("Disco")).Click();
    _driver.FindElement(By.CssSelector("img[alt=\"Le Freak\"]")).Click();
    _driver.FindElement(By.LinkText("Add to cart")).Click();
    _driver.FindElement(By.LinkText("Checkout &amp;gt;&amp;gt;")).Click();
    _driver.FindElement(By.Id("FirstName")).Clear();
    _driver.FindElement(By.Id("FirstName")).SendKeys("Homer");
    _driver.FindElement(By.Id("LastName")).Clear();
    _driver.FindElement(By.Id("LastName")).SendKeys("Simpson");
    _driver.FindElement(By.Id("Address")).Clear();
    _driver.FindElement(By.Id("Address")).SendKeys("742 Evergreen Terrace");
    _driver.FindElement(By.Id("City")).Clear();
    _driver.FindElement(By.Id("City")).SendKeys("Springfield");
    _driver.FindElement(By.Id("State")).Clear();
    _driver.FindElement(By.Id("State")).SendKeys("Kentucky");
    _driver.FindElement(By.Id("Email")).Clear();
    _driver.FindElement(By.Id("Email")).SendKeys("chunkylover53@aol.com");
    _driver.FindElement(By.Id("PromoCode")).Clear();
    _driver.FindElement(By.Id("PromoCode")).SendKeys("FREE");
    _driver.FindElement(By.CssSelector("input[type=\"submit\"]")).Click();

    Assert.IsTrue(_driver.PageSource.Contains("Checkout Complete"));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and evolves it into this more maintainable test in three steps:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Can_buy_an_Album_when_registered()
{
    var orderedPage = Application
        .HomePage
        .Menu
        .GoToAdminForAnonymousUser()
        .GoToRegisterPage()
        .CreateValidUser(ObjectMother.ValidUser)
        .GenreMenu
        .SelectGenreByName("Disco")
        .SelectAlbumByName("Le Freak")
        .AddAlbumToCart()
        .Checkout()
        .SubmitShippingInfo(ObjectMother.ShippingInfo, "Free");

    orderedPage.Title.Should().Be("Checkout Complete");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although Mehdi uses Seleno, BDDfy and Selenium in the talk, it is worth noting that the ideas, patterns and tips are not related to any particular testing frameworks. The samples used are taken directly from the &lt;a href="https://github.com/TestStack/TestStack.Seleno/tree/master/src/Samples/MusicStore"&gt;Seleno samples code&lt;/a&gt; though, so I would encourage you to check out Seleno (and &lt;a href="http://teststack.net/pages/BDDfy.html"&gt;BDDfy&lt;/a&gt;) if you like the ideas presented in the talk. The samples are structured in a way to make it easy to read and follow and you should be able to easily compare the steps to see how each step improves the tests.&lt;/p&gt;

&lt;p&gt;I intend to blog more about Seleno soon, but in the meantime you might also find these posts helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.michael-whelan.net/getting-started-with-seleno"&gt;Getting started with Seleno&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.michael-whelan.net/seleno-04/"&gt;Seleno 0.4 Released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any ideas, comments, feedback and suggestions about Seleno and BDDfy are welcome.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/using-bddfy-for-unit-tests/</guid><link>http://www.michael-whelan.net/using-bddfy-for-unit-tests/</link><author>mjmwdev@gmail.com</author><category>BDDfy</category><category>TestStack</category><title>BDDfy In Action: Using BDDfy for Unit Tests</title><description>&lt;p&gt;I’ve been using BDDfy with NUnit for writing acceptance tests for quite awhile now. But for unit testing I have continued to use mspec with &lt;a href="https://github.com/machine/machine.fakes"&gt;machine fakes&lt;/a&gt; and Moq for auto-mocking. The more I used BDDfy, the more I liked it, and the less I liked the context switch into another framework. I found myself wanting to write unit tests in the Given When Then format and didn't like having to maintain two sets of helper code for NUnit and mspec. I loved the reporting in BDDfy and started to think it would be pretty cool to have similar reporting for my unit tests. Basically, I wanted a consistent experience across all my automated testing.&lt;/p&gt;
</description><pubDate>Fri, 31 May 2013 23:00:00 Z</pubDate><a10:updated>2013-05-31T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;strong&gt;This article is part of the &lt;a href="http://www.michael-whelan.net/bddfy-in-action/"&gt;BDDfy In Action&lt;/a&gt; series.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’ve been using BDDfy with NUnit for writing acceptance tests for quite awhile now. But for unit testing I have continued to use mspec with &lt;a href="https://github.com/machine/machine.fakes"&gt;machine fakes&lt;/a&gt; and Moq for auto-mocking. The more I used BDDfy, the more I liked it, and the less I liked the context switch into another framework. I found myself wanting to write unit tests in the Given When Then format and didn't like having to maintain two sets of helper code for NUnit and mspec. I loved the reporting in BDDfy and started to think it would be pretty cool to have similar reporting for my unit tests. Basically, I wanted a consistent experience across all my automated testing.&lt;/p&gt;

&lt;p&gt;MSpec uses the &lt;a href="http://xunitpatterns.com/Testcase%20Class%20per%20Fixture.html"&gt;testcase class per fixture&lt;/a&gt; style of testing, which is how I use BDDfy for acceptance testing, so it makes sense to continue with that style for the BDDfy unit tests. When I am doing acceptance tests I have a base ScenarioFor&amp;lt; T&gt; class, where the T represents the System Under Test (SUT). Because these are full system tests, I resolve this SUT using the same inversion of control container that my application uses, which works nicely. The IoC container acts as a &lt;a href="http://blog.ploeh.dk/2009/02/13/SUTFactory/"&gt;SUT factory&lt;/a&gt;. With unit tests, I also want to have a SUT factory, but instead I want it to be an auto-mocking container.&lt;/p&gt;

&lt;p&gt;When we started writing unit tests for the &lt;a href="http://teststack.net/pages/Seleno.html"&gt;Seleno&lt;/a&gt; project, I thought it would be a good opportunity to try some of these ideas out.&lt;/p&gt;

&lt;h2&gt;Specification Base Fixture&lt;/h2&gt;

&lt;p&gt;The Specification base fixture class wires up BDDFy. It provides methods that BDDfy knows about in its default configuration for setting up and tearing down the fixture (each test class will implement its own specific Given When Then methods that BDDfy will also find). The Run method has the NUnit Test attribute and so will be called by the testing framework and it just calls BDDFy to run the test. I prefer to use NUnit myself, but you could just as easily substitute XUnit or MsTest attributes if you prefer. One thing I really like about this approach is that I only have to put the TestFixture and Test attributes in this one class and then all of the test classes I create inherit them and don't need any attributes. All the test runners still picks the classes up as tests and ReSharper even puts its little run test icons in each test class as normal. This class is also the one place that BDDfy gets called. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[TestFixture]
public abstract class Specification : ISpecification
{
    [Test]
    public virtual void Run()
    {
        string title = BuildTitle();
        this.BDDfy(title, Category);
    }

    protected virtual string BuildTitle()
    {
        return Title ?? GetType().Name.Humanize(LetterCasing.Title);
    }

    // BDDfy methods
    public virtual void EstablishContext() { }
    public virtual void Setup() { }
    public virtual void TearDown() { }

    public virtual Type Story { get { return GetType(); } }
    public virtual string Title { get; set; }
    public string Category { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Auto-Mocking&lt;/h2&gt;

&lt;p&gt;The SpecificationFor&lt;T&gt; class inherits from the Specification class and adds an auto-mocking container for creating the SUT. An auto-mocking container decouples a unit test from the mechanics of creating the SUT and automatically supplies dynamic mocks in place of all of the SUT's dependencies. They are commonly implemented by combining an IoC container with a mocking framework, which is what I will be doing here. I prefer &lt;a href="http://nsubstitute.github.io/"&gt;NSubstitute&lt;/a&gt; for mocking these days, so my friend &lt;a href="http://robdmoore.id.au/"&gt;Rob Moore's&lt;/a&gt; &lt;a href="http://www.nuget.org/packages/AutofacContrib.NSubstitute/"&gt;AutoSubstitute&lt;/a&gt; auto-mocking container is ideal.&lt;/p&gt;

&lt;p&gt;The AutoSubstitute field provides access to the container for full access to its functionality. SubstituteFor is provided as a convenience method to gain access to NSubstitute substitutes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public abstract class SpecificationFor&amp;lt;T&amp;gt; : Specification
{
    public T SUT { get; set; }
    protected AutoSubstitute AutoSubstitute;

    protected SpecificationFor()
    {
        AutoSubstitute = CreateContainer();
        InitialiseSystemUnderTest();
    }

    public virtual void InitialiseSystemUnderTest()
    {
         SUT = AutoSubstitute.Resolve&amp;lt;T&amp;gt;();
    }

    public TSubstitute SubstituteFor&amp;lt;TSubstitute&amp;gt;() where TSubstitute : class
    {
        return AutoSubstitute.ResolveAndSubstituteFor&amp;lt;TSubstitute&amp;gt;();
    }

    public override Type Story
    {
        get { return typeof(T); }
    }

    private static AutoSubstitute CreateContainer()
    {
        Action&amp;lt;ContainerBuilder&amp;gt; autofacCustomisation = c =&amp;gt; c
            .RegisterType&amp;lt;T&amp;gt;()
            .FindConstructorsWith(t =&amp;gt;  t.GetConstructors(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance))
            .PropertiesAutowired();
        return new AutoSubstitute(autofacCustomisation);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the InitialiseSystemUnderTest is virtual, so if you need to create the SUT yourself rather than having AutoSubstitute do it then you can just override it in your test class. It runs before any of the test methods so they can all safely interact with the SUT confident that it has been created.&lt;/p&gt;

&lt;h2&gt;What's in a Story?&lt;/h2&gt;

&lt;p&gt;When moving from scenarios to unit tests I had to think what I wanted to do with the Story that is part of BDD. BDDfy actually doesn't require stories, so one option was to do nothing. However, when you don't have a story the report shows the namespace instead, and I don't find that particularly helpful or attractive. A Story's purpose in BDD is to group related Scenarios and to provide metadata about that grouping, so I think the same logic can be applied to unit tests. &lt;/p&gt;

&lt;p&gt;By creating a base specification class that related tests inherit from, they will all be grouped together on the report, and the name of that class will be used in the heading, much like a Story grouping would look like on a BDD report. This class is often a convenient place to create variables that are common to all of the test cases. So, for example, if you create a base class called PageNavigatorSpecification, the report grouping will read "Specifications For: Page Navigator." That is achieved by adding the following custom story metadata scanner.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class SpecStoryMetaDataScanner : IStoryMetaDataScanner
{
    public virtual StoryMetaData Scan(object testObject, Type explicityStoryType = null)
    {
        var specification = testObject as ISpecification;
        if (specification == null)
            return null;

        string specificationTitle = CreateSpecificationTitle(specification);
        var story = new StoryAttribute() {Title = specificationTitle};
        return new StoryMetaData(specification.Story, story);
    }

    private string CreateSpecificationTitle(ISpecification specification)
    {
        string suffix = "Specification";
        string title = specification.Story.Name;
        if (title.EndsWith(suffix))
            title = title.Remove(title.Length - suffix.Length, suffix.Length);
        return title;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is what the specifications look like in the BDDfy report:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-unit-test-report.png" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;Unit Testing&lt;/h2&gt;

&lt;p&gt;Here is an example of some tests that we have written for Seleno using this approach. Firstly, an example of a Specification class, the grouping class analagous to the BDDFy story that all the PageReader specification classes will inherit from. There is normally no need to override the Story as the SpecificationFor class will automatically convert the generic T into an English name. In this case though it will convert PageReader&amp;lt; TestViewModel&gt; into PageReader`, so it is a convenient hack to override the property with PageReaderSpecification which will more attractively produce "Page Reader" on the report.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;abstract class PageReaderSpecification : SpecificationFor&amp;lt;PageReader&amp;lt;TestViewModel&amp;gt;&amp;gt;
{
    public override Type Story
    {
        get { return typeof (PageReaderSpecification); }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each specification for the PageReader component inherits from the PageReaderSpecification. There are often no Given steps as the auto-mocking container has taken care of instantiating the SUT for you. It has also created a Substitute for the IExecutor dependency of the PageReader class and in the verification phase of the test you can just call SubstituteFor&amp;lt; IExecutor&gt; to call NSubstitute verification methods on the substitute.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class When_checking_an_element_exists_and_is_visible_with_property : PageReaderSpecification
{
    public When_checking_an_element_exists_and_is_visible_with_property()
    {
        SUT.ExistsAndIsVisible(x =&amp;gt; x.Item);
    }

    public void Then_it_should_execute_the_relevant_script_with_jquery_id_selector()
    {
        SubstituteFor&amp;lt;IExecutor&amp;gt;()
            .Received()
            .ScriptAndReturn&amp;lt;bool&amp;gt;("$(\"#Item\").is(':visible')");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This test shows that you can also setup Substitute behaviour in the setup phase of the test.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class When_getting_a_web_element_strongly_typed_text : PageReaderSpecification
{
    private DateTime _result;
    private readonly DateTime _the03rdOfJanuary2012At21h21 = new DateTime(2012, 01, 03, 21, 21, 00);

    [Given("Given a web element contains the text 03/01/2012 21:21")]
    public void Given_a_web_element_contains_the_text_03_01_2012_21_21()
    {
        SubstituteFor&amp;lt;IElementFinder&amp;gt;()
            .Element(Arg.Any&amp;lt;By&amp;gt;())
            .Returns(SubstituteFor&amp;lt;IWebElement&amp;gt;());

        SubstituteFor&amp;lt;IWebElement&amp;gt;().Text.Returns("03/01/2012 21:21");
    }

    public void When_getting_the_web_element_matching_a_view_model_property()
    {
        _result = SUT.TextAsType(viewModel =&amp;gt; viewModel.Modified);
    }

    public void Then_it_should_return_the_corresponding_typed_value_of_the_web_element_text()
    {
        _result.Should().Be(_the03rdOfJanuary2012At21h21);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Another approach&lt;/h2&gt;

&lt;p&gt;It's worth looking at another example of sharing a base context class. As I said above, it is not just for making the report work, it can be quite helpful to share context there. &lt;a href="http://trycatchfail.com/blog/"&gt;Matt Honeycutt&lt;/a&gt; has an interesting style for reusing context classes in his very cool &lt;a href="http://specsfor.com/"&gt;SpecsFor BDD framework&lt;/a&gt; that this approach also supports:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class given
{
    public abstract class the_command_is_valid : SpecificationFor&amp;lt;CommandProcessor&amp;gt;
    {
        protected void Given_the_command_is_valid()
        {
            SubFor&amp;lt;IValidateCommand&amp;lt;TestCommand&amp;gt;&amp;gt;().Validate(Arg.Any&amp;lt;TestCommand&amp;gt;()).Returns(new ExecutionResult(null));
            SubFor&amp;lt;IValidateCommandFactory&amp;gt;().ValidatorForCommand(Arg.Any&amp;lt;TestCommand&amp;gt;()).Returns(SubFor&amp;lt;IValidateCommand&amp;lt;TestCommand&amp;gt;&amp;gt;());
        }
    }
}

public class processing_a__valid_command : given.the_command_is_valid
{
    private TestCommand _command = new TestCommand();
    private ExecutionResult _result;

    public void when_processing_a_valid_command()
    {
        _result = SUT.Execute(_command);
    }

    public void Then_the_processor_should_find_the_validator_for_the_command()
    {
        SubFor&amp;lt;IValidateCommandFactory&amp;gt;().Received().ValidatorForCommand(_command);
    }

    public void AndThen_validate_the_command()
    {
        SubFor&amp;lt;IValidateCommand&amp;lt;TestCommand&amp;gt;&amp;gt;().Received().Validate(_command);
    }

    public void AndThen_the_processor_should_find_the_handler_for_the_command()
    {
        SubFor&amp;lt;IHandleCommandFactory&amp;gt;().Received().HandlerForCommand(_command);
    }

    public void AndThen_the_command_is_processed_successfully()
    {
        _result.IsSuccessful.Should().BeTrue();
    }

    public void AndThen_the_result_is_logged()
    {
        SubFor&amp;lt;ILog&amp;gt;().Received().Info(Arg.Any&amp;lt;string&amp;gt;());
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this comes out very nicely on the report:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-unit-test-report-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;You can find the code on &lt;a href="https://github.com/TestStack/TestStack.Seleno/tree/master/src/TestStack.Seleno.Tests/Specify"&gt;github&lt;/a&gt;. Please let me know what you think. It's still a work in progress...&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/roll-your-own-testing-framework-2/</guid><link>http://www.michael-whelan.net/roll-your-own-testing-framework-2/</link><author>mjmwdev@gmail.com</author><category>BDDfy</category><category>TestStack</category><title>BDDfy in Action: Roll your own testing framework (2)</title><description>&lt;p&gt;In the &lt;a href="http://www.michael-whelan.net/roll-your-own-testing-framework"&gt;last post&lt;/a&gt;, I did not implement the parallel testing requirement of my custom framework. This is just a brief follow up to show that feature. In the never ending quest for faster running tests, being able to run them in parallel can be a great way to speed things up.&lt;/p&gt;
</description><pubDate>Sun, 26 May 2013 23:00:00 Z</pubDate><a10:updated>2013-05-26T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;strong&gt;This article is part of the &lt;a href="http://www.michael-whelan.net/bddfy-in-action/"&gt;BDDfy In Action&lt;/a&gt; series.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;a href="http://www.michael-whelan.net/roll-your-own-testing-framework"&gt;last post&lt;/a&gt;, I did not implement the parallel testing requirement of my custom framework. This is just a brief follow up to show that feature. In the never ending quest for faster running tests, being able to run them in parallel can be a great way to speed things up. &lt;/p&gt;

&lt;h2&gt;Running the tests in parallel&lt;/h2&gt;

&lt;p&gt;The first problem I have to solve is to batch up the list of tests into smaller lists of a fixed size that can be run in parallel. I found an excellent extension method for that by David Boike &lt;a href="http://www.make-awesome.com/2010/08/batch-or-partition-a-collection-with-linq/"&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class Extensions
{
    public static IEnumerable&amp;lt;IEnumerable&amp;lt;T&amp;gt;&amp;gt; Batch&amp;lt;T&amp;gt;(this IEnumerable&amp;lt;T&amp;gt; collection, int batchSize)
    {
        List&amp;lt;T&amp;gt; nextbatch = new List&amp;lt;T&amp;gt;(batchSize);
        foreach (T item in collection)
        {
            nextbatch.Add(item);
            if (nextbatch.Count == batchSize)
            {
                yield return nextbatch;
                nextbatch = new List&amp;lt;T&amp;gt;(batchSize);
            }
        }
        if (nextbatch.Count &amp;gt; 0)
            yield return nextbatch;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I can add a method to the TestRunner that uses the Batch extension method to break the list of tests into batches that can be run using the &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.parallel.foreach.aspx"&gt;Parallel ForEach&lt;/a&gt; method. This is the parallel version of the standard, sequential foreach loop.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void RunTestsInParallel(int batchSize)
{
    List&amp;lt;ContextSpecification&amp;gt; theSpecs = GetSpecs();
    var batch = theSpecs.Batch(batchSize);

    Parallel.ForEach(batch, specs =&amp;gt; specs.Each(spec =&amp;gt; SafeRunSpec(spec)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be plugged into the Run method by adding an optional batch size parameter, which allows the existing code to work as it is and for tests to run in parallel by passing a batchSize value of more than zero into the Run method. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class TestRunner
{
    public void Run(int batchSize = 0)
    {
        if (batchSize == 0)
        {
            RunTestsSequentially();
        }
        else
        {
            RunTestsInParallel(batchSize);
        }
        RunBatchProcessors();
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Batch Console Reporter&lt;/h2&gt;

&lt;p&gt;There is one problem with this code though. The parallel nature of the loop means that multiple iterations may be executing at the same time and, as might be expected, the normal console report becomes quite jumbled.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-console-parallel-broken.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The solution is to run the console report after all of the tests have completed. This can be achieved by creating a new Console Reporter as a Batch Processor rather than a Processor. The Processor runs as each test is being executed and allows you to build up the report, whereas a Batch Processor has the advantage of running after all of the tests have finished (see the &lt;a href="http://www.michael-whelan.net/bddfy-architecture-overview/"&gt;BDDfy Architecture Overview&lt;/a&gt; post for more detail).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyConsoleReporter : IBatchProcessor
{
    public void Process(IEnumerable&amp;lt;Story&amp;gt; stories)
    {
        var reporter = new ConsoleReporter();
        stories
            .ToList()
            .ForEach(story =&amp;gt; reporter.Process(story));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I just needed to add it to the Batch Processor pipeline and disable the built-in console report. For convenience I have just added it to the RunTestsInParallel method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void RunTestsInParallel(int batchSize)
{
    Configurator.Processors.ConsoleReport.Disable();
    Configurator.BatchProcessors.Add(new BatchConsoleReporter());

    List&amp;lt;ContextSpecification&amp;gt; theSpecs = GetSpecs();
    var batch = theSpecs.Batch(batchSize);

    Parallel.ForEach(batch, specs =&amp;gt; specs.Each(spec =&amp;gt; SafeRunSpec(spec)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code is available on github:
&lt;a href="https://github.com/mwhelan/BDDfySamples"&gt;https://github.com/mwhelan/BDDfySamples&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/roll-your-own-testing-framework/</guid><link>http://www.michael-whelan.net/roll-your-own-testing-framework/</link><author>mjmwdev@gmail.com</author><category>BDDfy</category><category>TestStack</category><title>BDDfy in Action: Roll your own testing framework</title><description>&lt;p&gt;Throughout the BDDfy in Action series, Mehdi and I have talked about the extensibility of BDDfy. I thought it would be useful to put together some sample code to demonstrate some of these extension points, and to provide a reference point for some of your own customizations. To provide some cohesion to the examples, I thought I would set myself the task of modifying BDDfy to work as a context specification framework, similar to mspec, which was previously my unit testing framework of choice. &lt;/p&gt;
</description><pubDate>Fri, 24 May 2013 23:00:00 Z</pubDate><a10:updated>2013-05-24T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;strong&gt;This article is part of the &lt;a href="http://www.michael-whelan.net/bddfy-in-action/"&gt;BDDfy In Action&lt;/a&gt; series.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Throughout the BDDfy in Action series, Mehdi and I have talked about the extensibility of BDDfy. I thought it would be useful to put together some sample code to demonstrate some of these extension points, and to provide a reference point for some of your own customizations. To provide some cohesion to the examples, I thought I would set myself the task of modifying BDDfy to work as a context specification framework, similar to mspec, which was previously my unit testing framework of choice. &lt;/p&gt;

&lt;p&gt;So, the requirements I have for this hypothetical custom framework are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It should use the context specification grammar (Establish Context, Because Of, It Should) rather than the Given When Then grammar that BDDfy uses by default&lt;/li&gt;
&lt;li&gt;It should have a Class per Scenario style, like the &lt;a href="http://xunitpatterns.com/Testcase%20Class%20per%20Fixture.html"&gt;Testcase class per Fixture&lt;/a&gt; pattern from Gerard Meszaros’ &lt;a href="http://www.amazon.com/xUnit-Test-Patterns-Refactoring-Code/dp/0131495054/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1368296304&amp;amp;sr=1-1&amp;amp;keywords=xunit+test+patterns"&gt;XUnit Test Patterns&lt;/a&gt; book (a book which I highly recommend).&lt;/li&gt;
&lt;li&gt;It should not require any testing framework, such as NUnit or MsTest. In fact, the only dependency will be BDDfy.&lt;/li&gt;
&lt;li&gt;It should not require a test runner, such as TestDriven.Net or ReSharper&lt;/li&gt;
&lt;li&gt;I’m not a fan of attributes, so no attributes for the BDDfy Story, the test fixture or for the test methods&lt;/li&gt;
&lt;li&gt;The HTML report should be customised for my new framework. (Let’s call it Context Specifier).&lt;/li&gt;
&lt;li&gt;Finally, I would like to be able to run tests sequentially or in parallel&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;ContextSpecification Base Class&lt;/h2&gt;

&lt;p&gt;I am going to start off with a base class to establish the context specification method template. I’ll also put a Story property here as an alternative to the Story attribute so that each specification can specify the Story that they belong to. BDDfy does not require Scenarios to have a Story, but it’s a convention I’m wanting to enforce for this framework! The Run method is what calls BDDfy to run the test. By default it will call BDDfy() and BDDfy will convert the class name into the scenario title. If I want to override that value I just need to set the ScenarioTitle in the class constructor and then it will be used with the BDDfy(scenarioTitle) overload.&lt;/p&gt;

&lt;p&gt;This is actually the only time that BDDfy is called in this framework and the whole test suite. It is very DRY and I much prefer it to adding fixture and test attributes for every test. (By the way, even if I were using a framework like nunit/xunit this base class would still be the only place I would need to use their attributes or call BDDfy. Their runners are smart enough to find the test classes, which is a nice benefit of using inheritance in this sort of framework). &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public abstract class ContextSpecification
{
    protected virtual void EstablishContext() { }
    protected virtual void BecauseOf() { }

    public abstract UserStory Story { get; }

    public virtual string ScenarioTitle { get; set; }

    public void Run()
    {
        if (string.IsNullOrEmpty(ScenarioTitle))
        {
            this.BDDfy();
        }
        else
        {
            this.BDDfy(ScenarioTitle);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this base class in place I can write a class for each scenario. To do that, I’m going to modify the BDDfy ATM samples. The Context Specification style utilises the same four-phase test pattern as Arrange Act Assert or Given When Then, setting up the pre-conditions for the test in the Establish Context phase, exercising the system under test (SUT) in the Because Of phase, and then verifying expectations in the It Should phase. &lt;/p&gt;

&lt;p&gt;The user story is associated with the specification by setting the Story property to a new instance of a UserStory class - in this case the AtmWithdrawCashStory class. Notice that I am able to override the scenario title in the constructor, so the report will read "When account funds are less than zero" rather than "When account has insufficient funds" which BDDfy would derive from the class name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class WhenAccountHasInsufficientFunds : ContextSpecification
{
    private Card _card;
    private Atm _atm;

    public WhenAccountHasInsufficientFunds()
    {
        ScenarioTitle = "When account funds are less than zero";
    }

    protected override void EstablishContext()
    {
        _card = new Card(true, 10);
        _atm = new Atm(100);
    }

    protected override void BecauseOf()
    {
        _atm.RequestMoney(_card, 20);
    }

    public override UserStory Story
    {
        get { return new AtmWithdrawCashStory(); }
    }

    void ItShouldNotDispenseAnyMoney()
    {
        Assert.AreEqual(0, _atm.DispenseValue);
    }

    void AndItShouldSayThereAreInsufficientFunds()
    {
        Assert.AreEqual(DisplayMessage.InsufficientFunds, _atm.Message);
    }

    void AndItShouldHaveTheSameAccountBalance()
    {
        Assert.AreEqual(10, _card.AccountBalance);
    }

    void AndItShouldReturnTheCard()
    {
        Assert.IsFalse(_atm.CardIsRetained);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The Context Specification Grammar&lt;/h2&gt;

&lt;p&gt;To use my new grammar instead of the default BDDfy Given When Then grammar I need to tell BDDfy how to find step methods on the class, which I can do by replacing the BDDfy DefaultMethodNameStepScanner with a new MethodNameStepScanner. BDDfy defines the Given When Then grammar in the DefaultMethodNameStepScanner and the easiest way to create a new scanner is to copy and modify that. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ContextSpecificationStepScanner : MethodNameStepScanner
{
    public ContextSpecificationStepScanner()
        : base(
            CleanupTheStepText,
            new[]
            {
                new MethodNameMatcher(s =&amp;gt; s.StartsWith("EstablishContext", StringComparison.OrdinalIgnoreCase), false, ExecutionOrder.SetupState, false),
                new MethodNameMatcher(s =&amp;gt; s.StartsWith("BecauseOf", StringComparison.OrdinalIgnoreCase), false, ExecutionOrder.Transition, false),
                new MethodNameMatcher(s =&amp;gt; s.StartsWith("It", StringComparison.OrdinalIgnoreCase), true, ExecutionOrder.Assertion, true),
                new MethodNameMatcher(s =&amp;gt; s.StartsWith("AndIt", StringComparison.OrdinalIgnoreCase), true, ExecutionOrder.ConsecutiveAssertion, true)
            })
    {
    }

    static string CleanupTheStepText(string stepText)
    {
        if (stepText.StartsWith("EstablishContext", StringComparison.OrdinalIgnoreCase))
            return "Establish context ";

        if (stepText.StartsWith("BecauseOf", StringComparison.OrdinalIgnoreCase))
            return "Because of ";

        if (stepText.StartsWith("AndIt ", StringComparison.OrdinalIgnoreCase))
            return stepText.Remove("and".Length, "It".Length);

        return stepText;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The custom scanner requires two parameters in the constructor; a step text transformer and an array of MethodNameMatchers. Each MethodNameMatcher defines a predicate to identify if the method matches, whether or not the method is an assertion, the type of method it is, and whether it should be displayed on the report. With Given When Then steps you want to display all of the steps on the report. With my context specification grammar I just want to display the name of the class and the assertions, so I specify false for the shouldReport parameter of the “EstablishContext” and “BecauseOf” steps so that they won’t display on the report. This is not something we recommend, as it would be helpful to receive error messages for those steps if they fail, but it makes sense for reporting purposes with this grammar as repeating EstablishContext and BecauseOf would not be much use on the report (and a reason why Given When Then grammar is preferable to this one).&lt;/p&gt;

&lt;p&gt;Once I have my new grammar I need to tell BDDfy to use it by using the Configurator to disable the default scanner and to add the new one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configurator.Scanners.DefaultMethodNameStepScanner.Disable();
Configurator.Scanners.Add(() =&amp;gt; new ContextSpecificationStepScanner());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Replacing the BDDfy Story Attribute&lt;/h2&gt;

&lt;p&gt;The next thing on my list is the Story. BDDfy uses an attribute on the test class to specify the Story that the Scenario test class belongs to. You are not limited to this though, and like most things in BDDfy, you are able to customise this behaviour if you want. I’m going to create a simple UserStory class that stores Story metadata. It is just a standard class that does not implement any BDDfy behaviours. I could potentially just use the BDDfy StoryMetaData class directly, but I will keep things separate for now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public abstract class UserStory
{
    public string Title { get; set; }
    public string AsA { get; set; }
    public string IWant { get; set; }
    public string SoThat { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create a new story class, I just have to inherit from the UserStory class and set the metadata properties in its constructor. Here is the AtmWithdrawCashStory from the example above.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class AtmWithdrawCashStory : UserStory
{
    public AtmWithdrawCashStory()
    {
        Title = "Withdrawing cash from the ATM";
        AsA = "As an Account Holder";
        IWant = "I want to withdraw cash from an ATM";
        SoThat = "So that I can get money when the bank is closed";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To tell BDDfy how to find these Stories and match them to the appropriate Scenario, I need to implement a new Story Metadata Scanner to associate the Scenario test class with its Story.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class StoryMetaDataScanner : IStoryMetaDataScanner
{
    public StoryMetaData Scan(object testObject, Type explicitStoryType = null)
    {
        var specification = testObject as ContextSpecification;
        if (specification == null)
            return null;

        var story = specification.Story;

        return new StoryMetaData(story.GetType(), story.AsA, story.IWant, story.SoThat, story.Title);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My convention of having all my test classes inherit from the base ContextSpecifcation comes in handy here as it enables me to easily get access to the Story property and use it to create the StoryMetaData that BDDfy needs. Now, I can just replace the BDDfy StoryMetaDataScanner with my custom one using the Configurator.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configurator.Scanners.StoryMetaDataScanner = () =&amp;gt; new StoryMetaDataScanner();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Customizing the HTML Report&lt;/h2&gt;

&lt;p&gt;I want to change the HTML report to have the name and description of the framework and to change the name of the html file that is generated. You can do this by inheriting from the DefaultHtmlReportConfiguration class. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class CustomHtmlReportConfiguration : DefaultHtmlReportConfiguration
{
    public override string ReportHeader
    {
        get
        {
            return "Context Specifier";
        }
    }

    public override string ReportDescription
    {
        get
        {
            return "A simple context specification framework for .Net developers";
        }
    }

    public override string OutputFileName
    {
        get
        {
            return "ContextSpecifications.html";
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can then turn off the default HTML Report and plug the custom one in instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configurator.BatchProcessors.HtmlReport.Disable();
Configurator.BatchProcessors.Add(new HtmlReporter(new CustomHtmlReportConfiguration()));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Test Runner&lt;/h2&gt;

&lt;p&gt;The Test Runner is quite straightforward. We just have to instantiate all of the specification classes and call the Run method. You could new up each class, use reflection to find all the classes that derive from ContextSpecification (as I’ve done here) or use an IoC container to store and retrieve them. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class TestRunner
{
    public void Run()
    {
        RunTestsSequentially();
        RunBatchProcessors();
    }

    private void RunTestsSequentially()
    {
        //new WhenAccountHasInsufficientFunds().Run();
        //new WhenCardHasBeenDisabled().BDDfy();
        //new WhenAccountHasSufficientFunds().BDDfy();

        GetSpecs().Each(spec =&amp;gt; SafeRunSpec(spec));
    }

    private void SafeRunSpec(ContextSpecification spec)
    {
        try
        {
            spec.Run();
        }
        catch (Exception)
        {
        }
    }

    private void RunBatchProcessors()
    {
        foreach (var batchProcessor in Configurator.BatchProcessors.GetProcessors())
        {
            batchProcessor.Process(StoryCache.Stories);
        }
    }

    private List&amp;lt;ContextSpecification&amp;gt; GetSpecs()
    {
        return this.GetType()
                   .Assembly
                   .GetTypes()
                   .Where(type =&amp;gt; type.IsSubclassOf(typeof(ContextSpecification)))
                   .Select(Activator.CreateInstance)
                   .Cast&amp;lt;ContextSpecification&amp;gt;()
                   .ToList();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you were to just run the tests like this then you would see the Console Report display all the tests in the console window. However, none of the Batch Processors, such as the HTML Report, would run. BDDfy runs these in the AppDomain_Unload event and one down side of my running in a console app is that &lt;a href="http://msdn.microsoft.com/en-us/library/system.appdomain.domainunload%28VS.90%29.aspx"&gt;this event is not raised in the default application domain&lt;/a&gt;. No worries, BDDfy makes it easy to run ourselves so I’ve added the RunBatchProcessors method. If you check the bin directory of the console application you will see our customised HTML Report with the context specification grammar.&lt;/p&gt;

&lt;h2&gt;Wiring It All Up&lt;/h2&gt;

&lt;p&gt;All that is left is to wire up a console application to run the tests. The first step is to configure BDDfy, which I’ve already shown. To run the tests I just need to instantiate the TestRunner and call the Run method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Program
{
    static void Main(string[] args)
    {
        ConfigureBDDfy();
        new TestRunner().Run();

        Console.ReadLine();
    }

    private static void ConfigureBDDfy()
    {
        Configurator.Scanners.DefaultMethodNameStepScanner.Disable();
        Configurator.Scanners.Add(() =&amp;gt; new ContextSpecificationStepScanner());

        Configurator.Scanners.StoryMetaDataScanner = () =&amp;gt; new StoryMetaDataScanner();

        Configurator.BatchProcessors.HtmlReport.Disable();
        Configurator.BatchProcessors.Add(new HtmlReporter(new CustomHtmlReportConfiguration()));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you go to the bin directory of the test project you should see the report file with the custom name, "ContextSpecifications.html," and all of the custom content inside it. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-custom-framework-report.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So, there it is. A bit of a contrived example, but hopefully it has highlighted some of the extensibility points that BDDfy offers and provided some food for thought for some customizations that you might like to try yourself. I've left the parallel testing requirement for the &lt;a href="http://michael-whelan.net/roll-your-own-testing-framework-2"&gt;next post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code is available on github:
&lt;a href="https://github.com/mwhelan/BDDfySamples"&gt;https://github.com/mwhelan/BDDfySamples&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/custom-reports/</guid><link>http://www.michael-whelan.net/custom-reports/</link><author>mjmwdev@gmail.com</author><category>BDDfy</category><category>TestStack</category><title>BDDfy In Action: Custom Reports</title><description>&lt;p&gt;This post looks at how to customize the HTML Report and how to create your own custom reports. You can customize the HTML report via configuration or by applying custom CSS or JavaScript. You can create custom reports either by implementing a new Processor or Batch Processor and adding them into their respective pipelines (see the &lt;a href="http://www.michael-whelan.net/bddfy-architecture-overview/"&gt;BDDfy Architecture Overview&lt;/a&gt; for details about the differences between these). &lt;/p&gt;
</description><pubDate>Wed, 22 May 2013 23:00:00 Z</pubDate><a10:updated>2013-05-22T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;strong&gt;This article is part of the &lt;a href="http://www.michael-whelan.net/bddfy-in-action/"&gt;BDDfy In Action&lt;/a&gt; series.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This post looks at how to customize the HTML Report and how to create your own custom reports. You can customize the HTML report via configuration or by applying custom CSS or JavaScript. You can create custom reports either by implementing a new Processor or Batch Processor and adding them into their respective pipelines (see the &lt;a href="http://www.michael-whelan.net/bddfy-architecture-overview/"&gt;BDDfy Architecture Overview&lt;/a&gt; for details about the differences between these). &lt;/p&gt;

&lt;h2&gt;Customizing the HTML Report&lt;/h2&gt;

&lt;p&gt;The HTML report is the most sophisticated report in &lt;a href="http://teststack.net/pages/BDDfy.html"&gt;BDDfy&lt;/a&gt; and therefore provides a lot more things that you can configure. Its configuration is defined by the IHtmlReportConfiguration interface.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface IHtmlReportConfiguration
{
    string ReportHeader { get; }
    string ReportDescription { get; }
    string OutputPath { get; }
    string OutputFileName { get; }
    bool RunsOn(Story story);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can create a new configuration by implementing that interface or you can inherit from the  DefaultHtmlReportConfiguration class, used to configure the standard HTML Report, and just override specific properties.  Here is an example of a custom configuration, taken from the ATM sample, available on github &lt;a href="https://github.com/TestStack/TestStack.BDDfy/tree/master/TestStack.BDDfy.Samples/Atm"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class HtmlReportConfig : DefaultHtmlReportConfiguration
{
    public override bool RunsOn(Core.Story story)
    {
        return story.MetaData.Type.Namespace != null &amp;amp;&amp;amp; story.MetaData.Type.Namespace.EndsWith("Atm");
    }

    /// &amp;lt;summary&amp;gt;
    /// Change the output file name
    /// &amp;lt;/summary&amp;gt;
    public override string OutputFileName
    {
        get
        {
            return "ATM.html";
        }
    }

    /// &amp;lt;summary&amp;gt;
    /// Change the report header to your project
    /// &amp;lt;/summary&amp;gt;
    public override string ReportHeader
    {
        get
        {
            return "ATM Solutions";
        }
    }

    /// &amp;lt;summary&amp;gt;
    /// Change the report description
    /// &amp;lt;/summary&amp;gt;
    public override string ReportDescription
    {
        get
        {
            return "A reliable solution for your offline banking needs";
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which produces the following customised report, which you will find in your bin directory named ATM.html:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-sample-atm-html-custom.png" alt="" /&gt; &lt;/p&gt;

&lt;p&gt;The HTML report is a &lt;a href="http://www.michael-whelan.net/bddfy-architecture-overview/"&gt;Batch Processor&lt;/a&gt; and is implemented by the HtmlReporter class. To plug the new report into BDDfy you need to create a new HtmlReporter and pass the custom configuration into its constructor. As I explained in the &lt;a href="http://www.michael-whelan.net/bddfy-reports/"&gt;Reports post&lt;/a&gt;, the place to apply that configuration to BDDfy is the Configurator class, which is called before the tests run. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configurator.BatchProcessors.Add(new HtmlReporter(new HtmlReportConfig()));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The use of the Add method means this is adding a second HTML Report processor into the Batch Processor pipeline, so the default report runner will still run. If you actually want the new report to replace the default report, then you will also need to disable the default report.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configurator.BatchProcessors.HtmlReport.Disable();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Custom CSS and JavaScript&lt;/h2&gt;

&lt;p&gt;You can customize a lot more about the HTML report. BDDfy uses the BDDfy.css file to style the report and BDDfy.js and jQuery to add interactivity to it. You will find these files in the bin directory alongside the HTML report. You can customise the styles by adding a bddifyCustom.css class and the behaviour by adding a bddifyCustom.js file. These files also need to be in the same directory as the HTML report file. This will affect all the reports in the project.&lt;/p&gt;

&lt;h2&gt;Create a custom report by creating a new Processor&lt;/h2&gt;

&lt;p&gt;One way to create a custom report is to implement a new Processor and plug it into the Processor pipeline. You just have to implement the one Process() method and set the Process Type to Report.&lt;/p&gt;

&lt;p&gt;An example of doing this is provided in the BDDfy Tic Tac Toe sample project with the Custom Text Reporter. The sample is available on &lt;a href="https://github.com/TestStack/TestStack.BDDfy/tree/master/TestStack.BDDfy.Samples"&gt;github&lt;/a&gt; or &lt;a href="http://www.nuget.org/packages/TestStack.BDDfy.Samples/"&gt;nuget&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// This is a custom reporter that shows you how easily you can create a custom report.
/// Just implement IProcessor and you are done
/// &amp;lt;/summary&amp;gt;
public class CustomTextReporter : IProcessor
{
    private static readonly string Path;

    private static string OutputDirectory
    {
        get
        {
            string codeBase = typeof(CustomTextReporter).Assembly.CodeBase;
            var uri = new UriBuilder(codeBase);
            string path = Uri.UnescapeDataString(uri.Path);
            return System.IO.Path.GetDirectoryName(path);
        }
    }

    static CustomTextReporter()
    {
        Path = System.IO.Path.Combine(OutputDirectory, "BDDfy-text-report.txt");

        if(File.Exists(Path))
            File.Delete(Path);

        var header = 
            " A custom report created from your test assembly with no required configuration " + 
            Environment.NewLine + 
            Environment.NewLine + 
            Environment.NewLine + 
            Environment.NewLine;
        File.AppendAllText(Path, header);
    }

    public void Process(Story story)
    {
        // use this report only for tic tac toe stories
        if (!story.MetaData.Type.Name.Contains("TicTacToe"))
            return;

        var scenario = story.Scenarios.First();
        var scenarioReport = new StringBuilder();
        scenarioReport.AppendLine(string.Format(" SCENARIO: {0}  ", scenario.Title));

        if (scenario.Result != StepExecutionResult.Passed &amp;amp;&amp;amp; scenario.Steps.Any(s =&amp;gt; s.Exception != null))
        {
            scenarioReport.Append(string.Format("    {0} : ", scenario.Result));
            scenarioReport.AppendLine(scenario.Steps.First(s =&amp;gt; s.Result == scenario.Result).Exception.Message);
        }

        scenarioReport.AppendLine();

        foreach (var step in scenario.Steps)
            scenarioReport.AppendLine(string.Format("   [{1}] {0}", step.StepTitle, step.Result));

        scenarioReport.AppendLine("--------------------------------------------------------------------------------");
        scenarioReport.AppendLine();

        File.AppendAllText(Path, scenarioReport.ToString());
    }

    public ProcessType ProcessType
    {
        get { return ProcessType.Report; }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This produces the BDDfy-text-report.txt text file report which is output to the bin directory:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-custom-text-report.png" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;Create a custom report by creating a new Batch Processor&lt;/h2&gt;

&lt;p&gt;While that is one way that you can create a custom report, probably the better way to do it is to implement a new Batch Processor. The Processor runs as each test is being executed and allows you to build up the report, whereas a Batch Processor has the advantage of running after all of the tests have finished, meaning that you have access to total and summary information, such as diagnostics.&lt;/p&gt;

&lt;p&gt;As an example of creating a custom report by creating a new Batch Processor, I was recently messing around with running tests in parallel and, as you might expect, the normal console report was quite jumbled. Multiple console report Processors were writing to the console at the same time and different test results were overlapping. The solution was to run the console report after all of the tests had run by creating a new Console Reporter as a Batch Processor rather than a Processor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyConsoleReporter : IBatchProcessor
{
    public void Process(IEnumerable&amp;lt;Story&amp;gt; stories)
    {
        var reporter = new ConsoleReporter();
        stories
            .ToList()
            .ForEach(story =&amp;gt; reporter.Process(story));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I just needed to add it to the Batch Processor pipeline and disable the built-in console report:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configurator.Processors.ConsoleReport.Disable();
Configurator.BatchProcessors.Add(new MyConsoleReporter());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's a bit of a hack for demo purposes. The HTML, MarkDown, and Diagnostics reports are all implemented as Batch Processors and I would recommend checking them out for examples of how to create a new report. &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/bddfy-architecture-overview/</guid><link>http://www.michael-whelan.net/bddfy-architecture-overview/</link><author>mjmwdev@gmail.com</author><category>BDDfy</category><category>TestStack</category><title>BDDfy In Action: BDDfy Architecture Overview</title><description>&lt;p&gt;The rest of the articles in this series revolve around customizing and extending BDDfy. I thought it would be good to start with an overview of the main components of the BDDfy architecture to provide some context for that discussion and to illustrate the extensibility points.&lt;/p&gt;
</description><pubDate>Tue, 21 May 2013 23:00:00 Z</pubDate><a10:updated>2013-05-21T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;strong&gt;This article is part of the &lt;a href="http://www.michael-whelan.net/bddfy-in-action/"&gt;BDDfy In Action&lt;/a&gt; series.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The rest of the articles in this series revolve around customizing and extending BDDfy. I thought it would be good to start with an overview of the main components of the BDDfy architecture to provide some context for that discussion and to illustrate the extensibility points.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-functional-decomposition.png" alt="" /&gt; &lt;/p&gt;

&lt;p&gt;The unit of operation in BDDfy is the Story. A Story has metadata (information about the Story) and a collection of Scenarios. Each Scenario represents a test class and contains metadata and a collection of Execution Steps, which are the methods on the test class. There are three types of architectural components in BDDfy: Scanners, Processors and Batch Processors. For each test class BDDfy composes a Story unit with various Scanners and passes it to the Processors in a processor pipeline. Once all of the test classes have been scanned and processed the Batch Processors run aggregate operations against all of the Stories.&lt;/p&gt;

&lt;p&gt;Scanners turn a call to BDDfy (from a method) into a Scenario which could potentially be related to a Story. BDDfy doesn't need Stories but if there is one it uses it. If a Scenario is not related to a Story then it is associated with a dummy placeholder. Each Story is then passed to the Processors, which perform various operations, including executing the tests, and populate the Stories, Scenarios and Steps with the test execution results. Once all of the tests have been scanned and processed, the Batch Processors take the collection of Stories and process their results. This could be any sort of aggregate operation, but currently all the batch processors are reports.&lt;/p&gt;

&lt;h2&gt;Scanners&lt;/h2&gt;

&lt;p&gt;Most of the BDDfy in Action series so far has covered the various Scanners, so I won’t go into much detail here. Suffice to say, BDDfy uses Scanners to scan each test class to find all of the methods on it and turn the test class into a Scenario. The different Scanners are shown here:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-scanners.png" alt="" /&gt;&lt;/p&gt;

&lt;h3&gt;Story Scanner&lt;/h3&gt;

&lt;p&gt;BDDfy creates a Story Scanner for each test object. This is the Scanner that actually scans the test object and turns it into a Story. It composes together the Story Metadata Scanner and the appropriate Scenario Scanner – &lt;a href="http://www.mehdi-khalili.com/bddify-in-action/fluent-api"&gt;Fluent&lt;/a&gt; or &lt;a href="http://www.mehdi-khalili.com/bddify-in-action/method-name-conventions"&gt;Reflective&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The Story Metadata Scanner gets information from the Story attribute, if one exists on the class.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;Story&lt;/strong&gt; has the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Story Metadata&lt;/strong&gt;: Information about the Story such as Title, As a, I want, So that&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scenarios&lt;/strong&gt;: The collection of Scenarios related to the Story&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: A Story’s Result is a Step Execution Result and is determined by the highest Step Execution Result of its Scenarios. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: The Story Category&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step Execution Results&lt;/strong&gt; have a numerical hierarchy and can be (in ascending order):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not Executed (0)&lt;/li&gt;
&lt;li&gt;Passed (1)&lt;/li&gt;
&lt;li&gt;Not Implemented (2)&lt;/li&gt;
&lt;li&gt;Inconclusive (3)&lt;/li&gt;
&lt;li&gt;Failed (4)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Test Runner Processor assigns a numerical Step Execution Result to every Execution Step. The result of a Scenario is then determined by the highest value of from its Steps and the result of a Story is determined by the highest result of its Scenarios. For example, if a Step fails, then its parent Scenario and Story will also have a result of Failed.&lt;/p&gt;

&lt;h3&gt;Scenario Scanners&lt;/h3&gt;

&lt;p&gt;Scenario Scanners scan the test class and use the information they find to create a Scenario. There is a Fluent Scenario Scanner and a Reflective Scenario Scanner.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;Scenario&lt;/strong&gt; has the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt;: The Scenario Title&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Steps&lt;/strong&gt;: The collection of Steps (test class methods) related to the Scenario&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;:   A Scenario’s Result is a Step Execution Result and is determined by the highest Step Execution Result of its Steps. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Duration&lt;/strong&gt;: How long the Scenario took to execute. Used by Diagnostics.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Step Scanners&lt;/h3&gt;

&lt;p&gt;Step Scanners turn methods into Execution Steps. The Reflective Scanners (the Executable Attribute Step Scanner and the Method Name Scanner) scan the test class to find all the methods on it and turns them into Execution Steps. The Fluent Step Scanner is only a registry and in practice doesn't do any scanning.&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;Execution Step&lt;/strong&gt; has the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt;: The Step Title&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: The result of executing the Step. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Duration&lt;/strong&gt;: How long the Step took to execute. Used by Diagnostics.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Asserts&lt;/strong&gt;: Whether or not the Step is an Assertion Step.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Should Report&lt;/strong&gt;: Whether the Step should be displayed in reports.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Execution Order&lt;/strong&gt;: The order that the step should run in relative to the other steps. Can be (in ascending order) 
&lt;ul&gt;
&lt;li&gt;Initialize (for example, "Context", "Setup)&lt;/li&gt;
&lt;li&gt;Setup State ("Given")&lt;/li&gt;
&lt;li&gt;Consecutive Setup State ("And Given")&lt;/li&gt;
&lt;li&gt;Transition ("When)&lt;/li&gt;
&lt;li&gt;Consecutive Transition "And When")&lt;/li&gt;
&lt;li&gt;Assertion ("Then")&lt;/li&gt;
&lt;li&gt;Consecutive Assertion ("And Then")&lt;/li&gt;
&lt;li&gt;Tear Down ("TearDown")
 
&lt;h2&gt;Processors&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once a test class has been scanned into a Story, the Story is passed into a &lt;strong&gt;Processor pipeline&lt;/strong&gt; where a series of processing steps are performed on it. The Processors are categorized by Type and the order they run in is determined by this Type.&lt;/p&gt;

&lt;p&gt;The various &lt;strong&gt;Process Types&lt;/strong&gt;, in order, are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Firstly&lt;/li&gt;
&lt;li&gt;Execute&lt;/li&gt;
&lt;li&gt;Before Report&lt;/li&gt;
&lt;li&gt;Report&lt;/li&gt;
&lt;li&gt;After Report &lt;/li&gt;
&lt;li&gt;Process Exceptions&lt;/li&gt;
&lt;li&gt;Finally&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-processor-pipeline.png" alt="BDDfy processor pipeline" /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Test Runner (Execute)&lt;/strong&gt;: Executes the tests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Console Reporter (Report)&lt;/strong&gt;: Displays the test result in the console.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception Processor (Process Exceptions)&lt;/strong&gt;:    Handles exceptions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Story Cache (Finally)&lt;/strong&gt;: Saves each Story for later processing by the Batch Processors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disposer   (Finally)&lt;/strong&gt;: Cleans up the Story and its Scenarios.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Batch Processors&lt;/h2&gt;

&lt;p&gt;Once all of the tests have been scanned and processed, the Batch Processors take all of the Stories and process their results (technically speaking they run in the &lt;a href="http://msdn.microsoft.com/en-GB/library/system.appdomain.domainunload.aspx"&gt;AppDomain DomainUnload event&lt;/a&gt;). This could be any sort of result processing, but currently all the batch processors are reports. The built-in Batch Processors are displayed in the diagram below.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-batch-processor-pipeline.png" alt="BDDfy batch processor pipeline" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTML Reporter&lt;/strong&gt;: Creates the HTML report&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markdown Reporter&lt;/strong&gt;: Creates the Markdown report&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Diagnostics Reporter&lt;/strong&gt;: Creates the Diagnostics report&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Configurator&lt;/h2&gt;

&lt;p&gt;The static Configurator class allows you to configure Scanners, Processors and Batch Processors. It lets you enable,  disable, or replace individual components and it also allows you to add custom implementations.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/rules-design-pattern/</guid><link>http://www.michael-whelan.net/rules-design-pattern/</link><author>mjmwdev@gmail.com</author><category>Programming</category><title>The Rules Design Pattern</title><description>&lt;p&gt;Lately, I’ve been having to support some legacy code that has a lot of conditional logic and duplication. It can be quite hard to integrate new rules as the code can be difficult to understand and to digest what is going on. This sort of code often has comments explaining what the different pieces of conditional logic are doing. The problems only gets worse as you have to add more conditions over time.&lt;/p&gt;

</description><pubDate>Mon, 13 May 2013 23:00:00 Z</pubDate><a10:updated>2013-05-13T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Lately, I’ve been having to support some legacy code that has a lot of conditional logic and duplication. It can be quite hard to integrate new rules as the code can be difficult to understand and to digest what is going on. This sort of code often has comments explaining what the different pieces of conditional logic are doing. The problems only gets worse as you have to add more conditions over time.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Here is an example of some ugly conditional logic from Steve Smith’s Rules Pattern module on Pluralsight (more on the Rules Pattern later).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class DiscountCalculator
{
    public decimal CalculateDiscountPercentage(Customer customer)
    {
        decimal discount = 0;
        if (customer.DateOfBirth &amp;lt; DateTime.Now.AddYears(-65))
        {
            // senior discount 5%
            discount = .05m;
        }

        if (customer.DateOfBirth.Day == DateTime.Today.Day &amp;amp;&amp;amp;
            customer.DateOfBirth.Month == DateTime.Today.Month)
        {
            // birthday 10%
            discount = Math.Max(discount, .10m);
        }

        if (customer.DateOfFirstPurchase.HasValue)
        {
            if (customer.DateOfFirstPurchase.Value &amp;lt; DateTime.Now.AddYears(-1))
            {
                // after 1 year, loyal customers get 10%
                discount = Math.Max(discount, .10m);
                if (customer.DateOfFirstPurchase.Value &amp;lt; DateTime.Now.AddYears(-5))
                {
                    // after 5 years, 12%
                    discount = Math.Max(discount, .12m);
                    if (customer.DateOfFirstPurchase.Value &amp;lt; DateTime.Now.AddYears(-10))
                    {
                        // after 10 years, 20%
                        discount = Math.Max(discount, .2m);
                    }
                }

                if (customer.DateOfBirth.Day == DateTime.Today.Day &amp;amp;&amp;amp;
                    customer.DateOfBirth.Month == DateTime.Today.Month)
                {
                    // birthday additional 10%
                    discount += .10m;
                }
            }
        }
        else
        {
            // first time purchase discount of 15%
            discount = Math.Max(discount, .15m);
        }
        if (customer.IsVeteran)
        {
            // veterans get 10%
            discount = Math.Max(discount, .10m);
        }

        return discount;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Replace Boolean logic with meaningful predicates&lt;/h2&gt;

&lt;p&gt;The first step I like to take to clean up this sort of code is to do an &lt;a href="http://refactoring.com/catalog/extractMethod.html"&gt;Extract Method refactor&lt;/a&gt; on the conditional logic in the if statements. The method names should be in the form of a question and create an English sentence that communicates the logic inside the method. This has the benefit of being easy to read and understand and also means that you can safely remove the comments. (In fact, it often makes sense to use the comment to name the method). &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class DiscountCalculator
{
    public decimal CalculateDiscountPercentage(Customer customer)
    {
        decimal discount = 0;
        if (IsSenior(customer))
        {
            discount = .05m;
        }

        if (IsBirthday(customer))
        {
            discount = Math.Max(discount, .10m);
        }

        if (IsExisting(customer))
        {
            if (HasBeenLoyalForYears(customer, 1))
            {
                discount = Math.Max(discount, .10m);
                if (HasBeenLoyalForYears(customer, 5))
                {
                    discount = Math.Max(discount, .12m);
                    if (HasBeenLoyalForYears(customer, 10))
                    {
                        discount = Math.Max(discount, .2m);
                    }
                }

                if (IsBirthday(customer))
                {
                    discount += .10m;
                }
            }
        }
        else
        {
            // first time purchase discount of 15%
            discount = Math.Max(discount, .15m);
        }
        if (customer.IsVeteran)
        {
            discount = Math.Max(discount, .10m);
        }

        return discount;
    }

    private static bool HasBeenLoyalForYears(Customer customer, int numberOfYears)
    {
        numberOfYears *= -1;
        return customer.DateOfFirstPurchase.Value &amp;lt; DateTime.Now.AddYears(numberOfYears);
    }

    private static bool IsExisting(Customer customer)
    {
        return customer.DateOfFirstPurchase.HasValue;
    }

    private static bool IsBirthday(Customer customer)
    {
        return customer.DateOfBirth.Day == DateTime.Today.Day &amp;amp;&amp;amp;
               customer.DateOfBirth.Month == DateTime.Today.Month;
    }

    private static bool IsSenior(Customer customer)
    {
        return customer.DateOfBirth &amp;lt; DateTime.Now.AddYears(-65);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I like how much more readable the code is now, though I find passing the customer parameter into each method a little bit clunky. I also like the “newspaper” style of writing code. When I’m looking at the logic of the main method it is sufficient to just see the “headlines,” that is the method names saying that this bit of code runs if it’s the customer’s birthday and that bit of code runs if the customer is a senior. If I hone in on the area of code I am interested in then I might drill down into the method itself and engage with it (“the article”) but until then all that logic and algorithms is just noise.  &lt;/p&gt;

&lt;p&gt;I tend to think I should keep these predicate methods private, which seems to fit with the goals of encapsulation. But how do I test them?&lt;/p&gt;

&lt;h2&gt;Making predicates extension methods&lt;/h2&gt;

&lt;p&gt;Making the predicates into extension methods makes them easy to test and removes the customer parameter from each method. You might violently disagree with this step, so please let me know in the comments if you do. I'd be interested in other perspectives on it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class DiscountCalculator
{
    public decimal CalculateDiscountPercentage(Customer customer)
    {
        decimal discount = 0;
        if (customer.IsSenior())
        {
            discount = .05m;
        }

        if (customer.IsBirthday())
        {
            discount = Math.Max(discount, .10m);
        }

        if (customer.IsExisting())
        {
            if (customer.HasBeenLoyalForYears(1))
            {
                discount = Math.Max(discount, .10m);
                if (customer.HasBeenLoyalForYears(5))
                {
                    discount = Math.Max(discount, .12m);
                    if (customer.HasBeenLoyalForYears(10))
                    {
                        discount = Math.Max(discount, .2m);
                    }
                }

                if (customer.IsBirthday())
                {
                    discount += .10m;
                }
            }
        }
        else
        {
            // first time purchase discount of 15%
            discount = Math.Max(discount, .15m);
        }
        if (customer.IsVeteran)
        {
            discount = Math.Max(discount, .10m);
        }

        return discount;
    }
}

public static class CustomerExtensions
{
    public static bool HasBeenLoyalForYears(this Customer customer, int numberOfYears, DateTime? date = null)
    {
        if (!customer.IsExisting())
            return false;
        numberOfYears = -1 * numberOfYears;
        return customer.DateOfFirstPurchase.Value &amp;lt; date.ToValueOrDefault().AddYears(numberOfYears);
    }

    public static bool IsExisting(this Customer customer)
    {
        return customer.DateOfFirstPurchase.HasValue;
    }

    public static bool IsSenior(this Customer customer, DateTime? date = null)
    {
        return customer.DateOfBirth &amp;lt; date.ToValueOrDefault().AddYears(-65);
    }

    public static bool IsBirthday(this Customer customer, DateTime? date = null)
    {
        date = date.ToValueOrDefault();
        return customer.DateOfBirth.Day == date.Value.Day
                &amp;amp;&amp;amp; customer.DateOfBirth.Month == date.Value.Month;
        ;
    }
}

public static class DateTimeExtensions
{
    public static DateTime ToValueOrDefault(this DateTime? dateTime, DateTime? defaultValue = null)
    {
        defaultValue = defaultValue.HasValue ? defaultValue.Value : DateTime.Now;
        return dateTime.HasValue ? dateTime.Value : defaultValue.Value;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The Rules Design Pattern&lt;/h2&gt;

&lt;p&gt;These refactorings have helped a bit, but they have not really reduced the complexity and duplication and have not addressed the fact that this complexity will increase as more rules are added. I was looking around for a design pattern that might address those things and came across the Rules Pattern, which was a module that &lt;a href="http://pluralsight.com/training/Authors/Details/steve-smith"&gt;Steve Smith&lt;/a&gt; contributed to Pluralsight’s &lt;a href="http://pluralsight.com/training/Courses/TableOfContents/patterns-library"&gt;Design Patterns library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Rules Pattern works by separating out the rules from the rules processing logic (applying the &lt;a href="http://en.wikipedia.org/wiki/Single_responsibility_principle"&gt;Single Responsibility Principle&lt;/a&gt;). This makes it easy to add new rules without changing the rest of the system (applying the &lt;a href="http://en.wikipedia.org/wiki/Single_responsibility_principle"&gt;Open/Closed Principle&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/rules-pattern.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;With the Rules Pattern there is an Evaluator class that loops through a collection of rules and executes them. It evaluates the result and decides what action to take. In the simplest case it just executes all the rules, but it is also possible to add some selection logic to each rule that allows the Evaluator class to decide whether or not to run the rule (such as the IsMatch() method on the IRule interface above).&lt;/p&gt;

&lt;p&gt;The rules implement a simple interface&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface IDiscountRule
{
    decimal CalculateCustomerDiscount(Customer customer);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the rules implementations just have a single responsibility that could be as simple or complex as necessary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class BirthdayDiscountRule : IDiscountRule
{
    public decimal CalculateCustomerDiscount(Customer customer)
    {
        return customer.IsBirthday() ? 0.10m : 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;And you can even reuse rules in other rules, such as the BirthdayDiscountRule being used in the LoyalCustomerRule here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class LoyalCustomerRule : IDiscountRule
{
    private readonly int _yearsAsCustomer;
    private readonly decimal _discount;
    private readonly DateTime _date;

    public LoyalCustomerRule(int yearsAsCustomer, decimal discount, DateTime? date = null)
    {
        _yearsAsCustomer = yearsAsCustomer;
        _discount = discount;
        _date = date.ToValueOrDefault();
    }

    public decimal CalculateCustomerDiscount(Customer customer)
    {
        if (customer.HasBeenLoyalForYears(_yearsAsCustomer, _date))
        {
            var birthdayRule = new BirthdayDiscountRule();

            return _discount + birthdayRule.CalculateCustomerDiscount(customer);
        }
        return 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Applying the refactoring to the problem above, the RulesDiscountCalculator is the Evaluator. It holds a collection of rules that calculate discounts and loops through them to find the greatest discount. Rules are just added to the collection manually here for illustrative purposes, but in a real application you would more likely load them dynamically with an IoC container or something similar without having to change RulesDiscountCalculator.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class RulesDiscountCalculator : IDiscountCalculator
{
    List&amp;lt;IDiscountRule&amp;gt; _rules = new List&amp;lt;IDiscountRule&amp;gt;();

    public RulesDiscountCalculator()
    {
        _rules.Add(new BirthdayDiscountRule());
        _rules.Add(new SeniorDiscountRule());
        _rules.Add(new VeteranDiscountRule());
        _rules.Add(new LoyalCustomerRule(1, 0.10m));
        _rules.Add(new LoyalCustomerRule(5, 0.12m));
        _rules.Add(new LoyalCustomerRule(10, 0.20m));
        _rules.Add(new NewCustomerRule());
    }

    public decimal CalculateDiscountPercentage(Customer customer)
    {
        decimal discount = 0;

        foreach (var rule in _rules)
        {
            discount = Math.Max(rule.CalculateCustomerDiscount(customer), discount);
        }

        return discount;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can get a better understanding of how the Rules Pattern works by checking out the code in my &lt;a href="https://github.com/mwhelan/Blog_RulesPattern"&gt;github repo&lt;/a&gt;.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/getting-started-with-seleno/</guid><link>http://www.michael-whelan.net/getting-started-with-seleno/</link><author>mjmwdev@gmail.com</author><category>Seleno</category><category>TestStack</category><title>Getting started with Seleno</title><description>&lt;p&gt;Seleno is an open source project from TestStack which helps you write automated UI tests with Selenium. It focuses on the use of &lt;a href="https://code.google.com/p/selenium/wiki/PageObjects"&gt;Page Objects&lt;/a&gt; and Page Components and by reading from and writing to web pages using strongly typed view models. This post is a brief overview of what you need to know to get started using Seleno.&lt;/p&gt;

</description><pubDate>Sun, 05 May 2013 23:00:00 Z</pubDate><a10:updated>2013-05-05T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Seleno is an open source project from TestStack which helps you write automated UI tests with Selenium. It focuses on the use of &lt;a href="https://code.google.com/p/selenium/wiki/PageObjects"&gt;Page Objects&lt;/a&gt; and Page Components and by reading from and writing to web pages using strongly typed view models. This post is a brief overview of what you need to know to get started using Seleno.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;

&lt;p&gt;The simplest possible configuration to start using Seleno is just one line. If you are using an ASP.NET web application within the same solution as your test project then all Seleno needs to know is the name of the web project to test and the port number to run it on. You need to provide it with this information before you run any Seleno tests so, if you were using NUnit, for example, you might configure Seleno in the SetUpFixture.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[SetUpFixture]
public class AssemblySetupFixture
{
    [SetUp]
    public void SetUp()
    {
        SelenoHost.Run("TestStack.Seleno.Samples.Movies", 19456);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will deploy your web application with IIS Express and open up FireFox to run your tests. It will unload the browser and web server when the application domain unloads. We have plans to allow you to exert more control over the lifetime of Seleno, but for now this is fixed - if this is really important to you then please create an issue on the &lt;a href="https://github.com/TestStack/TestStack.Seleno/issues"&gt;Github site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By default, Seleno uses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FireFox for the web browser&lt;/li&gt;
&lt;li&gt;IIS Express for the web server&lt;/li&gt;
&lt;li&gt;No logger&lt;/li&gt;
&lt;li&gt;No camera for taking screenshots&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to change these defaults, you can use a fluent configuration to override them. For example, if you wanted to use Chrome instead of Firefox (the default) and to log messages to the console, you could write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SelenoHost.Run("TestStack.Seleno.Samples.Movies", 19456,
    configure =&amp;gt; configure
        .WithRemoteWebDriver(BrowserFactory.Chrome)
        .UsingLoggerFactory(new ConsoleFactory())
);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: To use the Chrome WebDriver you also need to download &lt;a href="https://code.google.com/p/selenium/wiki/ChromeDriver"&gt;ChromeDriver.exe&lt;/a&gt; and make sure it is in your bin directory when you run your tests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are more things that you can configure too. The original use case for Seleno was to test Visual Studio web projects for ASP.Net and ASP.Net MVC and it defaults to doing this with IIS Express. Seleno attempts to be modular and easy to customise though, so to test any website instead is just a matter of swapping out the IisExpressWebServer for the InternetWebServer. For example, to test Google UK:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SelenoHost.Run(configure =&amp;gt; configure
    .WithWebServer(new InternetWebServer("www.google.co.uk")));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Page Objects&lt;/h2&gt;

&lt;p&gt;Seleno supports the idea of &lt;a href="https://code.google.com/p/selenium/wiki/PageObjects"&gt;Page Objects&lt;/a&gt; to model your web pages. The idea is to model each page (or part of a page) as a class, and then to use instances of those classes in your tests. To continue, with the google example, we're all familiar with this page.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/google.png" alt="Google search" /&gt;&lt;/p&gt;

&lt;p&gt;In Seleno, you would model this page by inheriting from the Page class and then encapsulating the interaction with the page within methods. Seleno provides methods to find elements on the page (Find) and enter data into the text box (SendKeys). The Navigate method allows you to navigate to the results page by clicking on the Search button (btnG).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class SearchPage : Page
{
    public SearchPage InputSearchTerm(string term)
    {
        Find()
            .Element(By.Name("q"))
            .SendKeys(term);
        return this;
    }

    public ResultsPage Search()
    {
        return Navigate().To&amp;lt;ResultsPage&amp;gt;(By.Name("btnG"));
    }
}

public class ResultsPage : Page
{
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your tests can just call methods on the Page Objects, without having to know anything about the interaction with the page or the use of Selenium.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[SetUpFixture]
public class AssemblySetUpFixture
{
    [SetUp]
    public void SetUp()
    {
        SelenoHost.Run(configure =&amp;gt; configure
            .WithWebServer(new InternetWebServer("http://www.google.co.uk")));
    }
}

[TestFixture]
public class GoogleSearchTests
{
    [Test]
    public void should_be_able_to_search()
    {
        var searchPage = SelenoHost.NavigateToInitialPage&amp;lt;SearchPage&amp;gt;();
        var resultsPage = searchPage
            .InputSearchTerm("BDDfy")
            .Search();
        resultsPage.Title.Should().Be("Google");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Strongly Typed Page Objects&lt;/h3&gt;

&lt;p&gt;That's quite nice, but things start to get really interesting if you use view models. Seleno also provides strongly typed Page Objects, which allow you to read from and write to the page. Here is an example, from the Seleno MvcMusicStore sample. Because Seleno is aware of the RegisterModel view model, it is able to take a populated instance of that model and enter the information into the web page using the Input().Model method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class RegisterModel
{
    public string UserName { get; set; }
    public string Email { get; set; }
    public string Password { get; set; }
    public string ConfirmPassword { get; set; }
}

public class RegisterPage : Page&amp;lt;RegisterModel&amp;gt;
{
    public HomePage CreateValidUser(RegisterModel model)
    {
        Input().Model(model);
        return Navigate().To&amp;lt;HomePage&amp;gt;(By.CssSelector("input[type='submit']"));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can then be used in a test, with a populated model generated by the CreateRegisterModel of the &lt;a href="http://martinfowler.com/bliki/ObjectMother.html"&gt;ObjectMother&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class StronglyTypedPageObjectWithComponent
{
    [Test]
    public void Can_buy_an_Album_when_registered()
    {
        var orderedPage = SelenoHost.NavigateToInitialPage&amp;lt;HomeController, HomePage&amp;gt;(x =&amp;gt; x.Index())
            .Menu
            .GoToAdminForAnonymousUser()
            .GoToRegisterPage()
            .CreateValidUser(ObjectMother.CreateRegisterModel())
            .GenreMenu
            .SelectGenreByName("Disco")
            .SelectAlbumByName("Le Freak")
            .AddAlbumToCart()
            .Checkout()
            .SubmitShippingInfo(ObjectMother.CreateShippingInfo(), "Free");

        orderedPage.Title.Should().Be("Checkout Complete");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Actions and Locators&lt;/h2&gt;

&lt;p&gt;Page Objects tend to either perform actions or find items on the page. Seleno Page Objects provide a number of Actions and Locators that you can use.&lt;/p&gt;

&lt;h3&gt;Actions&lt;/h3&gt;

&lt;h4&gt;Navigator&lt;/h4&gt;

&lt;p&gt;Used to perform actions that take you to another page, such as clicking a button or a link, or navigating to a URL. There is a strongly typed option to navigate with a controller expression using routing. Page Objects expose the Navigator class with the Navigate() method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Navigate().To&amp;lt;RegisterPage&amp;gt;(By.LinkText("Register"));
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Page Reader&lt;/h4&gt;

&lt;p&gt;Read values from the page using view model based strongly typed methods. Page Objects that extend &lt;code&gt;Page&amp;lt;T&amp;gt;&lt;/code&gt;expose the Page Reader class with the Read() method. For example, to read all fields into a new instance of the current model type (&lt;code&gt;T&lt;/code&gt;) in a page you can use the &lt;code&gt;ModelFromPage&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var model = Read().ModelFromPage();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read() is currently only available with the generically-typed page object for now, but if you want this functionality with non-generic page objects (by instead supplying strings for the id) then to add an issue to our Github site so we can prioritise it.&lt;/p&gt;

&lt;h4&gt;Page Writer&lt;/h4&gt;

&lt;p&gt;Write values to the page using view model based strongly typed methods. Page Objects that extend &lt;code&gt;Page&amp;lt;T&amp;gt;&lt;/code&gt;expose the Page Writer class with the Input() method. For example, to write all fields from a model of the current type (&lt;code&gt;T&lt;/code&gt;) from the form on a page you can use the &lt;code&gt;Model&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Input().Model(modelInstanceToFillInFormUsing);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Input() is currently only available with the generically-typed page object for now, but if you want this functionality with non-generic page objects (by instead supplying strings for the id) then to add an issue to our Github site so we can prioritise it.&lt;/p&gt;

&lt;h4&gt;Script Executor&lt;/h4&gt;

&lt;p&gt;If none of the above meet your needs then you have the ultimate control by executing JavaScript with the Script Executor class. Page Objects expose the Script Executor class with the Execute() method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return Execute().ScriptAndReturn&amp;lt;TReturn&amp;gt;(string.Format("$('#{0}').attr('{1}')",Id,attributeName));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Locators&lt;/h3&gt;

&lt;h4&gt;Element Finder&lt;/h4&gt;

&lt;p&gt;Finds Selenium IWebElement items on the page, using the Selenium By selectors or the Seleno jQuery selectors. Page Objects expose the Element Finder class with the Find() method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var selector = string.Format("$('#{0} option:selected')", Id);
return Find().Element(By.jQuery(selector), WaitInSecondsUntilElementAvailable);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Navigation&lt;/h2&gt;

&lt;p&gt;A great way to slow down your tests is to start each test on the home page and then navigate to the page you want to test! It's much better to navigate directly to the page that you want to test. You can do this by calling the NavigateToInitialPage method on SelenoHost and passing in the &lt;em&gt;relative&lt;/em&gt; URL (to the root of the site being tested).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var page = SelenoHost.NavigateToInitialPage&amp;lt;RegisterPage&amp;gt;("/Account/Register");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, if you are using ASP.NET MVC then you can also use strongly typed controller action expressions to navigate to the page via routing. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var page = SelenoHost.NavigateToInitialPage&amp;lt;AccountController, RegisterPage&amp;gt;(x =&amp;gt; x.Register());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are using these MVC expressions, just remember to register the application routes when you are initializing Seleno.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SelenoHost.Run("MvcMusicStore", 12345);
MvcApplication.RegisterRoutes(RouteTable.Routes); 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Find out more&lt;/h2&gt;

&lt;p&gt;You can get the latest version of Seleno on &lt;a href="http://www.nuget.org/packages/TestStack.Seleno/"&gt;NuGet&lt;/a&gt;, or check out our &lt;a href="https://github.com/TestStack/TestStack.Seleno"&gt;github repository&lt;/a&gt; for the latest source code. &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/seleno-04/</guid><link>http://www.michael-whelan.net/seleno-04/</link><author>mjmwdev@gmail.com</author><category>Seleno</category><category>TestStack</category><title>Seleno 0.4</title><description>&lt;p&gt;&lt;a href="http://teststack.net/"&gt;TestStack&lt;/a&gt; have just released version 0.4 of &lt;a href="http://teststack.github.com/TestStack.Seleno/"&gt;Seleno&lt;/a&gt;, our web browser automation framework. It's a pretty big release with lots of bug fixes and enhancements and quite a number of breaking changes as we solidify the core API in preparation for a 1.0 release. We have done extensive refactoring to the core code and internal architecture to improve its testability and to lay the groundwork for new features we are wanting to provide in future releases. While we have strived to keep breaking changes to a minimum, we did choose to make a few as we saw opportunities to improve the API and make the framework easier to use. These changes will greatly reduce as Seleno matures but at this stage we feel it is good to let the API evolve.&lt;/p&gt;

</description><pubDate>Sun, 24 Mar 2013 00:00:00 Z</pubDate><a10:updated>2013-03-24T00:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;a href="http://teststack.net/"&gt;TestStack&lt;/a&gt; have just released version 0.4 of &lt;a href="http://teststack.github.com/TestStack.Seleno/"&gt;Seleno&lt;/a&gt;, our web browser automation framework. It's a pretty big release with lots of bug fixes and enhancements and quite a number of breaking changes as we solidify the core API in preparation for a 1.0 release. We have done extensive refactoring to the core code and internal architecture to improve its testability and to lay the groundwork for new features we are wanting to provide in future releases. While we have strived to keep breaking changes to a minimum, we did choose to make a few as we saw opportunities to improve the API and make the framework easier to use. These changes will greatly reduce as Seleno matures but at this stage we feel it is good to let the API evolve.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Breaking Changes&lt;/h2&gt;

&lt;p&gt;We have introduced a Breaking Changes text file, which we will update if we ever need to make a breaking change to the API. You can find it &lt;a href="https://github.com/TestStack/TestStack.Seleno/blob/master/BREAKING_CHANGES.md"&gt;here&lt;/a&gt;. Given the number of breaking changes in this release I strongly recommend that you check it out if you are upgrading from an earlier version!&lt;/p&gt;

&lt;h2&gt;New Features&lt;/h2&gt;

&lt;h3&gt;SelenoHost / configuration&lt;/h3&gt;

&lt;p&gt;One of the breaking changes is that &lt;code&gt;SelenoApplicationRunner&lt;/code&gt; has been renamed to &lt;code&gt;SelenoHost&lt;/code&gt;. This is the entry point into Seleno that is used to run and configure it. A number of new features have been added to its application configurator (the &lt;code&gt;Action&amp;lt;IAppConfigurator&amp;gt;&lt;/code&gt; parameter to the &lt;code&gt;SelenoHost.Run&lt;/code&gt; method).&lt;/p&gt;

&lt;p&gt;Namely, we have added the following new configuration features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to explicitly specify the initial page for a test and initialise the first page object in one line of code&lt;/li&gt;
&lt;li&gt;Ability to specify a Castle.Core logger factory to intercept our internal logging&lt;/li&gt;
&lt;li&gt;Ability to more easily specify a non-Firefox web browser&lt;/li&gt;
&lt;li&gt;Ability to specify a deployed web application out-of-the-box&lt;/li&gt;
&lt;li&gt;Ability to more explicitly specify your MVC routes&lt;/li&gt;
&lt;li&gt;Ability to override the &lt;a href="http://blog.mozilla.org/webqa/2012/07/12/webdrivers-implicit-wait-and-deleting-elements/"&gt;minimum (implicit) wait timeout inside of Selenium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information about each of these see the following sections.&lt;/p&gt;

&lt;h3&gt;Specify the initial page for a test&lt;/h3&gt;

&lt;p&gt;There is a new set of methods on &lt;code&gt;SelenoHost&lt;/code&gt; to both ensure that tests start on an explicit page (rather than whatever page the last test finished on) as well as instantiate the initial page object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Navigate to the homepage of the web application (default) 
// or a URL relative to the root of the web application
SelenoHost.NavigateToInitialPage&amp;lt;TPage&amp;gt;(string relativeUrl = "")
// Navigate to a URL as determined by the referenced controller action
SelenoHost.NavigateToInitialPage&amp;lt;TController, TPage&amp;gt;(Expression&amp;lt;Action&amp;lt;TController&amp;gt;&amp;gt; action)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example usages of these new methods:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HomePage page = SelenoHost.NavigateToInitialPage&amp;lt;HomePage&amp;gt;();
WeatherPage weatherPage = SelenoHost.NavigateToInitialPage&amp;lt;WeatherPage&amp;gt;("weather/2643743");
MovieListPage page = SelenoHost.NavigateToInitialPage&amp;lt;MoviesController, MovieListPage&amp;gt;(x =&amp;gt; x.Index());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to ensure all page objects are initialised correctly, we no longer support instantiating Page Objects with the new keyword (i.e. you must use the &lt;code&gt;NavigateToInitialPage&lt;/code&gt; method at the start of all your tests).&lt;/p&gt;

&lt;p&gt;In order to use the MVC controller action expression overload you need to tell Seleno about your MVC routes so it can generate the URL. See the section below to find out more about how to do that.&lt;/p&gt;

&lt;h3&gt;Logging&lt;/h3&gt;

&lt;p&gt;We have introduced Castle.Core as a dependency for logging purposes. This provides great flexibility as it is easy to implement its interfaces for whatever logging framework you use and it has built in support for major logging providers such as NLog and log4net.&lt;/p&gt;

&lt;p&gt;To configure a logging provider (by default it uses a Null logger) simply add it to the configuration when setting up Seleno. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SelenoHost.Run(..., c =&amp;gt; c.UsingLoggerFactory(new ConsoleFactory()));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Support for Internet Explorer and Chrome web drivers&lt;/h3&gt;

&lt;p&gt;We have added support for testing with Internet Explorer and Chrome. By default Seleno uses FireFox, but the fluent configuration allows for providing a delegate to create any Selenium RemoteWebDriver. For convenience Seleno provides a factory that produces a default instance of FireFox, Internet Explorer and Chrome webdrivers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SelenoHost.Run(..., c =&amp;gt; c.WithRemoteWebDriver(BrowserFactory.Chrome));
SelenoHost.Run(..., c =&amp;gt; c.WithRemoteWebDriver(BrowserFactory.InternetExplorer32));
SelenoHost.Run(..., c =&amp;gt; c.WithRemoteWebDriver(BrowserFactory.InternetExplorer64));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both Chrome and Internet Explorer require server executables to be present in the test project bin directory in order for their WebDrivers to work. For the moment you need to manually do this, but we will hopefully be able to make this automatic in the future. You can find out more information here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/selenium/wiki/ChromeDriver"&gt;Chrome&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/selenium/wiki/InternetExplorerDriver"&gt;Internet Explorer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Added support for internet applications&lt;/h3&gt;

&lt;p&gt;We had a Seleno user get in touch with us to ask how she could test a deployed website, rather than a Visual Studio project. Seleno could already achieve that with the &lt;code&gt;WithWebServer&lt;/code&gt; configuration method, but we thought it was a useful scenario to support out of the box. To test deployed applications you just need to use the &lt;code&gt;InternetWebServer&lt;/code&gt; class in the configuration method and provide the base URL for the website.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SelenoHost.Run(..., c =&amp;gt; c.WithWebServer(new InternetWebServer("http://www.bbc.co.uk")));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Specifying MVC routes&lt;/h3&gt;

&lt;p&gt;Previously Seleno used the global &lt;code&gt;RouteTable.Routes&lt;/code&gt; object when determining the URLs for MVC routes. We didn't like this because using the global object might affect other code you have running your test assembly. Furthermore, providing a configuration method to specify the routes is more in keeping with how the rest of Seleno is globally configured and is thus more discoverable to new users. To use the configuration you need to use the new &lt;code&gt;WithRouteConfig&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SelenoHost.Run(..., c =&amp;gt; c.WithRouteConfig(RouteConfig.RegisterRoutes));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Overriding minimum (implicit) wait timeout&lt;/h3&gt;

&lt;p&gt;When looking for an element on the page that you know has a likelihood of not being present it can be really annoying to see the test hang for 10 seconds while the Selenium Driver waits for its implicit timeout. There is a way to override this timeout, so we thought we would give you the flexibility to easily accomplish this to give you more control. This, combined with the fact that all Seleno methods that might need to wait have an optional &lt;code&gt;maxWait&lt;/code&gt; parameter, gives you a lot of flexibility to tweak your tests to be more reliable, but also as fast as possible. You can change from the default 10s implicit timeout by using the new &lt;code&gt;WithMinimumWaitTimeoutOf&lt;/code&gt; configuration method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SelenoHost.Run(..., c =&amp;gt; c.WithMinimumWaitTimeoutOf(TimeSpan.FromSeconds(2)));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Continuous Integration support&lt;/h3&gt;

&lt;p&gt;Previously, there were problems running Seleno tests in TeamCity (in particular if you had dotCover code coverage running) whereby the test run would hang indefinitely. These problems have been resolved and we can now comfortably say that TeamCity (and by association other CI servers) are supported for Seleno. In fact, we have a TeamCity server that builds Seleno and publishes it to NuGet (this includes running a bunch of acceptance tests) so if it breaks in the future we will know!&lt;/p&gt;

&lt;h3&gt;HTML Control Model&lt;/h3&gt;

&lt;p&gt;One of our main contributors, Franck Theolade, has put a lot of work into an HTML control model which supports all of the &lt;a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.2"&gt;W3C form controls&lt;/a&gt;. The Page Object design pattern is not limited to modelling whole pages, but can also include modelling parts of a page, such as menus, or even controls, as is the case here. Just like with page objects, the control implementation is responsible for interacting with the page and retrieving and setting its value.&lt;/p&gt;

&lt;p&gt;For example you can make use of the controls directly within your page objects by using code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var textboxValue = HtmlControlFor&amp;lt;TextBox&amp;gt;("StringField").Value;
// Or, if you are using strongly-typed view models
var textboxValue = HtmlControlFor&amp;lt;TextBox&amp;gt;(m =&amp;gt; m.StringField).Value;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following implementations ship with Seleno 0.4 (and can be used with the &lt;code&gt;HtmlControlFor&lt;/code&gt; method):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TextBox&lt;/li&gt;
&lt;li&gt;TextArea&lt;/li&gt;
&lt;li&gt;DropDown&lt;/li&gt;
&lt;li&gt;CheckBox&lt;/li&gt;
&lt;li&gt;RadioButtonGroup&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We cannot possibly support every vendor control, so the goal was to support standard controls out-of-the-box and then make the control model easy to extend for custom controls by implementing the IHtmlControl interface. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface IHtmlControl
{
    string Id { get; }
    string Name { get; }
    string Title { get; set; }
    bool ReadOnly { get; set; }
    bool Disabled { get; set; }

    TReturn AttributeValueAs&amp;lt;TReturn&amp;gt;(string attributeName);
    void SetAttributeValue&amp;lt;TValue&amp;gt;(string attributeName, TValue value);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The easiest way to do this is to inherit from the &lt;code&gt;HtmlControl&lt;/code&gt; abstract class, but if you need more flexibility then you can inherit from the &lt;code&gt;UiComponent&lt;/code&gt; class and implement the &lt;code&gt;IHtmlControl&lt;/code&gt; interface. To illustrate, here is the TextArea implementation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class TextArea : HTMLControl
{
    public string Content
    {
        get
        {
            return Find().Element(By.Id(Id)).GetAttribute("value");
        }
        set
        {
            var scriptToExecute = string.Format(@"$(""#{0}"").text(""{1}"")", Id, value.ToJavaScriptString());
            Execute().ExecuteScript(scriptToExecute);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Common usage scenarios with HTML controls have been catered for by using the new HTML control model internally to provide the following methods within page objects with a strongly-typed view model (i.e. &lt;code&gt;Page&amp;lt;T&amp;gt;&lt;/code&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Read().&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bool CheckBoxValue&amp;lt;TProperty&amp;gt;(Expression&amp;lt;Func&amp;lt;TViewModel, TProperty&amp;gt;&amp;gt; checkBoxPropertySelector, TimeSpan maxWait = default(TimeSpan))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string TextboxValue&amp;lt;TProperty&amp;gt;(Expression&amp;lt;Func&amp;lt;TViewModel, TProperty&amp;gt;&amp;gt; textBoxPropertySelector, TimeSpan maxWait = default(TimeSpan))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string SelectedOptionTextInDropDown&amp;lt;TProperty&amp;gt;(Expression&amp;lt;Func&amp;lt;TViewModel, TProperty&amp;gt;&amp;gt; dropDownSelector, TimeSpan maxWait = default(TimeSpan))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TProperty SelectedOptionValueInDropDown&amp;lt;TProperty&amp;gt;(Expression&amp;lt;Func&amp;lt;TViewModel, TProperty&amp;gt;&amp;gt; dropDownSelector, TimeSpan maxWait = default(TimeSpan))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TProperty SelectedButtonInRadioGroup&amp;lt;TProperty&amp;gt;(Expression&amp;lt;Func&amp;lt;TViewModel, TProperty&amp;gt;&amp;gt; radioGroupButtonSelector, TimeSpan maxWait = default(TimeSpan))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool HasSelectedRadioButtonInRadioGroup&amp;lt;TProperty&amp;gt;(Expression&amp;lt;Func&amp;lt;TViewModel, TProperty&amp;gt;&amp;gt; radioGroupButtonSelector, TimeSpan maxWait = default(TimeSpan))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string TextAreaContent(Expression&amp;lt;Func&amp;lt;TViewModel, string&amp;gt;&amp;gt; textAreaPropertySelector, TimeSpan maxWait = default(TimeSpan))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Input().&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;void ReplaceInputValueWith&amp;lt;TProperty&amp;gt;(Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt; propertySelector, TProperty inputValue)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void ReplaceInputValueWith(string inputName, string value)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void TickCheckbox(Expression&amp;lt;Func&amp;lt;TModel, bool&amp;gt;&amp;gt; propertySelector, bool isTicked)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void UpdateTextAreaContent(Expression&amp;lt;Func&amp;lt;TModel, string&amp;gt;&amp;gt; textAreaPropertySelector, string content, TimeSpan maxWait = default(TimeSpan))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void SelectByOptionValueInDropDown&amp;lt;TProperty&amp;gt;(Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt; dropDownSelector,TProperty optionValue)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void SelectByOptionTextInDropDown&amp;lt;TProperty&amp;gt;(Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt; dropDownSelector,string optionText)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void SelectButtonInRadioGroup&amp;lt;TProperty&amp;gt;(Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt; radioGroupButtonSelector, TProperty buttonValue)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Internal improvements&lt;/h2&gt;

&lt;h3&gt;Continuous Integration&lt;/h3&gt;

&lt;p&gt;Since &lt;a href="http://robdmoore.id.au/"&gt;Rob Moore&lt;/a&gt; joined TestStack he has had a major impact on Seleno. In particular, he has done some very cool things with continuous integration and automated deployments to allow our TeamCity continuous integration server to integrate with our &lt;a href="https://github.com/TestStack/TestStack.Seleno"&gt;github repository&lt;/a&gt; and to give us the ability to safely, confidently and quickly deploy new packages to NuGet - we are hoping to have a much tighter release cycle for NuGet packages going forward. Many thanks also need to go to &lt;a href="http://jake.ginnivan.net/"&gt;Jake Ginnivan&lt;/a&gt; for all his help with this given he has graciously set up the CI infrastructure! One really big time saver is that we are now taking advantage of TeamCity's ability to monitor github for pull requests and automatically build and report whether or not it is OK to merge the changes:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/image_thumb.png" alt="TeamCity github integration" /&gt;&lt;/p&gt;

&lt;h3&gt;Inversion of Control&lt;/h3&gt;

&lt;p&gt;We have replaced the Funq inversion of control container with Autofac. We are just using it for our internal configuration currently and have not had the need to expose it externally. We use ILMerge so that it is not a dependency when you download the NuGet package. This allows us to manage lifetimes much more easily within the core code and leaves us with a more maintainable code base.&lt;/p&gt;

&lt;h3&gt;Public API&lt;/h3&gt;

&lt;p&gt;We have tweaked our public API significantly in order to make it less confusing and more intention revealing. This involes setting a lot of classes that contain internal implementations to &lt;code&gt;internal&lt;/code&gt;. For a full list, please see the &lt;a href="https://github.com/TestStack/TestStack.Seleno/blob/master/BREAKING_CHANGES.md"&gt;BREAKING_CHANGES.md file&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Extensive test coverage&lt;/h3&gt;

&lt;p&gt;Our unit and integration test coverage of the codebase has been significantly improved. This gives us greater confidence n the codebase. We strongly feel that Seleno is "production-ready" now and as such will be swiftly moving towards a 1.0 release.&lt;/p&gt;

&lt;h2&gt;Go get it!&lt;/h2&gt;

&lt;p&gt;As usual, you can get the latest version of Seleno on &lt;a href="http://www.nuget.org/packages/TestStack.Seleno/"&gt;NuGet&lt;/a&gt;, or check out our &lt;a href="https://github.com/TestStack/TestStack.Seleno"&gt;github repository&lt;/a&gt; for the latest source code. Let us know what you think, or if there are any features that you would like to see. Feel free to add an issue or pull request - the more community interaction we get the better we can make Seleno!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/bddfy-reports/</guid><link>http://www.michael-whelan.net/bddfy-reports/</link><author>mjmwdev@gmail.com</author><category>BDDfy</category><category>TestStack</category><title>BDDfy In Action: Reports</title><description>&lt;p&gt;BDDfy provides a rich array of reports to choose from and is also very easy to extend if you want to add your own reports. The two main reports are the Console Report and the HTML Report and both of these are on by default, though you can turn them off if you want to. In addition there is a Markdown Report, and recently a Diagnostics Report using JSON has been added. Both of these are off by default. &lt;/p&gt;
</description><pubDate>Mon, 25 Feb 2013 00:00:00 Z</pubDate><a10:updated>2013-02-25T00:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;strong&gt;This article is part of the &lt;a href="http://www.michael-whelan.net/bddfy-in-action/"&gt;BDDfy In Action&lt;/a&gt; series.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;BDDfy provides a rich array of reports to choose from and is also very easy to extend if you want to add your own reports. The two main reports are the Console Report and the HTML Report and both of these are on by default, though you can turn them off if you want to. In addition there is a Markdown Report, and recently a Diagnostics Report using JSON has been added. Both of these are off by default. &lt;/p&gt;

&lt;h2&gt;The Reports&lt;/h2&gt;

&lt;p&gt;I am going to start with an overview of the different reports available in BDDfy, using the ATM sample, available in the &lt;a href="https://github.com/TestStack/TestStack.BDDfy/tree/master/TestStack.BDDfy.Samples/Atm/"&gt;BDDfy source code&lt;/a&gt;, or on &lt;a href="http://www.nuget.org/packages/TestStack.BDDfy.Samples/"&gt;NuGet&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Console Report&lt;/h3&gt;

&lt;p&gt;The Console Report is what provides feedback in Visual Studio when you run your tests. If you run the tests with TestDriven.Net then you will see the output from all the tests in the output window.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-sample-test-driven-output.png" alt="alt text" /&gt;&lt;/p&gt;

&lt;p&gt;At the end of the report it will also provide a summary of how many tests passed, failed, or were skipped and how long the tests took to run.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-sample-test-driven-summary-output.png" alt="alt text" /&gt;&lt;/p&gt;

&lt;p&gt;If you run the tests in ReSharper then you see the output of each test individually when you select it in the Unit Test Sessions window.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-sample-resharper-output.png" alt="alt text" /&gt;&lt;/p&gt;

&lt;p&gt;When the test passes, you just see the Scenario listed out, and its story if it has one. If the test fails, or is not implemented yet, then you will also see details alongside each step of which steps were executed and what their status was and an exception trace detailing the error information.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-sample-resharper-exception-output.png" alt="alt text" /&gt;&lt;/p&gt;

&lt;h3&gt;HTML Report&lt;/h3&gt;

&lt;p&gt;If you are practicing BDD, then you will probably be interested in living documentation. BDDfy can help with this with its HTML report, which dev teams can share with their customers to see the progress in a very user friendly and accessible way. Every time you run tests with BDDfy it creates an HTML report in the bin directory of the test project. The report has a summary at the top, listing out how many Stories/Scenarios have run, and the totals for each type of execution result. The report is interactive, and lets you expand and collapse individual stories and scenarios or all at once. The report is very customisable and you are able to change the header, description, and the location where the report is saved to. You can also add your own CSS and JavaScript files to really open up the customisation possibilities.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-sample-atm-html.png" alt="alt text" /&gt;&lt;/p&gt;

&lt;h3&gt;Markdown Report&lt;/h3&gt;

&lt;p&gt;The Markdown Report can be turned on using the BDDfy Configurator (more on that below). The report is written in the GitHub Flavoured Markdown format. Markdown is a really useful format for documenting (I write this blog in markdown). A possible use for this would be as part of efforts to generate documentation, which might be particularly useful for open source developers to generate wiki documents from their code, for example.&lt;/p&gt;

&lt;p&gt;The Markdown Report is output to the bin directory of the test project and is named BDDfy.md. The picture below shows the BDDfy.md file in the MarkPad markdown editor. The left pane shows the raw text view and the pane on the right shows how it would be displayed on a web page.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-sample-atm-markdown.png" alt="alt text" /&gt;&lt;/p&gt;

&lt;h3&gt;Diagnostics Report&lt;/h3&gt;

&lt;p&gt;The Diagnostics Report is the most recent addition to the BDDfy stable. It is also off by default and can be turned on using the BDDfy Configurator. In BDDfy we can measure how long every step took to execute and then aggregate that data to see how long each Scenario and Story took to execute. This is particularly useful information if you have long running tests, such as browser-based functional tests, and want to identify the parts of the test that are having the worst impact on performance. For example, is it particularly slow when interacting with the database, or is it perhaps the rendering of the web pages?&lt;/p&gt;

&lt;p&gt;The Diagnostics Report is created in the JSON format. This is useful if you want to load the data into another system, perhaps to persist test runs to compare performance over time.  The Diagnostics Report is output to the bin directory of the test project and is named Diagnostics.json. Here is the output for the ATM tests.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    "Stories":
    [
        {
            "Name":"Account holder withdraws cash",
            "Duration":8,
            "Scenarios":
            [
                {
                    "Name":"Account has insufficient fund",
                    "Duration":8,
                    "Steps":
                    [
                        {
                            "Name":"Given the Account Balance is $10",
                            "Duration":1
                        },
                        {
                            "Name":"And the Card is valid",
                            "Duration":0
                        },
                        {
                            "Name":"And the machine contains enough money",
                            "Duration":0
                        },
                        {
                            "Name":"When the Account Holder requests $20",
                            "Duration":0
                        },
                        {
                            "Name":"Then the ATM should not dispense any Money",
                            "Duration":5
                        },
                        {
                            "Name":"And the ATM should say there are Insufficient Funds",
                            "Duration":0
                        },
                        {
                            "Name":"And the Account Balance should be $20",
                            "Duration":0
                        },
                        {
                            "Name":"And the Card should be returned",
                            "Duration":0
                        }
                    ]
                }
            ]
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Configuring Reports&lt;/h2&gt;

&lt;p&gt;The Configurator class is the main configuration point for BDDfy and should be called before all your tests run if you are wanting to change the default behaviour. For example, in NUnit you could call it from the SetUpFixture. &lt;/p&gt;

&lt;p&gt;BDDfy implements components as processors in a pipeline (using the &lt;a href="http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern"&gt;Chain of Responsibility pattern&lt;/a&gt;) and reports are just another type of processor. Processors can be switched on and off using the Configurator class by calling the Enable or Disable methods. As previously mentioned, the Console Report and the HTML Report are both on by default. If you don’t want them to run then you can disable them like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configurator.Processors.ConsoleReport.Disable();
Configurator.BatchProcessors.HtmlReport.Disable();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, you can turn on the Markdown and Diagnostics reports:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configurator.BatchProcessors.MarkDownReport.Enable();
Configurator.BatchProcessors.DiagnosticsReport.Enable();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this is great if you want to turn a processor off for all the tests, it isn’t much help if you want to just turn it on or off for some of the tests. Fortunately, there is also the the RunsOn method, which allows you to enable or disable processors using a predicate. This allows a lot of flexibility, and you could even choose to combine predicates so that, for example, half the tests ran with the Console Report and the other half ran with the Markdown Report.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configurator.Processors.ConsoleReport
    .RunsOn(scenario =&amp;gt; scenario.GetType().Namespace.StartsWith("MyCompany.MyApp.Domain"));
Configurator.Processors.MarkdownReport
    .RunsOn(scenario =&amp;gt; !scenario.GetType().Namespace.StartsWith("MyCompany.MyApp.Domain"));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Getting reports without running the tests&lt;/h3&gt;

&lt;p&gt;Having processors run in a pipeline leads to some interesting possibilities. One that I particularly like is that you can get all of the reports without actually running the tests. To do this you just need to turn off the TestRunner processor. The reports will still be generated, the only difference is that they will have a status of Not Executed!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configurator.Processors.TestRunner.Disable();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is really useful when you want to print out the reports as documentation but don’t want to have to wait for the tests to run.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/bddfy-in-action/</guid><link>http://www.michael-whelan.net/bddfy-in-action/</link><author>mjmwdev@gmail.com</author><category>BDDfy</category><category>TestStack</category><title>BDDfy In Action</title><description>&lt;p&gt;This is a series of posts about &lt;a href="http://teststack.github.com/pages/BDDfy.html"&gt;BDDfy&lt;/a&gt;, the Behaviour Driven Development framework from &lt;a href="http://teststack.github.com/"&gt;TestStack&lt;/a&gt;. This series of posts builds on and continues the series of articles by the BDDfy creator, &lt;a href="http://www.mehdi-khalili.com/about"&gt;Mehdi Khalili&lt;/a&gt;, and shows 'BDDfy In Action.' I am a contributor on the project.&lt;/p&gt;

</description><pubDate>Sun, 24 Feb 2013 00:00:00 Z</pubDate><a10:updated>2013-02-24T00:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;This is a series of posts about &lt;a href="http://teststack.github.com/pages/BDDfy.html"&gt;BDDfy&lt;/a&gt;, the Behaviour Driven Development framework from &lt;a href="http://teststack.github.com/"&gt;TestStack&lt;/a&gt;. This series of posts builds on and continues the series of articles by the BDDfy creator, &lt;a href="http://www.mehdi-khalili.com/about"&gt;Mehdi Khalili&lt;/a&gt;, and shows 'BDDfy In Action.' I am a contributor on the project.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Mehdi has already written the following posts:&lt;/p&gt;

&lt;h2&gt;Using BDDfy&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.mehdi-khalili.com/bddify-in-action/introduction"&gt;Introducing BDDfy&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mehdi-khalili.com/bddify-in-action/method-name-conventions"&gt;Using Method Name Conventions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mehdi-khalili.com/bddify-in-action/story"&gt;Writing stories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mehdi-khalili.com/bddify-in-action/executable-attributes"&gt;Using Executable Attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mehdi-khalili.com/bddify-in-action/fluent-api"&gt;Using the Fluent API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mehdi-khalili.com/bddify-in-action/fluent-api"&gt;Input parameters in the Fluent API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mix and match them all&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am going to continue the series with one more post in the 'Using BDDfy' section:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.michael-whelan.net/bddfy-reports/"&gt;BDDfy Reports&lt;/a&gt;: An overview of the reports in BDDfy and basic configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then I am going to move on to a series of posts on customizing and extending BDDfy.&lt;/p&gt;

&lt;h2&gt;Customizing and Extending BDDfy&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.michael-whelan.net/bddfy-architecture-overview/"&gt;BDDfy architecture overview&lt;/a&gt;: A look at the main components of the BDDfy architecture to provide some context for customizing and extending BDDfy and to illustrate the extensibility points&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.michael-whelan.net/custom-reports"&gt;Customizing and Extending BDDfy Reports&lt;/a&gt;: Customizing the HTML Report and creating your own reports&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.michael-whelan.net/roll-your-own-testing-framework/"&gt;Case Study - Rolling your own testing framework&lt;/a&gt;: A sample application demonstrating how you can replace whole pieces of the BDDfy framework to customize it to your own needs. This will include
&lt;ul&gt;
&lt;li&gt;Create a new MethodNameStepScanner to replace the BDDfy Given When Then grammar with a different grammar of EstablishContext, BecauseOf, ItShould. &lt;/li&gt;
&lt;li&gt;Make BDDfy work with Story classes rather than Story attributes.&lt;/li&gt;
&lt;li&gt;Plug in a new StoryMetaDataScanner&lt;/li&gt;
&lt;li&gt;Customize the HTML Report&lt;/li&gt;
&lt;li&gt;Run BDDfy tests in a console application without any test framework or test runner.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.michael-whelan.net/roll-your-own-testing-framework-2/"&gt;Case Study - Rolling your own testing framework (2)&lt;/a&gt;: Adding parallel testing to the custom framework.&lt;/li&gt;
&lt;li&gt;Using BDDfy in a Class per Scenario style for full system tests: Using BDDfy with an inversion of control container.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.michael-whelan.net/using-bddfy-for-unit-tests"&gt;Using BDDfy in a Class per Scenario style for unit tests&lt;/a&gt;: Using BDDfy with an auto-mocking container.&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/paste-json-as-classes/</guid><link>http://www.michael-whelan.net/paste-json-as-classes/</link><author>mjmwdev@gmail.com</author><category>Visual Studio</category><title>Paste JSON as Classes</title><description>&lt;p&gt;In the recent &lt;a href="http://www.hanselman.com/blog/ReleasedASPNETAndWebTools20122InContext.aspx"&gt;ASP.Net and Web Tools 2012.2 Update&lt;/a&gt; a new feature was added to allow pasting of JSON as .Net classes. This feature allows you to generate strongly typed classes in C# or VB.NET from valid JSON text. To use the feature, open a .vb or .cs file, copy the JSON text to the clipboard, select “Paste Special” from the Edit menu, and then select “Paste JSON As Classes.”&lt;/p&gt;

&lt;p&gt;The feature uses the &lt;a href="http://json.codeplex.com/"&gt;Json.Net JSON parser&lt;/a&gt; from Newtonsoft to parse JSON text from the clipboard. Once the parser validates the clipboard data as valid JSON, it converts it into the C# or VB.NET class depending on the selected file type.  If the JSON object on the clipboard is invalid, a dialog is displayed showing the Json.Net error message with the reason the text was not valid JSON.&lt;/p&gt;

</description><pubDate>Sat, 23 Feb 2013 00:00:00 Z</pubDate><a10:updated>2013-02-23T00:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;In the recent &lt;a href="http://www.hanselman.com/blog/ReleasedASPNETAndWebTools20122InContext.aspx"&gt;ASP.Net and Web Tools 2012.2 Update&lt;/a&gt; a new feature was added to allow pasting of JSON as .Net classes. This feature allows you to generate strongly typed classes in C# or VB.NET from valid JSON text. To use the feature, open a .vb or .cs file, copy the JSON text to the clipboard, select “Paste Special” from the Edit menu, and then select “Paste JSON As Classes.”&lt;/p&gt;

&lt;p&gt;The feature uses the &lt;a href="http://json.codeplex.com/"&gt;Json.Net JSON parser&lt;/a&gt; from Newtonsoft to parse JSON text from the clipboard. Once the parser validates the clipboard data as valid JSON, it converts it into the C# or VB.NET class depending on the selected file type.  If the JSON object on the clipboard is invalid, a dialog is displayed showing the Json.Net error message with the reason the text was not valid JSON.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I am currently working on a new diagnostics report for &lt;a href="http://teststack.github.com/pages/BDDfy.html"&gt;BDDfy&lt;/a&gt; which outputs the time it took to run each story, scenario, and scenario step (each Given When Then method). This produces the following JSON output for the BDDfy ATM sample.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    "Stories":
    [
        {
            "Name":"Account holder withdraws cash",
            "Duration":30,
            "Scenarios":
            [
                {
                    "Name":"Account has insufficient fund",
                    "Duration":29,
                    "Steps":
                    [
                        {
                            "Name":"Given the Account Balance is $10",
                            "Duration":1
                        },
                        {
                            "Name":"And the Card is valid",
                            "Duration":0
                        },
                        {
                            "Name":"And the machine contains enough money",
                            "Duration":4
                        },
                        {
                            "Name":"When the Account Holder requests $20",
                            "Duration":0
                        },
                        {
                            "Name":"Then the ATM should not dispense any Money",
                            "Duration":20
                        },
                        {
                            "Name":"And the ATM should say there are Insufficient Funds",
                            "Duration":0
                        },
                        {
                            "Name":"And the Account Balance should be $20",
                            "Duration":0
                        },
                        {
                            "Name":"And the Card should be returned",
                            "Duration":1
                        }
                    ]
                },
                {
                    "Name":"Account has sufficient fund",
                    "Duration":1,
                    "Steps":
                    [
                        {
                            "Name":"Given the account balance is $100",
                            "Duration":0
                        },
                        {
                            "Name":"And the Card is valid",
                            "Duration":0
                        },
                        {
                            "Name":"And the machine contains enough money",
                            "Duration":0
                        },
                        {
                            "Name":"When the account holder requests $20",
                            "Duration":0
                        },
                        {
                            "Name":"Then the ATM should dispense $20",
                            "Duration":0
                        },
                        {
                            "Name":"And the account balance should be $80",
                            "Duration":0
                        },
                        {
                            "Name":"And the card should be returned",
                            "Duration":0
                        }
                    ]
                },
                {
                    "Name":"Card has been disabled",
                    "Duration":0,
                    "Steps":
                    [
                        {
                            "Name":"Given the Card is disabled",
                            "Duration":0
                        },
                        {
                            "Name":"When the Account Holder requests 20",
                            "Duration":0
                        },
                        {
                            "Name":"Then Card is retained",
                            "Duration":0
                        },
                        {
                            "Name":"And the ATM should say the Card has been retained",
                            "Duration":0
                        }
                    ]
                }
            ]
        },
        {
            "Name":"Tic tac toe",
            "Duration":25,
            "Scenarios":
            [
                {
                    "Name":"Cat\u0027s game",
                    "Duration":13,
                    "Steps":
                    [
                        {
                            "Name":"Given the board\r\nX, O, X\r\nO, O, X\r\nX, X, O",
                            "Duration":5
                        },
                        {
                            "Name":"Then it should be a cats game",
                            "Duration":7
                        }
                    ]
                },
                {
                    "Name":"Diagonal win",
                    "Duration":0,
                    "Steps":
                    [
                        {
                            "Name":"Given the board\r\nX, O, O\r\nX, O, X\r\nO, X,  ",
                            "Duration":0
                        },
                        {
                            "Name":"Then the winner is O",
                            "Duration":0
                        }
                    ]
                },
                {
                    "Name":"Horizontal win",
                    "Duration":0,
                    "Steps":
                    [
                        {
                            "Name":"Given the board\r\nX, X, X\r\nX, O, O\r\nO, O, X",
                            "Duration":0
                        },
                        {
                            "Name":"Then the winner is X",
                            "Duration":0
                        }
                    ]
                },
                {
                    "Name":"Horizontal win in the bottom",
                    "Duration":1,
                    "Steps":
                    [
                        {
                            "Name":"Given the board\r\nX, X,  \r\nX, O, X\r\nO, O, O",
                            "Duration":1
                        },
                        {
                            "Name":"Then the winner is O",
                            "Duration":0
                        }
                    ]
                },
                {
                    "Name":"Horizontal win in the middle",
                    "Duration":0,
                    "Steps":
                    [
                        {
                            "Name":"Given the board\r\nX, O, O\r\nX, X, X\r\nO, O, X",
                            "Duration":0
                        },
                        {
                            "Name":"Then the winner is X",
                            "Duration":0
                        }
                    ]
                },
                {
                    "Name":"O wins",
                    "Duration":6,
                    "Steps":
                    [
                        {
                            "Name":"Given the following board X, X, O, X, O,  ,  ,  ,",
                            "Duration":0
                        },
                        {
                            "Name":"When the game is played at (2, 0)",
                            "Duration":5
                        },
                        {
                            "Name":"Then the winner should be O",
                            "Duration":0
                        }
                    ]
                },
                {
                    "Name":"Vertical win in the left",
                    "Duration":0,
                    "Steps":
                    [
                        {
                            "Name":"Given the board\r\nX, O, O\r\nX, O, X\r\nX, X, O",
                            "Duration":0
                        },
                        {
                            "Name":"Then the winner is X",
                            "Duration":0
                        }
                    ]
                },
                {
                    "Name":"Vertical win in the middle",
                    "Duration":0,
                    "Steps":
                    [
                        {
                            "Name":"Given the board\r\n , X, O\r\nO, X, O\r\nO, X, X",
                            "Duration":0
                        },
                        {
                            "Name":"Then the winner is X",
                            "Duration":0
                        }
                    ]
                },
                {
                    "Name":"Vertical win in the right",
                    "Duration":0,
                    "Steps":
                    [
                        {
                            "Name":"Given the board\r\nX, O, X\r\nO, O, X\r\nO, X, X",
                            "Duration":0
                        },
                        {
                            "Name":"Then the winner is X",
                            "Duration":0
                        }
                    ]
                },
                {
                    "Name":"When x and o play their first moves",
                    "Duration":5,
                    "Steps":
                    [
                        {
                            "Name":"Given a new game",
                            "Duration":0
                        },
                        {
                            "Name":"When X and O play on (0, 0), (2, 2)",
                            "Duration":0
                        },
                        {
                            "Name":"Then the board state should be X,  ,  ,  ,  ,  ,  ,  , O",
                            "Duration":4
                        }
                    ]
                },
                {
                    "Name":"X wins",
                    "Duration":0,
                    "Steps":
                    [
                        {
                            "Name":"Given the board\r\nX, X, O\r\nX, X, O\r\nO, O,  ",
                            "Duration":0
                        },
                        {
                            "Name":"When x plays in the bottom right",
                            "Duration":0
                        },
                        {
                            "Name":"Then the winner should be x",
                            "Duration":0
                        }
                    ]
                }
            ]
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Paste JSON as Classes operation produces the following C# output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Rootobject
{
    public Story[] Stories { get; set; }
}

public class Story
{
    public string Name { get; set; }
    public int Duration { get; set; }
    public Scenario[] Scenarios { get; set; }
}

public class Scenario
{
    public string Name { get; set; }
    public int Duration { get; set; }
    public Step[] Steps { get; set; }
}

public class Step
{
    public string Name { get; set; }
    public int Duration { get; set; }
}    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find the ATM sample in the &lt;a href="https://github.com/TestStack/TestStack.BDDfy/tree/master/TestStack.BDDfy.Samples/Atm"&gt;BDDfy source code&lt;/a&gt;, or you can install it from &lt;a href="http://www.nuget.org/packages/TestStack.BDDfy.Samples"&gt;NuGet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can read more about the Paste JSON as Classes feature &lt;a href="http://blogs.msdn.com/b/webdev/archive/2012/12/18/paste-json-as-classes-in-asp-net-and-web-tools-2012-2-rc.aspx"&gt;here:&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/nuget-add-bindingredirect/</guid><link>http://www.michael-whelan.net/nuget-add-bindingredirect/</link><author>mjmwdev@gmail.com</author><category>Visual Studio</category><title>NuGet Add-BindingRedirect</title><description>&lt;p&gt;This is one of those "note to self" posts. I recently came across this NuGet feature which is useful on those infrequent occasions when I need to do binding redirects. Hopefully others will find it useful too! &lt;/p&gt;

&lt;p&gt;I was wanting to use &lt;a href="https://github.com/robdmoore/AutofacContrib.NSubstitute"&gt;AutoSubstitute&lt;/a&gt;, the cool little auto mocking container from fellow TestStacker &lt;a href="http://robdmoore.id.au/"&gt;Rob Moore&lt;/a&gt; that uses Autofac to resolve unknown dependencies from NSubstitute. The problem was that AutoSubstitute is strongly named and when an assembly has a strong name, the binding to that assembly becomes very strict. Because AutoSubstitute currently binds to NSubstitute 1.4.0 and I was using 1.4.3 I was getting a FileLoadException. &lt;/p&gt;

</description><pubDate>Wed, 09 Jan 2013 00:00:00 Z</pubDate><a10:updated>2013-01-09T00:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;This is one of those "note to self" posts. I recently came across this NuGet feature which is useful on those infrequent occasions when I need to do binding redirects. Hopefully others will find it useful too! &lt;/p&gt;

&lt;p&gt;I was wanting to use &lt;a href="https://github.com/robdmoore/AutofacContrib.NSubstitute"&gt;AutoSubstitute&lt;/a&gt;, the cool little auto mocking container from fellow TestStacker &lt;a href="http://robdmoore.id.au/"&gt;Rob Moore&lt;/a&gt; that uses Autofac to resolve unknown dependencies from NSubstitute. The problem was that AutoSubstitute is strongly named and when an assembly has a strong name, the binding to that assembly becomes very strict. Because AutoSubstitute currently binds to NSubstitute 1.4.0 and I was using 1.4.3 I was getting a FileLoadException. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;No worries, just need to add a binding redirect. Thankfully, I no longer have to do it by hand. Open the NuGet Package Manager Console, specify the appropriate Default Project and enter the command Add-BindingRedirect. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/nuget_addbindingredirect.png" alt="alt text" /&gt;&lt;/p&gt;

&lt;p&gt;As if by magic, an app.config is added to the project (if one doesn't exist already) and the appropriate information added.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;configuration&amp;gt;
  &amp;lt;runtime&amp;gt;
    &amp;lt;assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1"&amp;gt;
      &amp;lt;dependentAssembly&amp;gt;
        &amp;lt;assemblyIdentity name="NSubstitute" publicKeyToken="92dd2e9066daa5ca" culture="neutral" /&amp;gt;
        &amp;lt;bindingRedirect oldVersion="0.0.0.0-1.4.3.0" newVersion="1.4.3.0" /&amp;gt;
      &amp;lt;/dependentAssembly&amp;gt;
    &amp;lt;/assemblyBinding&amp;gt;
  &amp;lt;/runtime&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sweet!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/using-phantomjs-with-webdriver/</guid><link>http://www.michael-whelan.net/using-phantomjs-with-webdriver/</link><author>mjmwdev@gmail.com</author><title>Using PhantomJS and GhostDriver with Selenium WebDriver in .Net</title><description>&lt;p&gt;With GhostDriver 1.0 &lt;a href="http://blog.ivandemarino.me/2012/12/04/Finally-GhostDriver-1-0-0"&gt;recently being released&lt;/a&gt; I was keen to check out using PhantomJS with WebDriver. I couldn’t find any .Net examples so I thought I would post one myself. &lt;/p&gt;

&lt;p&gt;&lt;a href="http://phantomjs.org/"&gt;PhantomJS&lt;/a&gt; is a headless browser. That means it is a web browser, but the rendered web pages are never actually displayed. This makes it fast and an excellent candidate for speeding up those slow functional tests. According to their website PhantomJS is “a headless WebKit with JavaScript API.” Webkit is the layout engine used by a few browsers, such as Chrome and Safari. So PhantomJS is a browser, but a headless one. &lt;/p&gt;

</description><pubDate>Wed, 09 Jan 2013 00:00:00 Z</pubDate><a10:updated>2013-01-09T00:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;With GhostDriver 1.0 &lt;a href="http://blog.ivandemarino.me/2012/12/04/Finally-GhostDriver-1-0-0"&gt;recently being released&lt;/a&gt; I was keen to check out using PhantomJS with WebDriver. I couldn’t find any .Net examples so I thought I would post one myself. &lt;/p&gt;

&lt;p&gt;&lt;a href="http://phantomjs.org/"&gt;PhantomJS&lt;/a&gt; is a headless browser. That means it is a web browser, but the rendered web pages are never actually displayed. This makes it fast and an excellent candidate for speeding up those slow functional tests. According to their website PhantomJS is “a headless WebKit with JavaScript API.” Webkit is the layout engine used by a few browsers, such as Chrome and Safari. So PhantomJS is a browser, but a headless one. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;a href="https://github.com/detro/ghostdriver"&gt;Ghost Driver&lt;/a&gt;, a project by Ivan De Marino, is a pure JavaScript implementation of the Selenium &lt;a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol"&gt;WebDriver Wire Protocol&lt;/a&gt;. In other words, it's a Remote WebDriver that uses PhantomJS as the back-end. GhostDriver is designed to be an integral part of PhantomJS itself and recently PhantomJS 1.8 was released with GhostDriver integrated into it. Bindings for PhantomJS can be found in 
WebDriver versions 2.27 and above.&lt;/p&gt;

&lt;h2&gt;A simple example&lt;/h2&gt;

&lt;p&gt;To see it in action, open a Visual Studio class library project. The first thing you need to do is get WebDriver and PhantomJS. Both are available via NuGet.&lt;/p&gt;

&lt;p&gt;&lt;code style="background-color: #202020;border: 4px solid silver;border-radius: 5px;-moz-border-radius: 5px;-webkit-border-radius: 5px;box-shadow: 2px 2px 3px #6e6e6e;color: #E2E2E2;display: block;font: 1.5em 'andale mono', 'lucida console', monospace;line-height: 1.5em;overflow: auto;padding: 15px;
"&gt;PM&amp;gt; Install-Package Selenium.WebDriver
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code style="background-color: #202020;border: 4px solid silver;border-radius: 5px;-moz-border-radius: 5px;-webkit-border-radius: 5px;box-shadow: 2px 2px 3px #6e6e6e;color: #E2E2E2;display: block;font: 1.5em 'andale mono', 'lucida console', monospace;line-height: 1.5em;overflow: auto;padding: 15px;
"&gt;PM&amp;gt; Install-Package phantomjs.exe
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Go into the PhantomJS packages folder and copy the phantomjs.exe file into the test project. Set the Copy to Output Directory property to Copy if newer so that the phantomjs.exe file will be in the bin directory when the tests are run.&lt;/p&gt;

&lt;p&gt;This test just navigates to google, performs a search and views the results.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[TestFixture]
public class PhantomjsTests
{
    private IWebDriver _driver;

    [SetUp]
    public void SetUp()
    {
        _driver = new PhantomJSDriver();
    }

    [Test]
    public void should_be_able_to_search_google()
    {
        _driver.Navigate().GoToUrl("http://www.google.com");

        IWebElement element = _driver.FindElement(By.Name("q"));
        string stringToSearchFor = "BDDfy";
        element.SendKeys(stringToSearchFor);
        element.Submit();

        Assert.That(_driver.Title, Is.StringContaining(stringToSearchFor));
        ((ITakesScreenshot)_driver).GetScreenshot().SaveAsFile("google.png", ImageFormat.Png);
    }

    [TearDown]
    public void TearDown()
    {
        _driver.Quit();
    }
}    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case you are sceptical as to whether anything actually happened, check out the screenshot google.png file in the test project bin directory. As you would expect, it shows the google results, just as they would appear in a browser.&lt;/p&gt;

&lt;p&gt;Excellent! It seems that PhantomJS and GhostDriver are just as simple and easy to use as any other WebDriver implementation. I look forward to digging a bit deeper and seeing what sort of benefits headless browser testing has for my functional tests. &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/introducing-teststack/</guid><link>http://www.michael-whelan.net/introducing-teststack/</link><author>mjmwdev@gmail.com</author><category>TestStack</category><title>Introducing TestStack</title><description>&lt;p&gt;&lt;a href="http://teststack.net/"&gt;TestStack&lt;/a&gt; is a collection of open source projects which mainly focus on making the left side of Marrick’s agile testing quadrant easier!&lt;/p&gt;

&lt;p&gt;Early last year, &lt;a href="https://twitter.com/MehdiKhalili"&gt;Mehdi Khalili&lt;/a&gt; created &lt;a href="http://teststack.github.com/TestStack.BDDfy/"&gt;BDDfy&lt;/a&gt; (then called bddify), a simple yet powerful and extensible BDD framework for .Net. I became a very active user of BDDfy, and eventually a contributor. This year Mehdi and I decided to setup a new open source project for automated UI testing with Selenium, called Seleno, and a GitHub organisation, TestStack, for the two projects. Since then, we have been joined by &lt;a href="https://twitter.com/kkozmic"&gt;Krzysztof Kozmic&lt;/a&gt;, &lt;a href="https://twitter.com/JakeGinnivan"&gt;Jake Ginnivan&lt;/a&gt; and &lt;a href="https://twitter.com/robdmoore"&gt;Rob Moore&lt;/a&gt;. &lt;/p&gt;

</description><pubDate>Mon, 31 Dec 2012 00:00:00 Z</pubDate><a10:updated>2012-12-31T00:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;a href="http://teststack.net/"&gt;TestStack&lt;/a&gt; is a collection of open source projects which mainly focus on making the left side of Marrick’s agile testing quadrant easier!&lt;/p&gt;

&lt;p&gt;Early last year, &lt;a href="https://twitter.com/MehdiKhalili"&gt;Mehdi Khalili&lt;/a&gt; created &lt;a href="http://teststack.github.com/TestStack.BDDfy/"&gt;BDDfy&lt;/a&gt; (then called bddify), a simple yet powerful and extensible BDD framework for .Net. I became a very active user of BDDfy, and eventually a contributor. This year Mehdi and I decided to setup a new open source project for automated UI testing with Selenium, called Seleno, and a GitHub organisation, TestStack, for the two projects. Since then, we have been joined by &lt;a href="https://twitter.com/kkozmic"&gt;Krzysztof Kozmic&lt;/a&gt;, &lt;a href="https://twitter.com/JakeGinnivan"&gt;Jake Ginnivan&lt;/a&gt; and &lt;a href="https://twitter.com/robdmoore"&gt;Rob Moore&lt;/a&gt;. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;What are the Agile Testing Quadrants?&lt;/h2&gt;

&lt;p&gt;I first learned about Brian Marrick’s agile testing quadrants (pictured below) when I read &lt;a href="http://www.amazon.com/Agile-Testing-Practical-Addison-Wesley-Signature/dp/0321534468/ref=pd_ts_b_2?ie=UTF8&amp;amp;s=books"&gt;Agile Testing&lt;/a&gt;, by Lisa Crispin and Janet Gregory. I was just getting into acceptance testing and Domain Driven Design at the time, so it really made a lot of sense. The tests on the right, the ones that “critique the product,” are what you might consider the traditional testing that testers have done after a feature is developed.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/AgileTestingQuadrants.png" alt="alt text" /&gt;&lt;/p&gt;

&lt;p&gt;TestStack is focused on the tests on the left (Q1 and Q2). These tests support the agile team and are the ones that I am familiar with as a developer (or should I say as part of The Three Amigos/Triad?) They are test first, promoting the “testing as design” mindset, and tend to be automated. Things like unit and integration tests, acceptance tests, and UI tests and methodologies like Behaviour Driven Development and Acceptance Test Driven Development.&lt;/p&gt;

&lt;p&gt;Quadrant 1 has unit tests and component tests (or integration tests as I prefer to call them) which are the tests written by developers, usually(?) following TDD, to test whether the system does what they intended it to do. These tests tell you that your code is technically correct and that you are “doing things right.” They provide &lt;a href="http://softwaretestingfundamentals.com/verification-vs-validation/"&gt;verification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Quadrant 2 tests tells you that you are “doing the right thing”, meaning you are actually building what the customer wants. They provide &lt;a href="http://softwaretestingfundamentals.com/verification-vs-validation/"&gt;validation&lt;/a&gt;. Tests in this quadrant attempt to solve the biggest problem in software development – communication - so that the customer, testers and developers can agree on what will be built. They are functional tests, consisting mainly of story-level acceptance tests that the teams use to validate that each story works the way the customer intended. When developers automate the acceptance tests they become executable specifications, which is expressing requirements such that they are also tests. The benefits of executable specifications are that they are meaningful to all interested parties, they unambiguously demonstrate if the requirement is met, and they drive out a testable application design. They help the developer know where to start testing and when they are finished, and keep them on track to only implement the required functionality. They also provide a form of living documentation, such as the BDDfy report below, where the documentation is always in sync with the code.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy_rocks.png" alt="alt text" /&gt;&lt;/p&gt;

&lt;h2&gt;TestStack Projects&lt;/h2&gt;

&lt;p&gt;TestStack provides a number of projects that help with automated testing that supports the team:&lt;/p&gt;

&lt;h3&gt;BDDfy&lt;/h3&gt;

&lt;p&gt;The framework is called &lt;a href="http://teststack.github.com/TestStack.BDDfy/"&gt;BDDfy&lt;/a&gt; because it BDDfies (as in turns into BDD) your otherwise traditional unit tests. Pronounced B D Defy, it is very simple to turn your AAA tests into a BDD test/behavior. BDDfy can work with any and all testing frameworks. In fact, it works even if you are not using any testing framework.&lt;/p&gt;

&lt;h3&gt;Seleno&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://teststack.github.com/TestStack.Seleno/"&gt;Seleno&lt;/a&gt; helps you to write automated UI tests in the right way by implementing Page Objects and Page Components and by reading and writing web page data using strongly typed view models. It uses Selenium for browser automation.&lt;/p&gt;

&lt;h3&gt;Convention Tests&lt;/h3&gt;

&lt;p&gt;Convention over Configuration is a great way to cut down repetitive boilerplate code. But how do you validate that your code adheres to your conventions? &lt;a href="http://teststack.github.com/ConventionTests/"&gt;ConventionTests&lt;/a&gt; is a code-only NuGet that provides a simple API to build validation rules for convention validation tests. &lt;/p&gt;

&lt;h3&gt;White&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/TestStack/White"&gt;White&lt;/a&gt; is a framework for automating rich client applications based on Win32, WinForms, WPF, Silverlight and SWT (Java) platforms. It is .NET based and does not require the use of any proprietary scripting languages. Tests/automation programs using White can be written with whatever .NET language, IDE and tools you are already using. White provides a consistent object-oriented API, hiding the complexity of Microsoft's UI Automation library (on which White is based) and windows messages&lt;/p&gt;

&lt;h3&gt;Fluent MVC Testing&lt;/h3&gt;

&lt;p&gt;This library provides a fluent interface for creating terse and expressive tests against ASP.NET MVC controllers. The motivation behind this library is to provide a way to test MVC actions quickly and maintainably. &lt;/p&gt;

&lt;h2&gt;We're here to help!&lt;/h2&gt;

&lt;p&gt;I would encourage you to check us out on our website and download the code from github and try it out. Get in touch with us on twitter or email if you have any issues or questions about the projects or agile testing in general. We love this stuff and are happy to help!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/hello-world/</guid><link>http://www.michael-whelan.net/hello-world/</link><author>mjmwdev@gmail.com</author><category>General</category><title>Hello World</title><description>&lt;p&gt;I have wanted to setup a blog for awhile and I am glad to have finally done it. I love programming and want to share cool things when I discover them.  My intention for this blog is to have a place to record things that I find useful so that I can find them when I need them again later. Hopefully, others will find them useful too. &lt;/p&gt;

&lt;p&gt;So, who am I? I’m a Kiwi living in London. Which is to say I was born and raised in Hastings, New Zealand, and have spent most of my adult life living and working in London. I’m a Christian. I’m married - to &lt;a href="http://birgitwhelan.com/"&gt;Birgit&lt;/a&gt; - and we really love this city. The plan has always been to go back to New Zealand, but we keep saying, “in another five years.”&lt;/p&gt;

</description><pubDate>Sat, 26 May 2012 23:00:00 Z</pubDate><a10:updated>2012-05-26T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I have wanted to setup a blog for awhile and I am glad to have finally done it. I love programming and want to share cool things when I discover them.  My intention for this blog is to have a place to record things that I find useful so that I can find them when I need them again later. Hopefully, others will find them useful too. &lt;/p&gt;

&lt;p&gt;So, who am I? I’m a Kiwi living in London. Which is to say I was born and raised in Hastings, New Zealand, and have spent most of my adult life living and working in London. I’m a Christian. I’m married - to &lt;a href="http://birgitwhelan.com/"&gt;Birgit&lt;/a&gt; - and we really love this city. The plan has always been to go back to New Zealand, but we keep saying, “in another five years.”&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I have wanted to setup a blog for awhile and I am glad to have finally done it. I love programming and want to share cool things when I discover them.  My intention for this blog is to have a place to record things that I find useful so that I can find them when I need them again later. Hopefully, others will find them useful too. &lt;/p&gt;

&lt;p&gt;So, who am I? I’m a Kiwi living in London. Which is to say I was born and raised in Hastings, New Zealand, and have spent most of my adult life living and working in London. I’m a Christian. I’m married - to &lt;a href="http://birgitwhelan.com/"&gt;Birgit&lt;/a&gt; - and we really love this city. The plan has always been to go back to New Zealand, but we keep saying, “in another five years.”&lt;/p&gt;

&lt;p&gt;I’m a contract .Net programmer, working at Parliament right now with a great team. We have all really embraced agile development and are enjoying learning about doing that with automated testing, including things like Given When Then scenarios and Selenium testing. I am a particular proponent of Acceptance Test Driven Development, and the use of subcutaneous tests to drive development. I’m intending to blog about these topics.&lt;/p&gt;

&lt;p&gt;Last year I became a contributor to &lt;a href="http://teststack.github.com/TestStack.BDDfy/"&gt;BDDfy&lt;/a&gt;, an open source BDD framework which aims to be “the simplest BDD framework EVER!” I tried a number of other BDD frameworks first, but they all seemed to impose a particular syntax, base class, or testing framework, which would require me to change the way that I write my tests. When I came across BDDfy I was really impressed with how flexible and powerful it was. Its creator, &lt;a href="http://www.mehdi-khalili.com/"&gt;Mehdi Khalili&lt;/a&gt;, is a really smart guy, and has written a framework that is convention based, extensible, offers a number of different APIs, runs on any testing framework (or none!), and works with how you want to write your tests. Its reporting is particularly strong and has become the cornerstone of our acceptance test driven agile process at work and drives the subcutaneous and Selenium tests for a large MVC3 project. Mehdi would add my feature requests within hours sometimes, and I got to know him quite well through that, and eventually joined the project.&lt;/p&gt;

&lt;p&gt;Recently, Mehdi and I have been independently doing a lot of Selenium testing, and both felt that there was a need for a framework that would make things easier in this area. We decided to setup a new project called &lt;a href="http://teststack.github.com/TestStack.Seleno/"&gt;Seleno&lt;/a&gt; which aims to do that, and have just started working on it. Mehdi is hoping to show some early bits at his “Automated UI testing done right!” talk at DDD Sydney at the end of June. The two projects will both be hosted on github, under the umbrella of &lt;a href="http://teststack.net/"&gt;TestStack&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;So, there you go. Hello World.&lt;/p&gt;
</a10:content></item></channel></rss>