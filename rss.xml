<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0"><channel><title>michael whelan</title><link>http://www.michael-whelan.net/rss.xml</link><description>michael whelan</description><item><guid isPermaLink="true">http://www.michael-whelan.net/porting-dotnet-framework-library-to-dotnet-core/</guid><link>http://www.michael-whelan.net/porting-dotnet-framework-library-to-dotnet-core/</link><author>mjmwdev@gmail.com</author><category>.Net</category><title>Porting a .Net Framework Library to .Net Core</title><description>&lt;p&gt;I have recently been involved with porting a couple of open source frameworks to .Net Core. It's a brave new world, with lots of new things to discover and learn. In this post I am going to outline the process I've followed to convert my code and a few of the things I've learned along the way. Hopefully, this post will shed some light on the process if you are looking to port your .Net Framework code to .Net Core. Special thanks to &lt;a href="https://twitter.com/JakeGinnivan"&gt;Jake Ginnivan&lt;/a&gt; who, as always, was a font of knowledge on all things programming during the porting exercises!&lt;/p&gt;

</description><pubDate>Mon, 04 Jul 2016 07:00:00 Z</pubDate><a10:updated>2016-07-04T07:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I have recently been involved with porting a couple of open source frameworks to .Net Core. It's a brave new world, with lots of new things to discover and learn. In this post I am going to outline the process I've followed to convert my code and a few of the things I've learned along the way. Hopefully, this post will shed some light on the process if you are looking to port your .Net Framework code to .Net Core. Special thanks to &lt;a href="https://twitter.com/JakeGinnivan"&gt;Jake Ginnivan&lt;/a&gt; who, as always, was a font of knowledge on all things programming during the porting exercises!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Run the .Net Portability Analyzer&lt;/h2&gt;

&lt;p&gt;Before you even attempt to port your library, you should run the &lt;a href="https://visualstudiogallery.msdn.microsoft.com/1177943e-cfb7-4822-a8a6-e56c7905292b"&gt;.Net Portability Analyzer&lt;/a&gt; on your existing project. This is available as a console application or a Visual Studio plugin. You can access the Visual Studio plugin by right clicking on the project and selecting Analyze -&gt; Analyze Assembly Portability.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/portcore-analyzer-run.png" alt="Run .Net Portability Analyzer" /&gt;&lt;/p&gt;

&lt;p&gt;This will produce a report that provides two useful pieces of information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;High-level summary&lt;/strong&gt;: The summary gives you a percentage for each of your assemblies, telling you how much of your framework usage is portable to .NET Core. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;List of non-portable APIs&lt;/strong&gt;: It provides a table that lists all the usages of APIs that arenâ€™t portable. Most usefully, it also includes a list of recommended changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/portcore-analyzer-results.png" alt=".Net Portability Analyzer results" /&gt;&lt;/p&gt;

&lt;h2&gt;Create a new .Net Core class library project&lt;/h2&gt;

&lt;p&gt;The way to "upgrade" a .Net framework project is actually to create a new .Net Core class library and copy the old C# files into it. Assuming you want it to have the same name as the old project, and be in the same folder, you should remove the existing project and rename its folder on the file system so that the new project can be saved to the original location. &lt;/p&gt;

&lt;h2&gt;Add a global.json file&lt;/h2&gt;

&lt;p&gt;You will need to add a &lt;a href="https://docs.microsoft.com/en-us/dotnet/articles/core/tools/global-json"&gt;global.json file&lt;/a&gt; to the solution, which is used to configure the solution as a whole. It includes just two sections, projects and sdk by default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  "projects": [ "app", "tests" ],
    "sdk": { "version": "1.0.0-preview2-003121" }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The projects property designates which folders contain source code for the solution. The sdk property specifies the version of the DNX (.Net Execution Environment) that Visual Studio will use when opening the solution. (I think DNX might no longer be the correct terminology. .Net Core has been an ever moving target).&lt;/p&gt;

&lt;h2&gt;Add target frameworks to project.json file&lt;/h2&gt;

&lt;p&gt;The frameworks node in project.json specifies the framework versions that the project should be compiled against. In this example, the library will support .Net 4 (net40) and .Net Standard 1.5 (netstandard1.5). Because .Net Core has been decomposed into many modules, this allows you to specify the additional NuGet package dependencies that .Net Core needs (shown in the netstandard1.5 node below).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  "version": "1.0.0-*", 
  "dependencies": {
    "LibLog": "4.2.5",
    "TestStack.BDDfy": "4.3.0"
  },
    "frameworks": {
        "net40": {
          "dependencies": {

          },
            "frameworkAssemblies": {
                "System.Runtime.Serialization": "4.0.0.0",
                "System.Xml": "4.0.0.0"
            }
        },
        "netstandard1.5": {
            "imports": "dnxcore50",
            "buildOptions": {
              "define": [
                "LIBLOG_PORTABLE",
                "NETSTANDARD1_5"
              ]
            },
          "dependencies": {
            "NETStandard.Library": "1.6.0",
            "Microsoft.CSharp": "4.0.1",
            "System.Dynamic.Runtime": "4.0.11"
          }
      }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Fixing missing references for .Net Core&lt;/h2&gt;

&lt;p&gt;When you first build the project, you will most likely get a lot of missing reference exceptions for the .Net Standard target framework (see image below). Note that the project is specified as [ProjectName].NetStandard, Version 1.5. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/portcore-missing-references.png" alt="Run .Net Portability Analyzer" /&gt;&lt;/p&gt;

&lt;p&gt;This is quite easy to resolve if this functionality has been ported to one of the many new .Net Core packages. The &lt;a href="http://packagesearch.azurewebsites.net/"&gt;Reverse Package Search&lt;/a&gt; website is a great tool for finding NuGet packages that contain different types. For example, searching for the missing DynamicAttribute from the above error returns the System.Dynamic.Runtime NuGet package. This just needs to be added to the list of dependencies under the netstandard node to resolve the missing reference exception.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/portcore-package-search.png" alt="Run .Net Portability Analyzer" /&gt;&lt;/p&gt;

&lt;h2&gt;GetTypeInfo&lt;/h2&gt;

&lt;p&gt;One of the most common issues is that a lot of the old System.Type reflection functionality has moved to TypeInfo in .Net Core, which you can access through the GetTypeInfo extension method on Type.&lt;/p&gt;

&lt;p&gt;So, instead of &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var members = obj.GetType().GetMembers();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you would now use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Reflection;
var members = obj.GetType().GetTypeInfo().GetMembers(); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I am sure that more elegant solutions will come out in time, but for now the way I am handling these differences is with compiler directives. What I have found effective is to create a TypeExtensions class with extension methods on Type. There I replace the various Type properties with methods of the same name, with separate implementations of each method for each supported framework. This, at least, constrains the compiler directives to one place, rather than doing it for every method, and leaves the production code free of compiler directives.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#if NET40
    public static class TypeExtensions
    {
        public static Assembly Assembly(this Type type)
        {
            return type.Assembly;
        }

        public static bool IsValueType(this Type type)
        {
            return type.IsValueType;
        }
    }
#else
    using System.Linq;
    public static class TypeExtensions
    {
        public static Assembly Assembly(this Type type)
        {
            return type.GetTypeInfo().Assembly;   
        }

        public static bool IsValueType(this Type type)
        {
            return type.GetTypeInfo().IsValueType;
        }
    }
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, instead of calling the Reflection property, my code now calls my extension method with the same name. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// type.IsValueType;
type.IsValueType();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Compiler directives or rewrite code&lt;/h2&gt;

&lt;p&gt;It is not ideal to have too many compiler directives in your code. When a feature you were using in the old framework has not been ported to .Net Core you have a choice to make&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Write a new solution for .Net Core and switch between the old and new implementations with compiler directives, or&lt;/li&gt;
&lt;li&gt;Replace the original implementation with a new one that works for both frameworks  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, I had some JSON serialization functionality that relied on the JavaScriptSerializer in the System.Web library. This serializer has not been ported to .Net Core, so the short term fix - to get things working - was to use compiler directives to keep the existing soluiton for .Net 4 and provide a new solution for .Net Core. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#if NET40
    using System.Web.Script.Serialization;  
    public class JsonSerializer : ISerializer
    {
        public string Serialize(object obj)
        {
            var serializer = new JavaScriptSerializer();
            string json = serializer.Serialize(obj);

            return new JsonFormatter(json).Format();
        }
    }
#else
    using Newtonsoft.Json;
    public class JsonSerializer : ISerializer
    {
        public string Serialize(object obj)
        {
            return JsonConvert.SerializeObject(obj, Formatting.Indented,
                new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,
                    ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                });
        }
    }
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As more things get ported to .Net Core though, ideally I would hope to remove compiler directives and have a single solution that works for both frameworks, because it really is not ideal to maintain multiple implementations of lots of functionality throughout a codebase. &lt;/p&gt;

&lt;p&gt;Thankfully, the DataContractJsonSerializer has been ported to the System.Runtime.Serialization.Json NuGet package, so I can actually have a single solution that is supported by both frameworks and remove the compiler directives.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Runtime.Serialization.Json;
public class JsonSerializer : ISerializer
{
    public string Serialize(object obj)
    {
        var serializer = new DataContractJsonSerializer(obj.GetType());
        string json;
        using (var stream = new MemoryStream())
        {
            serializer.WriteObject(stream, obj);
            json = Encoding.UTF8.GetString(stream.ToArray());
        }

        return new JsonFormatter(json).Format();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why didn't I just use Json.Net or ServiceStack.Text to serialize Json? Well, I would if I was building an application, but for a NuGet library I don't want to add a NuGet dependency just for one class of functionality. That might be old world thinking though, given how much of the .Net Framework is now provided as NuGet packages. I may just change my thinking on that but, for now, I still see a distinction between third party packages and .Net packages.&lt;/p&gt;

&lt;h2&gt;Backwards-compatible Polyfills&lt;/h2&gt;

&lt;p&gt;Credit to Jake Ginnivan for this solution. It is actually pretty easy to satisfy the compiler by providing polyfills, or shims, for types that have not been ported to .Net Core. &lt;/p&gt;

&lt;p&gt;For example, Serialization has not been ported, but you might have classes with the Serializable attribute on them. Providing an empty SerializableAttribute class in the System.Runtime.Serialization namespace will satisfy the compiler for your .Net Core code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#if !NET40
namespace System.Runtime.Serialization
{
    public class SerializableAttribute : Attribute
    {
    }
}
#endif 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another example I have come across is a polyfill for AppDomain.CurrentDomain, now that AppDomains are no longer supported in .Net Core.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private sealed class AppDomain
{
    public static AppDomain CurrentDomain { get; private set; }

    static AppDomain()
    {
        CurrentDomain = new AppDomain();
    }

    public List&amp;lt;Assembly&amp;gt; GetAssemblies()
    {
        ... // .Net Core functionality here
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;There are a lot of exciting new things to learn with .Net Core. Porting your existing code to the framework is a little bit of work - but not too much. The process is quite straightforward with predictable steps, most of which I've hopefully communicated here. The .Net Portability Analyzer is a huge help in enabling you to plan out the conversion beforehand, providing you with a list of issues and - most helpfully - even the solutions to most of the issues. The main area of concern is to provide new solutions for areas of the code that rely on parts of the .Net Framework that have not been ported. Thankfully, this seems to be a reasonably small surface area though, of course, it will depend on each application.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/github-cvs-resumes/</guid><link>http://www.michael-whelan.net/github-cvs-resumes/</link><author>mjmwdev@gmail.com</author><category>General</category><title>GitHub CVs / Resumes</title><description>&lt;p&gt;I just discovered that Github can automatically generate a CV/resume for its users based on the public information in their GitHub account. You have to opt-in by going to their &lt;a href="https://github.com/resume/resume.github.com"&gt;GitHub project&lt;/a&gt; page and starring the project. Check out mine at &lt;a href="http://resume.github.com/?mwhelan"&gt;http://resume.github.com/?mwhelan&lt;/a&gt;. What a clever idea!&lt;/p&gt;

</description><pubDate>Thu, 02 Jun 2016 07:00:00 Z</pubDate><a10:updated>2016-06-02T07:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I just discovered that Github can automatically generate a CV/resume for its users based on the public information in their GitHub account. You have to opt-in by going to their &lt;a href="https://github.com/resume/resume.github.com"&gt;GitHub project&lt;/a&gt; page and starring the project. Check out mine at &lt;a href="http://resume.github.com/?mwhelan"&gt;http://resume.github.com/?mwhelan&lt;/a&gt;. What a clever idea!&lt;/p&gt;

&lt;!--excerpt--&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/become-a-fullstack-dotnet-developer-review/</guid><link>http://www.michael-whelan.net/become-a-fullstack-dotnet-developer-review/</link><author>mjmwdev@gmail.com</author><category>Learning</category><title>Review of Pluralsight's Become a Full-stack .Net Developer</title><description>&lt;p&gt;This weekend was a long weekend in the UK, and my wife was away, so I took the opportunity to work through &lt;a href="http://programmingwithmosh.com/"&gt;Mosh Hamedani's&lt;/a&gt; comprehensive 3 part course on Pluralsight, titled &lt;code&gt;Become a Full-stack .Net Developer&lt;/code&gt;. The three part series aims to take you from a junior .Net developer through to a senior .Net developer by building an ASP.Net MVC 5 application with Entity Framework 6. I really enjoyed the course and thought I would provide a review of it.&lt;/p&gt;

</description><pubDate>Mon, 30 May 2016 09:00:00 Z</pubDate><a10:updated>2016-05-30T09:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;This weekend was a long weekend in the UK, and my wife was away, so I took the opportunity to work through &lt;a href="http://programmingwithmosh.com/"&gt;Mosh Hamedani's&lt;/a&gt; comprehensive 3 part course on Pluralsight, titled &lt;code&gt;Become a Full-stack .Net Developer&lt;/code&gt;. The three part series aims to take you from a junior .Net developer through to a senior .Net developer by building an ASP.Net MVC 5 application with Entity Framework 6. I really enjoyed the course and thought I would provide a review of it.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;The series is a whopping 14 hours in total, which is really, really long by Pluralsight standards. I would really recommend watching it though and will probably make it suggested watching for my dev teams.&lt;/p&gt;

&lt;p&gt;I did intend to build out the whole thing while I watched but I abandoned that as it would have taken too long (though I would recommend doing that if you are a little less experienced). I revved up the speed to double and watched it like a movie. That's still 7 hours of watching, but well worth it.&lt;/p&gt;

&lt;p&gt;According to Mosh, the series is aimed at the following audiences&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Part 1 =&amp;gt; junior developer
Part 2 =&amp;gt; moving from junior developer to intermediate developer
Part 3 =&amp;gt; moving from intermediate developer to senior developer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hearing that, a lot of experienced devs might move right along, but I'd encourage you to look a bit deeper. While the content is geared towards ASP.Net MVC 5 and Entity Framework 6, the most valuable takeaway is the approach of a senior developer. &lt;/p&gt;

&lt;p&gt;What impressed me the most was Mosh's discipline. He did not let himself get distracted by going off to google to research better solutions, but consistently stuck to the task at hand, OK with doing it a bit dirty at first, confident that with an iterative approach to development he would quickly circle back and remove any technical debt. I can be far less disciplined and find it so easy to get sidetracked on to some research or other yak shaving activity. There's so much to be said for completing the task!&lt;/p&gt;

&lt;p&gt;My favourite part was the third and final part, which gets into architecture and automated testing and such, two topics close to my heart. But the first two are really good value as well. In fact, if Mosh didn't tell you they were aimed at the 3 levels you wouldn't know the difference. It's just that he starts off doing ugly things like newing up the DbContext directly in the controller so that he doesn't distract you with too many concepts at once. But slowly but surely, he refactors things until eventually you have a pretty clean architecture, with repositories/unit of work, and programming to interfaces that are injected with your IoC container. &lt;/p&gt;

&lt;p&gt;The style of the course is similar to pairing with an experienced developer who is just commentating on what he is doing and why. He shows a number of productivity tools, such as ReSharper, Web Essentials and the Productivity Power Tools. In particular, he shows a number of ReSharper shortcuts. Unfortunately, he uses the older IntelliJ shortcuts and I use the Visual Studio ones, but it was no problem to look up their Visual Studio counterparts on &lt;a href="https://www.jetbrains.com/help/resharper/2016.1/Reference__Keyboard_Shortcuts.html"&gt;their website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can view the courses &lt;a href="http://app.pluralsight.com/author/mosh-hamedani"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can currently get 6 months of Pluralsight for free if you sign up for an &lt;a href="https://www.visualstudio.com/en-us/products/visual-studio-dev-essentials-vs.aspx"&gt;MSDN Dev Essentials&lt;/a&gt; subscription.&lt;/p&gt;

&lt;p&gt;I think Mosh is a really talented teacher and his style and focus on quality is quite distinctive from other teachers. I can also recommend some of his &lt;a href="https://www.udemy.com/user/moshfeghhamedani/"&gt;Udemy courses&lt;/a&gt; that I've done. You can also find him on his &lt;a href="https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA"&gt;youtube channel&lt;/a&gt;.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/bdd-course-london/</guid><link>http://www.michael-whelan.net/bdd-course-london/</link><author>mjmwdev@gmail.com</author><category>BDD</category><category>Learning</category><title>BDD Course in London</title><description>&lt;p&gt;Last week I had the pleasure of attending Gaspar Nagy's 3-day &lt;a href="http://gasparnagy.com/trainings/specflow/"&gt;BDD course&lt;/a&gt; at Skills Matter's &lt;a href="https://skillsmatter.com/event-space"&gt;CodeNode&lt;/a&gt; in London. I have been doing BDD for over 5 years now, and SpecFlow is not my preferred .Net BDD tool, but I still got a huge amount of value out of the course. Gaspar is very knowledgeable about BDD and I would highly recommend the course, whether you are new to BDD,  a &lt;a href="http://www.specsolutions.eu/news/bddaddict"&gt;BDD addict&lt;/a&gt; like me, or even if you are just struggling with agile.&lt;/p&gt;

</description><pubDate>Fri, 27 May 2016 09:00:00 Z</pubDate><a10:updated>2016-05-27T09:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Last week I had the pleasure of attending Gaspar Nagy's 3-day &lt;a href="http://gasparnagy.com/trainings/specflow/"&gt;BDD course&lt;/a&gt; at Skills Matter's &lt;a href="https://skillsmatter.com/event-space"&gt;CodeNode&lt;/a&gt; in London. I have been doing BDD for over 5 years now, and SpecFlow is not my preferred .Net BDD tool, but I still got a huge amount of value out of the course. Gaspar is very knowledgeable about BDD and I would highly recommend the course, whether you are new to BDD,  a &lt;a href="http://www.specsolutions.eu/news/bddaddict"&gt;BDD addict&lt;/a&gt; like me, or even if you are just struggling with agile.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I had the good fortune of choosing a seat next to &lt;a href="https://twitter.com/QuestMasterNET"&gt;Dirk Rombauts&lt;/a&gt; on the first day, which resulted in two days of great pair programming, where I learned a lot, including some excellent pairing habits and one trick to double my ReSharper ninja skills!&lt;/p&gt;

&lt;p&gt;It is a wide-ranging course that covers how to gather examples and then turn them into executable specifications, with the implementation focused on ASP.Net MVC and WPF .Net projects. The course covers refining and documenting specification workshop results in Gherkin, feeding Gherkin scenarios into acceptance test driven development with SpecFlow, and advanced concepts for automation and building living documentation systems. The course topics are discussed through examples, demos and hands-on exercises to ensure knowledge that can be used in practice.&lt;/p&gt;

&lt;p&gt;The course started off by looking at the four different areas that make up BDD. So many companies that I see struggling with agile tend to focus primarily on the agile project management area, with perhaps one or two other techniques from the other areas. I think you need to do all four to maximise the benefits of agile.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/specflow-bdd.png" alt="BDD" /&gt;&lt;/p&gt;

&lt;p&gt;The first day was focused on capturing specification workshop results in gherkin, and covered some theory:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Agile testing is not about hunting criminals (finding bugs after development) but more like crime prevention.&lt;/li&gt;
&lt;li&gt;As formality increases, tests and requirements become indistinguishable. At the limit, tests and requirements are equivalent. &lt;em&gt;Equivalence Hypothesis (Martin, Melnik)&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second day looked at SpecFlow core concepts and ATDD basics, with examples using a WPF pomodoro application, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction to the Acceptance Test Driven Development workflow (test first, outside-in)&lt;/li&gt;
&lt;li&gt;Core concepts for (A)TDD: mocking, stubbing, dependency injection&lt;/li&gt;
&lt;li&gt;Domain layer automation (automating under the skin)&lt;/li&gt;
&lt;li&gt;Organizing step definitions&lt;/li&gt;
&lt;li&gt;Sharing state between steps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The third day looked at advanced test automation topics, using an ASP.Net MVC pomodoro application, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clean and maintainable automation layer&lt;/li&gt;
&lt;li&gt;Dealing with external dependencies&lt;/li&gt;
&lt;li&gt;Flickering scenarios&lt;/li&gt;
&lt;li&gt;UI layer automation (MVC ASP.NET, Driver, PageObject pattern)&lt;/li&gt;
&lt;li&gt;Handling the database&lt;/li&gt;
&lt;li&gt;Challenges of out-of-process testing (with Selenium)&lt;/li&gt;
&lt;li&gt;Organizing step definitions&lt;/li&gt;
&lt;li&gt;Defaults and implicit assumptions of scenarios&lt;/li&gt;
&lt;li&gt;Automapper and SpecFlow.Assist&lt;/li&gt;
&lt;li&gt;Putting it all together: implement new functionality with BDD&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Step Definitions&lt;/h2&gt;

&lt;p&gt;I've spoken with SpecFlow developers who are struggling to organise their step definitions, and I haven't really known what to advise, as it's not an issue with BDDfy, so I was interested to see the best tips for organising them. Gaspar showed a lot of great techniques for organising feature files and step definitions. I particularly liked the suggestion of moving user stories into a feature tree after the sprint was completed. &lt;/p&gt;

&lt;p&gt;I can't help feeling that step definitions are the wrong abstraction for reusability in an automated testing project. There are inherent difficulties from wanting to reuse steps when the two use cases are slightly different, and I would prefer to avoid it altogether.&lt;/p&gt;

&lt;p&gt;Stepping back from tools for a moment, I think that step definitions are just metadata that should just read whatever way makes the most sense for a particular scenario in the living documentation that the users will see, whether it is exactly the same as other steps in the system or slightly different. While I recognise the importance and value of the DRY principle, I don't think it needs to be applied to the step definition itself (as it's just a string on a report).&lt;/p&gt;

&lt;p&gt;What should be reusable is the code inside the step definitions. Things like repositories, builders/object mothers in the Given steps, drivers in the When step, assertions in the Then steps. Why do you need to reuse steps if they only have one line of code, and if that line itself is a useful and reusable abstraction?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Given_I_have_5_customers()
{
    Database.Save(CustomerBuilder.CreateListOfSize(5).BuildList());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generally, I'm just not comfortable with having my scenario being distributed across multiple feature and step definition files, which I think is inherent in the Gherkin-based approach. I prefer the pure C# solution of having the entire scenario in one file with the class-per-scenario approach (and no feature file):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ValidEditStudentDetailsScenario : ScenarioFor&amp;lt;MvcControllerDriver, StudentEditStory&amp;gt;
{
    private Student _student;
    private ControllerResultTest&amp;lt;StudentController&amp;gt; _result;

    public void Given_I_am_editing_an_existing_student_with_valid_data()
    {
        Builder&amp;lt;Student&amp;gt;.CreateNew().Persist();
        _student = Container
            .Get&amp;lt;IStudentRepository&amp;gt;()
            .FindById(1);
        _student.FirstMidName = "newFirstName";
    }
    public void When_I_save_the_changes()
    {
        _result = SUT.ExecuteActionFor&amp;lt;StudentController&amp;gt;(c =&amp;gt; c.Edit(_student));
    }

    public void Then_I_am_returned_to_the_student_list()
    {
        _result.ShouldRedirectTo&amp;lt;StudentController&amp;gt;(c =&amp;gt; c.Index(null, null, null, null));
    }

    public void AndThen_the_changes_have_been_saved()
    {
        Container.Get&amp;lt;IStudentRepository&amp;gt;()
            .FindById(1)
            .ShouldBeEquivalentTo(_student);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The driver pattern&lt;/h2&gt;

&lt;p&gt;Speaking of drivers, Gaspar gave an excellent talk on the driver pattern in relation to the &lt;a href="http://alistair.cockburn.us/Hexagonal+architecture"&gt;hexagonal architecture&lt;/a&gt;. I am quite familiar with how the &lt;a href="http://martinfowler.com/eaaDev/WindowDriver.html"&gt;window driver pattern&lt;/a&gt; is applied to Selenium, in the form of page objects, but Gaspar articulated a more general purpose pattern which extends beyond the UI/windows. &lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There is a lot more I could say about the course. I'm still digesting a lot of the excellent information. My recommendation would be to try to attend it yourself (there are a number of venues around Europe). BDD is by far the best way to deliver software on agile projects that I have come across, and Gaspar Nagy is an excellent guide.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/code-compiling-but-resharper-red/</guid><link>http://www.michael-whelan.net/code-compiling-but-resharper-red/</link><author>mjmwdev@gmail.com</author><category>Visual Studio</category><title>Code compiling but ReSharper is red</title><description>&lt;p&gt;From time-to-time, I have this weird situation with ReSharper and Visual Studios (different versions of both) where my code is compiling, but ReSharper is highlighting some things in red. I think there might be a few different solutions to this problem, and I'll add others here if I come across them. The solution that worked for me this time is just to &lt;a href="http://stackoverflow.com/questions/6040338/everything-compiles-but-resharper-marks-everything-in-red"&gt;delete the .suo files&lt;/a&gt;.&lt;/p&gt;

</description><pubDate>Fri, 19 Jun 2015 09:00:00 Z</pubDate><a10:updated>2015-06-19T09:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;From time-to-time, I have this weird situation with ReSharper and Visual Studios (different versions of both) where my code is compiling, but ReSharper is highlighting some things in red. I think there might be a few different solutions to this problem, and I'll add others here if I come across them. The solution that worked for me this time is just to &lt;a href="http://stackoverflow.com/questions/6040338/everything-compiles-but-resharper-marks-everything-in-red"&gt;delete the .suo files&lt;/a&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Another solution that has worked in the past is to clear the ReSharper cache and restart Visual Studio. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ReSharper &amp;gt; Options &amp;gt; Environment &amp;gt; General &amp;gt; Options &amp;gt; General 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Click the Clear Caches button.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/testing-mvc-extending-strongly-typed-navigation/</guid><link>http://www.michael-whelan.net/testing-mvc-extending-strongly-typed-navigation/</link><author>mjmwdev@gmail.com</author><category>Automated Testing</category><category>Black-Box Testing ASP.Net Series</category><title>Black-Box Testing ASP.Net: Extending Strongly Typed Navigation</title><description>&lt;p&gt;In a &lt;a href="http://www.michael-whelan.net/testing-mvc-reducing-use-of-magic-strings/"&gt;previous post&lt;/a&gt; in this series, on reducing the use of magic strings, I showed a helper class for creating strongly typed navigation. This lets you derive a URL from a strongly typed controller action by looking up the route in the route table and returning you the same computed URL your application recognises.&lt;/p&gt;

</description><pubDate>Sun, 22 Feb 2015 00:00:00 Z</pubDate><a10:updated>2015-02-22T00:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;In a &lt;a href="http://www.michael-whelan.net/testing-mvc-reducing-use-of-magic-strings/"&gt;previous post&lt;/a&gt; in this series, on reducing the use of magic strings, I showed a helper class for creating strongly typed navigation. This lets you derive a URL from a strongly typed controller action by looking up the route in the route table and returning you the same computed URL your application recognises.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Here is a test that illustrates the behaviour. This is a standard situation where the URL simply contains the controller and the action, as well as the ID as a route argument. &lt;code&gt;RouteConfig.RegisterRoutes()&lt;/code&gt; is the method in the application that intialises its route table.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void MvcUrlHelper_should_return_correct_route_for_controller_action()
{
    var routes = RouteConfig.RegisterRoutes(new RouteCollection());
    var sut = new MvcUrlHelper(routes);

    sut.GetRelativeUrlFor&amp;lt;StudentController&amp;gt;(x =&amp;gt; x.Details(1))
        .Should().Be("/Student/Details/1");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recently, I've had a couple of reasons to extend this class. Firstly, I've been testing applications that use Areas. Secondly, I've needed to be able to pass in additional route values.&lt;/p&gt;

&lt;p&gt;I will start off with the final class and then discuss the additional behaviour:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MvcUrlHelper
{
    private readonly RouteCollection routeCollection;

    public MvcUrlHelper(RouteCollection routeCollection)
    {
        this.routeCollection = routeCollection;
    }

    public string GetRelativeUrlFor&amp;lt;TController&amp;gt;(Expression&amp;lt;Action&amp;lt;TController&amp;gt;&amp;gt; action, IDictionary&amp;lt;string, object&amp;gt; routeValues = null)
        where TController : Controller
    {
        var requestContext = new RequestContext(FakeHttpContext.Root(), new RouteData());

        // Get controller and action values
        var actionRouteValues = Microsoft.Web.Mvc.Internal.ExpressionHelper.GetRouteValuesFromExpression(action);

        var area = GetArea(typeof(TController));
        if (!string.IsNullOrEmpty(area))
        {
            actionRouteValues.Add("Area", area);
        }

        if (routeValues != null)
        {
            foreach (var v in routeValues) actionRouteValues[v.Key] = v.Value;
        }

        var urlHelper = new UrlHelper(requestContext, this.routeCollection);
        var relativeUrl = urlHelper.RouteUrl(new RouteValueDictionary(actionRouteValues));

        return relativeUrl;
    }

    private static string GetArea(Type controllerType)
    {
        var routeAreaAttributes = controllerType.GetCustomAttributes(typeof(RouteAreaAttribute), true);
        if (routeAreaAttributes.Length &amp;gt; 0)
        {
            var routeArea = (RouteAreaAttribute)(routeAreaAttributes[0]);
            return routeArea.AreaName;
        }

        var nameSpace = controllerType.Namespace;
        if (nameSpace == null)
        {
            return string.Empty;
        }

        const string AreasStartSearchString = "Areas.";
        var areasIndexOf = nameSpace.IndexOf(AreasStartSearchString, StringComparison.Ordinal);
        if (areasIndexOf &amp;lt; 0)
        {
            return string.Empty;
        }

        var areaStart = areasIndexOf + AreasStartSearchString.Length;
        var areaString = nameSpace.Substring(areaStart);
        if (areaString.Contains("."))
        {
            areaString = areaString.Remove(areaString.IndexOf(".", StringComparison.Ordinal));
        }

        return areaString;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Areas&lt;/h2&gt;

&lt;p&gt;The MVC5 Futures &lt;code&gt;ExpressionHelper&lt;/code&gt; class does not return the area in the URL (unless you use its Area attribute). Here is the test that illustrates the behaviour I want, where University is the Area and Student the controller. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[TestMethod]
public void should_return_area_in_url()
{
    var routes = RouteConfig.RegisterRoutes(new RouteCollection());
    var sut = new MvcUrlHelper(routes);
    var result = sut.GetRelativeUrlFor&amp;lt;StudentController&amp;gt;(c =&amp;gt; c.Create());
    result.ShouldBe("/University/Student/Create");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;GetArea&lt;/code&gt; method tries to find area information by interrogating the controller type. Firstly, it looks for a &lt;code&gt;RouteAreaAttribute&lt;/code&gt; on the class. Secondly, it looks at the namespace to see if it is in the standard Areas namespace, and extracts the Area from the namespace if it is. If this method returns an area then it is added to the actionRouteValues &lt;code&gt;RouteValueDictionary&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Additional Route Values&lt;/h2&gt;

&lt;p&gt;Sometimes, you must provide additional route values that the &lt;code&gt;UrlHelper&lt;/code&gt; class requires to construct a URL. This test shows the adding of an &lt;code&gt;application&lt;/code&gt; route value, with a value of &lt;code&gt;Books&lt;/code&gt;, which is used in the URL.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[TestMethod]
public void should_return_application_in_url()
{
    var sut = new MvcUrlHelper(new RouteRegistrator().RegisterRoutes());
    var application = new Dictionary&amp;lt;string, object&amp;gt; { { "application", "Books" } };
    var result = sut.GetRelativeUrlFor&amp;lt;CollectionsController&amp;gt;(c =&amp;gt; c.Details(23), application);
    Assert.AreEqual("/Editorial/Applications/Books/Collections/Details?collectionId=23", result);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These additional values are used by UrlHelper in the creation of the full URL to make the test pass.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/testing-mvc-using-aspnet-mvc-view-models-with-selenium-webdriver/</guid><link>http://www.michael-whelan.net/testing-mvc-using-aspnet-mvc-view-models-with-selenium-webdriver/</link><author>mjmwdev@gmail.com</author><category>Automated Testing</category><category>Black-Box Testing ASP.Net Series</category><title>Black-Box Testing ASP.Net: Using ASP.Net MVC View Models with Selenium WebDriver</title><description>&lt;p&gt;This post continues the theme of the &lt;a href="http://www.michael-whelan.net/testing-mvc-reducing-use-of-magic-strings/"&gt;previous post&lt;/a&gt;, in looking at how a little knowledge of the inner workings of the MVC application can go a long way to writing less brittle, more maintainable, UI tests with Selenium WebDriver. In this post I am going to look at how we can use the same view model in the test that the application view uses to automate the reading and writing of data from the web page. (It could also be a domain model class, I just prefer to use view models for my views and keep my domain models separate).&lt;/p&gt;

</description><pubDate>Sun, 04 Jan 2015 00:00:00 Z</pubDate><a10:updated>2015-01-04T00:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;This post continues the theme of the &lt;a href="http://www.michael-whelan.net/testing-mvc-reducing-use-of-magic-strings/"&gt;previous post&lt;/a&gt;, in looking at how a little knowledge of the inner workings of the MVC application can go a long way to writing less brittle, more maintainable, UI tests with Selenium WebDriver. In this post I am going to look at how we can use the same view model in the test that the application view uses to automate the reading and writing of data from the web page. (It could also be a domain model class, I just prefer to use view models for my views and keep my domain models separate).&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some of the sample code is taken straight from &lt;a href="https://github.com/TestStack/TestStack.Seleno"&gt;Seleno&lt;/a&gt;, the Selenium WebDriver browser automation framework from &lt;a href="http://teststack.net/"&gt;TestStack&lt;/a&gt;, and gives you a look under the hood at the sorts of things a UI automation framework does for you. If some of these samples are relevant to the problems you are trying to solve, I encourage you to check out Seleno. It takes care of a lot of the complex infrastructure setup of a Selenium WebDriver project for you, allowing you to get on with the important business of writing specifications for your application. I've produced a working sample on &lt;a href="https://github.com/mwhelan/MvcTestingSamples"&gt;GitHub&lt;/a&gt;, so you should be able to take it, run it, and use some of the code in your own applications if you want to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Input View Model Property into Web Page&lt;/h2&gt;

&lt;p&gt;When you use strongly typed views (with models) and generate HTML for the model properties with expression-based HTML helpers, such as &lt;code&gt;Html.EditorFor()&lt;/code&gt;, MVC will produce controls with predictable names for the properties of the model. This view code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@model ContosoUniversity.ViewModels.CreateStudentForm
...
@Html.EditorFor(model =&amp;gt; model.LastName)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will produce this HTML:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input name="LastName" class="text-box single-line" id="LastName" type="text" value="" &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can leverage this MVC infrastructure in our UI tests to input a model property into a form field. System.Web.Mvc provides the &lt;code&gt;ExpressionHelper.GetExpressionText&lt;/code&gt; method to provide the same control name from the model property that the expression-based HTML helpers provide in the views.&lt;/p&gt;

&lt;p&gt;We can derive a strongly typed base page object from the base page object used in the previous post, where &lt;code&gt;TModel&lt;/code&gt; is the view model class used by that view. The &lt;code&gt;TextBoxFor&lt;/code&gt; method uses ExpressionHelper to derive the name of the control from the model property expression, then uses WebDriver to find the element and populate it with the specified value.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Page&amp;lt;TModel&amp;gt; : Page
{
    public Page&amp;lt;TModel&amp;gt; TextBoxFor&amp;lt;TField&amp;gt;(Expression&amp;lt;Func&amp;lt;TModel, TField&amp;gt;&amp;gt; field, TField value)
    {
        var name = ExpressionHelper.GetExpressionText(field);

        var element = Host.Browser.FindElement(By.Name(name));
        element.Clear();
        element.SendKeys(value.ToString());

        return this;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can modify the &lt;code&gt;NewStudentPage&lt;/code&gt; page object to use the strongly typed page object and specify the &lt;code&gt;CreateStudentForm&lt;/code&gt; view model, which is the one that the view uses. The various Input methods are able to enter data into the web page using the appropriate property expression in a strongly typed way. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class NewStudentPage : Page&amp;lt;CreateStudentForm&amp;gt;
{
    public string HeaderTitle
    {
        get
        {
            var header = Host.Browser.FindElement(By.Id("title"));
            return header.Text;
        }
    }

    public NewStudentPage InputLastName(string lastName)
    {
        TextBoxFor(x =&amp;gt; x.LastName, lastName);
        return this;
    }

    public NewStudentPage InputFirstName(string firstName)
    {
        TextBoxFor(x =&amp;gt; x.FirstMidName, firstName);
        return this;
    }

    public NewStudentPage InputEnrollmentDate(DateTime enrollmentDate)
    {
        TextBoxFor(x =&amp;gt; x.EnrollmentDate, enrollmentDate);
        return this;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In keeping with the page object design pattern each method returns the page so that test code can set multiple properties in the fluent style, as you can see from this test.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void CanPopulateAFormFieldFromModelProperty()
{
    var student = Builder&amp;lt;CreateStudentForm&amp;gt;
        .CreateNew()
        .Build();
    var newStudentPage = Host.NavigateTo&amp;lt;StudentController, NewStudentPage&amp;gt;(x =&amp;gt; x.Create());

    newStudentPage
        .InputFirstName(student.FirstMidName)
        .InputLastName(student.LastName)
        .InputEnrollmentDate(student.EnrollmentDate);

    Host.Browser.FindElement(By.Id("FirstMidName")).GetAttribute("value").Should().Be(student.FirstMidName);
    Host.Browser.FindElement(By.Id("LastName")).GetAttribute("value").Should().Be(student.LastName);
    Host.Browser.FindElement(By.Id("EnrollmentDate")).GetAttribute("value").Should().Be(student.EnrollmentDate.ToString());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Input Whole View Model into Web Page&lt;/h2&gt;

&lt;p&gt;To be honest, I strongly dislike this approach of the page object exposing every property of the view model individually. It lends itself to script-style code, with lots of repetitive calls to set each property, obfuscating the meaning of the test. I prefer more of a specification style of test, where each method on the page object is representative of a behaviour of the application (more than likely representative of a single request/response  - a single controller action). This improves the API of the Page Object layer, and makes for a better Domain Specific Language (DSL) for your tests. &lt;/p&gt;

&lt;p&gt;Ignoring the assertions in this test - which are for demo purposes only - I prefer this test. One or two lines to setup the context and one call to the page object for the action I'm testing. This reads much more like a specification, which I think makes it a lot easier for the Test Reader to quickly see what is going on, and makes the tests a lot easier to maintain over time.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void CanPopulateFormFromModel()
{
    var student = Builder&amp;lt;CreateStudentForm&amp;gt;
        .CreateNew()
        .Build();
    var newStudentPage = Host.NavigateTo&amp;lt;StudentController, NewStudentPage&amp;gt;(x =&amp;gt; x.Create());

    newStudentPage.AddValidStudent(student);

    Host.Browser.FindElement(By.Id("FirstMidName")).GetAttribute("value").Should().Be(student.FirstMidName);
    Host.Browser.FindElement(By.Id("LastName")).GetAttribute("value").Should().Be(student.LastName);
    Host.Browser.FindElement(By.Id("EnrollmentDate")).GetAttribute("value").Should().Be(student.EnrollmentDate.ToString());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have a &lt;a href="https://github.com/TestStack/TestStack.Seleno/blob/master/src/TestStack.Seleno/PageObjects/Actions/PageWriter.cs"&gt;PageWriter&lt;/a&gt; class in Seleno that inputs a whole model like this and handles the different data types and other complexities. Here is a cut down version that works for the 3 text boxes in this example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Page&amp;lt;TModel&amp;gt; : Page
{
    ...
    public Page&amp;lt;TModel&amp;gt; InputModel(TModel model)
    {
        var type = model.GetType();
        foreach (var property in type.GetProperties())
        {
            var element = Host.Browser.FindElement(By.Name(property.Name));
            element.Clear();
            element.SendKeys(property.GetValue(model).ToString());
        }
        return this;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the additional method on the page object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class NewStudentPage : Page&amp;lt;CreateStudentForm&amp;gt;
{
    ...
    public StudentDetailsPage AddValidStudent(CreateStudentForm student)
    {
        InputModel(student);
        return new StudentDetailsPage();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Display Templates do not generate IDs for controls&lt;/h2&gt;

&lt;p&gt;By default MVC only adds ID and name properties to form controls (via the &lt;strong&gt;Editor Templates&lt;/strong&gt;) with the expression-based HTML helpers. It does not do the same with the display expressions (such as &lt;code&gt;Html.DisplayFor()&lt;/code&gt;) that use the &lt;strong&gt;Display Templates&lt;/strong&gt;). &lt;/p&gt;

&lt;p&gt;For example, this code from the Student Details view (Views\Student\Details.cshtml):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dt&amp;gt;
    @Html.DisplayNameFor(model =&amp;gt; model.LastName)
&amp;lt;/dt&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;produces the following HTML with the standard Display Templates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dd&amp;gt;
    Alexander
&amp;lt;/dd&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fortunately, you can override both the Editor and Display templates if you add them to your web project. You can read all about ASP.Net MVC's templating system in &lt;a href="http://bradwilson.typepad.com/blog/2009/10/aspnet-mvc-2-templates-part-1-introduction.html"&gt;this series of posts&lt;/a&gt; from Brad Wilson. Suffice to say, for the purposes of this discussion, you can override the display templates by adding a DisplayTemplates folder to your &lt;code&gt;Views\Shared&lt;/code&gt; folder in your web project. You can copy the DisplayTemplates folder from your Visual Studio installation, or you can install the MvcDisplayTemplates package, provided by &lt;a href="https://twitter.com/matthoneycutt"&gt;Matt Honeycutt&lt;/a&gt; on NuGet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Install-Package MvcDisplayTemplates
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This overrides the &lt;code&gt;_Layout.cshtml&lt;/code&gt; file in the &lt;code&gt;Views\Shared\DisplayTemplates&lt;/code&gt; folder to wrap each model property in the view with a span that uses the &lt;code&gt;Html.IdForModel&lt;/code&gt; Html Helper from System.Web.Mvc to generate an ID for the property control. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@model dynamic
@if (HttpContext.Current.IsDebuggingEnabled)
{ 
    &amp;lt;span id="@Html.IdForModel()"&amp;gt;@RenderBody()&amp;lt;/span&amp;gt;
}
else
{
    @RenderBody()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the &lt;code&gt;Html.DisplayNameFor&lt;/code&gt; expression above generates this HTML, with the value wrapped in a span with an ID. Now that all of our view model properties are named with a well-known, predictable, naming convention, we can set about automating the reading of these properties into a view model in our tests in an automated fashion.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dd&amp;gt;
    &amp;lt;span id="LastName"&amp;gt;Alexander&amp;lt;/span&amp;gt;
&amp;lt;/dd&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Read View Model Property from Web Page&lt;/h2&gt;

&lt;p&gt;We can extend the strongly typed base page with a method to read the value from a view page, again utilising the &lt;code&gt;ExpressionHelper&lt;/code&gt; class from System.Web.Mvc. The &lt;a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.tagbuilder.createsanitizedid%28v=vs.111%29.aspx"&gt;TagBuilder.CreateSanitizedId&lt;/a&gt; method is another System.Web.Mvc helper that ensures only valid HTML characters are used .&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public string DisplayFor&amp;lt;TField&amp;gt;(Expression&amp;lt;Func&amp;lt;TModel, TField&amp;gt;&amp;gt; field)
{
    string name = ExpressionHelper.GetExpressionText(field);
    string id = TagBuilder.CreateSanitizedId(name);

    var span = Host.Browser.FindElement(By.Id(id));

    return span.Text;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which can be used in tests in the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void CanReadFormFieldFromModelProperty()
{
    var studentDetailsPage = Host.NavigateTo&amp;lt;StudentController, StudentDetailsPage&amp;gt;(x =&amp;gt; x.Details(1));

    studentDetailsPage
        .DisplayFor(x =&amp;gt; x.LastName)
        .Should().Be("Alexander");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Read Whole View Model From Web Page&lt;/h2&gt;

&lt;p&gt;As with writing view model data to the page, we can extend this concept to read the whole view model from the page. Again, Seleno has a more fully featured &lt;a href="https://github.com/TestStack/TestStack.Seleno/blob/master/src/TestStack.Seleno/PageObjects/Actions/PageReader.cs"&gt;PageReader&lt;/a&gt; class, but here is a cut down version to illustrate the principle:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public TModel ReadModel()
{
    var type = typeof(TModel);
    var instance = new TModel();

    foreach (var property in type.GetProperties())
    {
        string name = ExpressionHelper.GetExpressionText(property.Name);
        string id = TagBuilder.CreateSanitizedId(name);

        var span = Host.Browser.FindElement(By.Id(id));
        property.SetValue(instance, span.Text, null);
    }

    return instance;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which you could use in tests similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void CanReadModelFromPage()
{
    var studentDetailsPage = Host.NavigateTo&amp;lt;StudentController, StudentDetailsPage&amp;gt;(x =&amp;gt; x.Details(1));

    StudentDetailsViewModel model = studentDetailsPage.ReadModel();

    model.FirstMidName.Should().Be("Carson");
    model.LastName.Should().Be("Alexander");
}
&lt;/code&gt;&lt;/pre&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/testing-mvc-reducing-use-of-magic-strings/</guid><link>http://www.michael-whelan.net/testing-mvc-reducing-use-of-magic-strings/</link><author>mjmwdev@gmail.com</author><category>Automated Testing</category><category>Black-Box Testing ASP.Net Series</category><title>Black-Box Testing ASP.Net: Reducing the Use of Magic Strings</title><description>&lt;p&gt;Although UI tests for an ASP.Net MVC application are &lt;a href="http://en.wikipedia.org/wiki/Black-box_testing"&gt;black-box tests&lt;/a&gt;, a little bit of knowledge of the inner workings of the application can go a long way to writing less brittle, more maintainable tests. For example, we have a lot of developer techniques for avoiding the use of "magic strings" in our application code. We can take advantage of these same techniques in our tests. &lt;/p&gt;

</description><pubDate>Sat, 03 Jan 2015 00:00:00 Z</pubDate><a10:updated>2015-01-03T00:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Although UI tests for an ASP.Net MVC application are &lt;a href="http://en.wikipedia.org/wiki/Black-box_testing"&gt;black-box tests&lt;/a&gt;, a little bit of knowledge of the inner workings of the application can go a long way to writing less brittle, more maintainable tests. For example, we have a lot of developer techniques for avoiding the use of "magic strings" in our application code. We can take advantage of these same techniques in our tests. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some of the sample code is taken straight from &lt;a href="https://github.com/TestStack/TestStack.Seleno"&gt;Seleno&lt;/a&gt;, the Selenium WebDriver browser automation framework from &lt;a href="http://teststack.net/"&gt;TestStack&lt;/a&gt;, and gives you a look under the hood at the sorts of things a UI automation framework does for you. If some of these samples are relevant to the problems you are trying to solve, I encourage you to check out Seleno. It takes care of a lot of the complex infrastructure setup of a Selenium WebDriver project for you, allowing you to get on with the important business of writing specifications for your application. I've produced a working sample on &lt;a href="https://github.com/mwhelan/MvcTestingSamples"&gt;GitHub&lt;/a&gt;, so you should be able to take it, run it, and use some of the code in your own applications if you want to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Magic strings is one of those things we developers often talk about wanting to avoid, but I found it quite difficult to articulate exactly what they are. Rob Conery has a good discussion of them &lt;a href="http://rob.conery.io/2011/03/10/are-friends-immutable/"&gt;here&lt;/a&gt;. As I understand it, the problem is that you can change a string value in your code that will break your application but the code will still compile - you don't discover the issue until runtime. It is preferable to discover the break at compile time (or failing that when you run your unit tests) rather than at runtime. This can be achieved by replacing the string with something strongly typed, like a class or an enum or a resource file. You have to be careful though. Some of the reflection-based techniques are quite nice from a compilation point of view, but can have &lt;a href="http://haacked.com/archive/2009/06/02/alternative-to-expressions.aspx/"&gt;performance implications&lt;/a&gt;. Whilst this might lead you to steer clear of certain solutions in your application code - I'm thinking of strongly typed controller actions here - I think they are well worth it in UI tests, where the need for reducing brittleness is so important and the need to eek out every drop of performance is not as great as it is for your web application.&lt;/p&gt;

&lt;h2&gt;Strongly Typed Navigation&lt;/h2&gt;

&lt;p&gt;One example of magic strings when UI testing MVC applications is page navigation. Selenium WebDriver uses a string URL to navigate. If the URL changes you have no way of knowing until you run the test and it fails. An MVC application uses routes to direct a request for a URL to the matching controller action. Your UI tests can do the same, but in reverse. Take a strongly typed controller action and lookup the route in the route table and return you the same computed URL your application recognises. This completely removes the brittleness of URLs from your tests as the URLs your tests use will always be completely in sync with those that the application is using.&lt;/p&gt;

&lt;p&gt;Here is a test that shows the desired behaviour. &lt;code&gt;RouteConfig.RegisterRoutes()&lt;/code&gt; is the method in the application that intialises its route table.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void MvcUrlHelper_should_return_correct_route_for_controller_action()
{
    var routes = RouteConfig.RegisterRoutes(new RouteCollection());
    var sut = new MvcUrlHelper(routes);

    sut.GetRelativeUrlFor&amp;lt;StudentController&amp;gt;(x =&amp;gt; x.Details(1))
        .Should().Be("/Student/Details/1");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We call the application code to get the same route collection that is configured for the application at startup and pass it into our MvcUrlHelper class. Then we can call the GetRelativeUrlFor generic method, passing the controller as the generic type and an expression for the controller action. It then returns the relative URL that the application uses for that controller action.  &lt;/p&gt;

&lt;p&gt;The code to achieve this is quite simple, as you would expect. Unfortunately, it does require a bit more setup than I would like. It would be nicer if this functionality was simply exposed in System.Web.Mvc (I'm using the latest v5.2.2 as at the time of writing this post).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MvcUrlHelper
{
    private readonly RouteCollection _routeCollection;

    public MvcUrlHelper(RouteCollection routeCollection)
    {
        _routeCollection = routeCollection;
    }

    public string GetRelativeUrlFor&amp;lt;TController&amp;gt;(Expression&amp;lt;Action&amp;lt;TController&amp;gt;&amp;gt; action)
        where TController : Controller
    {
        var requestContext = new RequestContext(FakeHttpContext.Root(), new RouteData());

        var actionRouteValues = Microsoft.Web.Mvc.Internal.ExpressionHelper.GetRouteValuesFromExpression(action);
        var urlHelper = new System.Web.Mvc.UrlHelper(requestContext, _routeCollection);
        var relativeUrl = urlHelper.RouteUrl(new RouteValueDictionary(actionRouteValues));

        return relativeUrl;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Firstly, the ExpressionHelper class, with the single GetRouteValuesFromExpression method requires the MVC5 Futures package (there is a version of this package for each version of MVC).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Install-Package Microsoft.AspNet.Mvc.Futures -Pre
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Secondly, you need to provide fake versions of a number of ASP.Net intrinsic classes. Way back in 2008, &lt;a href="http://stephenwalther.com/archive/2008/07/01/asp-net-mvc-tip-12-faking-the-controller-context"&gt;Stephen Walther wrote&lt;/a&gt; about how you can easily test ASP.NET intrinsics by creating a standard set of fakes for the ASP.NET intrinsics. These classes have been used in a number of libraries, notably MvcContrib.TestHelper and TestStack.Seleno. You can see that I have used the &lt;code&gt;FakeHttpContext&lt;/code&gt; class here, but this in turn depends on the &lt;code&gt;FakeHttpRequest&lt;/code&gt;, &lt;code&gt;FakeHttpResponse&lt;/code&gt;, and &lt;code&gt;FakeHttpSessionState&lt;/code&gt; classes (included in the sample).&lt;/p&gt;

&lt;h3&gt;Strongly Typed Navigation in Action&lt;/h3&gt;

&lt;p&gt;In TestStack.Seleno we don't have an MvcUrlHelper class as such. We instead utilise this behaviour in the PageNavigator class, allowing you to navigate to another page in a strongly typed fashion. Here I've added a NavigateTo method to the Host class, which provides a simplified example of the functionality. The method takes the controller action expression, navigates to the computed URL, and returns the specified page object for the new page location. Note that the MvcUrlHelper is initialised with the application routes once before all the tests run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[SetUpFixture]
public class Host
{
    ...
    private static MvcUrlHelper _mvcUrlHelper ;

    [SetUp]
    public void SetUp()
    {
        ...
        _mvcUrlHelper = new MvcUrlHelper(RouteConfig.RegisterRoutes(new RouteCollection()));
    }

    public static TPage NavigateTo&amp;lt;TController, TPage&amp;gt;(Expression&amp;lt;Action&amp;lt;TController&amp;gt;&amp;gt; action)
        where TController : Controller
        where TPage : new()
    {
        string relativeUrl = _mvcUrlHelper.GetRelativeUrlFor(action);
        string url = string.Format("{0}{1}", WebServer.BaseUrl, relativeUrl);
        Browser.Navigate().GoToUrl(url);
        return new TPage();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is a test that uses strongly typed navigation&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void CanNavigateToPageViaControllerAction()
{
    var newStudentPage = Host.NavigateTo&amp;lt;StudentController, NewStudentPage&amp;gt;(x =&amp;gt; x.Create());
    newStudentPage.Url.Should().Be(Host.WebServer.BaseUrl + "/Student/Create");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because the test now obtains the URL from an expression that is tied to the application, rather than from a string, it is less brittle and always in sync with the code. If the action name changes, or is removed, then this test won't compile, giving instant feedback that the change in the application has broken the test.&lt;/p&gt;

&lt;h2&gt;Resource Files&lt;/h2&gt;

&lt;p&gt;Resource files represent an elegant way to centralise the use of strings in an application and have the added benefit of making them strongly typed constants, as well as the potential benefit of internationalization. There are a few caveats about how you must set them up in the application in order to be able to access them from your test assemblies. K. Scott Allen has a great overview of the problem and solution &lt;a href="http://odetocode.com/blogs/scott/archive/2009/07/16/resource-files-and-asp-net-mvc-projects.aspx"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In summary, to make resource files accessible from other assemblies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't place resource files in one of the special resource directories (&lt;code&gt;App_LocalResources&lt;/code&gt; or &lt;code&gt;App_GlobalResources&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;In the Properties window for the resource file, make sure the &lt;code&gt;Build Action&lt;/code&gt; is set to &lt;code&gt;Embedded Resource&lt;/code&gt;, which embeds the resource in the web application's .dll. &lt;/li&gt;
&lt;li&gt;Also in the Properties window for the resource file, make sure the &lt;code&gt;Custom Tool&lt;/code&gt; is set to &lt;code&gt;PublicResXFileCodeGenerator&lt;/code&gt; instead of &lt;code&gt;ResXCodeFileGenerator&lt;/code&gt;. (Alternatively, you can open the resource file and select &lt;code&gt;Public&lt;/code&gt; from the &lt;code&gt;Access Modifier&lt;/code&gt; dropdown). This makes the class modifier public, and thus accessible outside the assembly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, now I can use a resource value in the view:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h2&amp;gt;&amp;lt;span id="title"&amp;gt;@Resources.Student_CreateForm_Title&amp;lt;/span&amp;gt;&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and in the tests:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void CanAccessResourceFilesFromTests()
{
    var newStudentPage = Host.NavigateTo&amp;lt;StudentController, NewStudentPage&amp;gt;(x =&amp;gt; x.Create());
    newStudentPage.HeaderTitle.Should().Be(Resources.Student_CreateForm_Title);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because the test now just references the constant value it is less brittle. Any changes to the resource file are immediately reflected in the test and don't cause it to break.&lt;/p&gt;

&lt;h2&gt;Static Constant Classes&lt;/h2&gt;

&lt;p&gt;Sometimes it can be useful to embed information in the application page that is just for the purpose of making testing easier. The MVC in Action series of books provide the example of a well-known hidden input on each page that provides a unique page identifier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input type="hidden" name="pageId" value="@LocalSiteMap.Pages.Student.Create" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then create a static class that exposes the site structure as a hierarchical model of constants.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class LocalSiteMap
{
    public static class Pages
    {
        public static class Student
        {
            public static readonly string Create = "studentCreate";
            public static readonly string Delete = "studentDelete";
            public static readonly string Details = "studentDetails";
            public static readonly string Edit = "studentEdit";
            public static readonly string Index = "studentIndex";
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because this identifier is agreed to be on every page, you can add a property to your base page object to read it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public string PageId
{
    get
    {
        return Host.Browser.FindElement(By.Id("pageId")).Text;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then use that property to assert which page you are on in tests in a strongly typed manner. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void CanIdentifyPageWithHiddenIdentifier()
{
    var newStudentPage = Host.NavigateTo&amp;lt;StudentController, NewStudentPage&amp;gt;(x =&amp;gt; x.Create());
    newStudentPage.PageId.Should().Be(LocalSiteMap.Pages.Student.Create);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, any changes to the constant value in the static class are reflected in both the application and the tests without breaking the tests.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/sql-server-localdb-2014-connection-string/</guid><link>http://www.michael-whelan.net/sql-server-localdb-2014-connection-string/</link><author>mjmwdev@gmail.com</author><category>SQL Server</category><title>SQL Server LocalDB 2014 Connection String</title><description>&lt;p&gt;I spent way too much time today trying to figure out why I could not connect to my newly installed SQL Server LocalDB 2014 instance. I assumed that I could just update my connection string from &lt;code&gt;v11.0&lt;/code&gt; to &lt;code&gt;v12.0&lt;/code&gt; but it seems that Microsoft have changed the naming scheme for this version. Now the automatic instance is named &lt;code&gt;MSSQLLocalDB&lt;/code&gt;.&lt;/p&gt;

</description><pubDate>Sun, 23 Nov 2014 00:00:00 Z</pubDate><a10:updated>2014-11-23T00:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I spent way too much time today trying to figure out why I could not connect to my newly installed SQL Server LocalDB 2014 instance. I assumed that I could just update my connection string from &lt;code&gt;v11.0&lt;/code&gt; to &lt;code&gt;v12.0&lt;/code&gt; but it seems that Microsoft have changed the naming scheme for this version. Now the automatic instance is named &lt;code&gt;MSSQLLocalDB&lt;/code&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;So, for SQL Server 2012 LocalDB, I had this connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;connectionStrings&amp;gt;
    &amp;lt;add name="SchoolContext" 
        connectionString="Data Source=(LocalDB)\v11.0;AttachDbFilename=|DataDirectory|\ContosoUniversityDB.mdf;Integrated Security=True;" 
        providerName="System.Data.SqlClient" /&amp;gt;
&amp;lt;/connectionStrings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For SQL Server 2014 LocalDB the connection string should be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;connectionStrings&amp;gt;
    &amp;lt;add name="SchoolContext" 
        connectionString="Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\ContosoUniversityDB.mdf;Integrated Security=True;" 
        providerName="System.Data.SqlClient" /&amp;gt;
&amp;lt;/connectionStrings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;According to &lt;a href="https://connect.microsoft.com/SQLServer/feedback/details/845278/sql-server-2014-express-localdb-does-not-create-automatic-instance-v12-0"&gt;Microsoft&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In SQL14, we moved away from the numbering/versioning for the automatic instance and named it "MSSQLLocalDB" instead of "v12.0".&lt;/p&gt;
&lt;/blockquote&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.michael-whelan.net/bddfy-chilled/</guid><link>http://www.michael-whelan.net/bddfy-chilled/</link><author>mjmwdev@gmail.com</author><category>Automated Testing</category><category>BDDfy</category><title>BDDfy Chilled</title><description>&lt;p&gt;I like to use BDDfy for unit testing as well as for black-box testing. Unit tests do not have the concept of user stories, but otherwise I like to use the same &lt;code&gt;Given When Then&lt;/code&gt; style of testing for all of my tests, and I think that I should have the same quality of reporting for my unit tests as for my acceptance tests. I have my own framework of code that I've built on top of BDDFy that I take from project to project. It gets a little tweaked each time, from NUnit to xUnit, or Moq to NSubstitute, or Castle Windsor to Autofac, depending on the tools each project uses. BDDfy is wonderfully customisable so you are free to make your test framework just they way you want it.&lt;/p&gt;

&lt;p&gt;I decided it would make sense to make the mocking/Ioc containers pluggable and publish the library to NuGet. I'm a big fan of Autofac and NSubstitute, and had noticed that Autofac provides automocking container implementations for most of the major mocking frameworks. Then I stumbled on &lt;a href="https://github.com/erwinvandervalk/chill"&gt;Chill&lt;/a&gt;, and found out that &lt;a href="https://twitter.com/ErwinVanDerValk"&gt;Erwin van der Valk&lt;/a&gt; was already doing something pretty similar and had done a great job with pluggable mocking containers, with future plans for IoC containers too. Chill is a BDD style testing framework.   &lt;/p&gt;

</description><pubDate>Fri, 31 Oct 2014 00:00:00 Z</pubDate><a10:updated>2014-10-31T00:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I like to use BDDfy for unit testing as well as for black-box testing. Unit tests do not have the concept of user stories, but otherwise I like to use the same &lt;code&gt;Given When Then&lt;/code&gt; style of testing for all of my tests, and I think that I should have the same quality of reporting for my unit tests as for my acceptance tests. I have my own framework of code that I've built on top of BDDFy that I take from project to project. It gets a little tweaked each time, from NUnit to xUnit, or Moq to NSubstitute, or Castle Windsor to Autofac, depending on the tools each project uses. BDDfy is wonderfully customisable so you are free to make your test framework just they way you want it.&lt;/p&gt;

&lt;p&gt;I decided it would make sense to make the mocking/Ioc containers pluggable and publish the library to NuGet. I'm a big fan of Autofac and NSubstitute, and had noticed that Autofac provides automocking container implementations for most of the major mocking frameworks. Then I stumbled on &lt;a href="https://github.com/erwinvandervalk/chill"&gt;Chill&lt;/a&gt;, and found out that &lt;a href="https://twitter.com/ErwinVanDerValk"&gt;Erwin van der Valk&lt;/a&gt; was already doing something pretty similar and had done a great job with pluggable mocking containers, with future plans for IoC containers too. Chill is a BDD style testing framework.   &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you stick it in a container, Chill will keep it cool.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, I messed around with combining BDDfy with Chill and thought the initial findings were worth sharing. I think this investigation will more than likely be superceded by Chill, as Erwin mentioned he is interested in the possibility of combining BDDfy with Chill. As usual, you can get the code on &lt;a href="https://github.com/mwhelan/BDDfyChilled"&gt;GitHub&lt;/a&gt;.  &lt;/p&gt;

&lt;h2&gt;Specification For&lt;/h2&gt;

&lt;p&gt;Chill uses the same &lt;a href="http://xunitpatterns.com/Testcase%20Class%20per%20Fixture.html"&gt;testcase class per fixture&lt;/a&gt; , inheritance-based, style that I favour, so the first step was just to inherit from the &lt;code&gt;Subject&lt;/code&gt; base classes. I need to add a method with the test framework attribute, [Test] for NUnit and [Fact] for xUnit, and call out to BDDFy to run the test. Thankfully, this is the only time I need to do that and all of my test implementation classes do not need any attributes. I would put each of these namespaces in its own library per test framework - I've not managed to find a way around that yet - but I've just combined them here for illustrative purposes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace BDDfyChilled.xUnit
{
    public abstract class SpecificationFor&amp;lt;TSubject&amp;gt; : GivenSubject&amp;lt;TSubject&amp;gt; where TSubject : class
    {
        [Fact]
        public void Run()
        {
            this.BDDfy();
        }
    }

    public abstract class SpecificationFor&amp;lt;TSubject, TResult&amp;gt; : GivenSubject&amp;lt;TSubject, TResult&amp;gt; where TSubject : class
    {
        [Fact]
        public void Run()
        {
            this.BDDfy();
        }
    }
}
namespace BDDfyChilled.NUnit
{
    public abstract class SpecificationFor&amp;lt;TSubject&amp;gt; : GivenSubject&amp;lt;TSubject&amp;gt; where TSubject : class
    {
        [Test]
        public void Run()
        {
            this.BDDfy();
        }
    }
    public abstract class SpecificationFor&amp;lt;TSubject, TResult&amp;gt; : GivenSubject&amp;lt;TSubject, TResult&amp;gt; where TSubject : class
    {
        [Test]
        public void Run()
        {
            this.BDDfy();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can create my test implementation class, combining the best of both worlds of BDDfy and Chill. BDDfy uses reflection to discover and run all of the test methods, and Chill provides all sorts of infrastructure to manage the Subject (or System Under Test), its dependencies, and other test data. Chill is handling the setup (the Givens), the execution (When). &lt;a href="http://www.fluentassertions.com/"&gt;Fluent Assertions&lt;/a&gt; rounds out the combination by handling the assertions (Thens) for a nice, terse specification. Awesome stuff!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ChillTestInitializer(typeof(DefaultChillTestInitializer&amp;lt;AutofacNSubstituteChillContainer&amp;gt;))]
public class RetrievingExistingCustomerAsynchronously : SpecificationFor&amp;lt;CustomerController, View&amp;gt;
{
    const int customerId = 12;

    public void Given_an_existing_customer()
    {
        Given(() =&amp;gt;
        {
            The&amp;lt;Customer&amp;gt;()
                .With(x =&amp;gt; x.Id = customerId);

            The&amp;lt;ICustomerStore&amp;gt;()
                .GetCustomerAsync(customerId)
                .Returns(The&amp;lt;Customer&amp;gt;().Asynchronously());
        });
    }

    public void When_retrieving_the_customer_asynchronously()
    {

        When(() =&amp;gt; Subject.GetAsync(customerId));
    }

    public void Then_view_is_returned()
    {
        Result.Should().NotBeNull();
    }

    public void AndThen_model_is_the_existing_custmoer()
    {
        Result.Model.Should().Be(The&amp;lt;Customer&amp;gt;());
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Custom BDDfy Method Name Step Scanner&lt;/h2&gt;

&lt;p&gt;Understandably, because Chill and BDDfy are both BDD frameworks, they both use the Given When Then syntax. When I run the test right now I get this error. BDDfy is calling the &lt;code&gt;Given&lt;/code&gt;, &lt;code&gt;When&lt;/code&gt;, and &lt;code&gt;TheNamed&lt;/code&gt; methods on the Chill base class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Specifications For: CustomerController

Scenario: Retrieving existing customer asynchronously
    Given an existing customer                        [Passed] 
    Given                                             [Failed] [Parameter count mismatch.] [Details at 1 below]
    When retrieving the customer asynchronously       [Not executed] 
    When                                              [Not executed] 
    When                                              [Not executed] 
    Then view is returned                             [Not executed] 
    The named                                         [Not executed] 
      And model is the existing custmoer              [Not executed] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We don't want BDDfy to run the Chill methods that conform to its Given When Then pattern. Fortunately, BDDfy allows you to replace the reflection method name step scanner. Here are the key changes - telling BDDfy to ignore the Chill methods named &lt;code&gt;Given&lt;/code&gt;, &lt;code&gt;When&lt;/code&gt; and &lt;code&gt;TheNamed&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AddMatcher(new MethodNameMatcher(s =&amp;gt; s.StartsWith("Given", StringComparison.OrdinalIgnoreCase) 
    &amp;amp;&amp;amp; s != "Given", ExecutionOrder.SetupState));
AddMatcher(new MethodNameMatcher(s =&amp;gt; s.StartsWith("When", StringComparison.OrdinalIgnoreCase) 
    &amp;amp;&amp;amp; s != "When", ExecutionOrder.Transition));
AddMatcher(new MethodNameMatcher(s =&amp;gt; s.StartsWith("Then", StringComparison.OrdinalIgnoreCase) 
    &amp;amp;&amp;amp; s != "TheNamed", ExecutionOrder.Assertion) { Asserts = true });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then tell BDDfy to use the new scanner:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Configurator.Scanners.DefaultMethodNameStepScanner.Disable();
Configurator.Scanners.Add(() =&amp;gt; new ChillMethodNameStepScanner());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite simple really, and now BDDfy and Chill play nicely together.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.michael-whelan.net/images/bddfy-chilled-report.png" alt="BDDfy report" /&gt;&lt;/p&gt;

&lt;h2&gt;Custom Report&lt;/h2&gt;

&lt;p&gt;Because these are just unit tests, and don't have user stories, I've created a custom metadata scanner to display &lt;code&gt;Specifications For: [Subject]&lt;/code&gt; (in this case the Subject is the CustomerController), which just uses reflection to grab the name of the Subject type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ChillStoryMetadataScanner : IStoryMetadataScanner
{
    public virtual StoryMetadata Scan(object testObject, Type explicityStoryType = null)
    {
        string specificationTitle = GetSubject(testObject);
        var story = new StoryAttribute() { Title = specificationTitle, TitlePrefix = "Specifications For: " };
        return new StoryMetadata(testObject.GetType(), story);
    }

    private string GetSubject(object testObject)
    {
        return testObject
            .GetType()
            .GetProperty("Subject", BindingFlags.Instance | BindingFlags.NonPublic)
            .PropertyType
            .Name;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I've also created a report configuration to change the header:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ChillBDDfyReportConfig : DefaultHtmlReportConfiguration
{
    public override string ReportHeader { get { return "BDDfy Chilled!"; }}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And plugged them both in using the BDDfy Configurator before any of the tests run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[SetUpFixture]
public class Host
{
    [SetUp]
    public void SetUp()
    {
        Configurator.Scanners.DefaultMethodNameStepScanner.Disable();
        Configurator.Scanners.Add(() =&amp;gt; new ChillMethodNameStepScanner());

        Configurator.Scanners.StoryMetadataScanner = () =&amp;gt; new ChillStoryMetadataScanner();

        Configurator.BatchProcessors.HtmlReport.Disable();
        Configurator.BatchProcessors.Add(new HtmlReporter(new ChillBDDfyReportConfig()));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I think BDDfy and Chill are a great combination and I'm looking forward to keeping an eye on the new features that Eriwn is adding to Chill to see more ways that I might be able to use them together. &lt;/p&gt;

&lt;p&gt;You can read more about Chill on Erwin's &lt;a href="http://www.erwinvandervalk.net/2014/10/introducing-chill-bdd-style-testing.html"&gt;blog&lt;/a&gt;. And, of course, you can learn more about &lt;a href="http://teststack.net/"&gt;TestStack&lt;/a&gt; and our &lt;a href="https://github.com/TestStack/TestStack.BDDfy"&gt;BDDfy&lt;/a&gt; framework. Finally, you can learn all about Fluent Assertions &lt;a href="http://www.fluentassertions.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
</a10:content></item></channel></rss>